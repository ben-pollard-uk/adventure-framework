<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdventureFramework</name>
    </assembly>
    <members>
        <member name="T:AdventureFramework.Structure.HostSetup">
            <summary>
            Represents generic setup protcols for various Windows program types
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.HostSetup.SetupWindowsConsole(AdventureFramework.Structure.GameFlow)">
            <summary>
            Setup the windows console for a new GameFlow
            </summary>
            <param name="flow">The flow to prepare the windows Console for</param>
        </member>
        <member name="T:AdventureFramework.Interaction.Item">
            <summary>
            Represents an item that can be used within the game
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ExaminableObject">
            <summary>
            Represents an object that can be examined
            </summary>
        </member>
        <member name="T:AdventureFramework.IO.XMLSerializableObject">
            <summary>
            Represents any object that can serialize to and from XML
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.XMLSerializableObject.encoding">
            <summary>
            Get or set the encoding object for UTF8
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.XMLSerializableObject.doc">
            <summary>
            Get or set the doc used for XML reading
            </summary>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.OnGetSchema">
            <summary>
            Get the XML schema
            </summary>
            <returns>The XMLSchema of this object</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.OnReadXml(System.Xml.XmlReader)">
            <summary>
            Handle reading XML
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing XML
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading XML
            </summary>
            <param name="node">The XML node to read</param>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.ReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Reconstruct an object from an xml node
            </summary>
            <param name="node">The node to reconstruct this object from</param>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.SerializeToXML(System.Xml.Serialization.IXmlSerializable)">
            <summary>
            Serialize an object into UTF8
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>A serialization of the object</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.Deserialize(System.String,System.Type)">
            <summary>
            Reconstruct an object from an XML string
            </summary>
            <param name="xmlString">The string to deserialize</param>
            <param name="typeOfObject">The type of the object to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.UTF8ByteArrayToString(System.Byte[])">
            <summary>
            To convert a Byte Array of Unicode values (UTF-8 encoded) to a complete String.
            </summary>
            <param name="characters">Unicode Byte Array to be converted to String</param>
            <returns>String converted from Unicode Byte Array</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.StringToUTF8ByteArray(System.String)">
            <summary>
            Converts a String to UTF8 Byte array
            </summary>
            <param name="xmlString">The xml string</param>
            <returns>A byte array based from the XML string</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.NodeExists(System.Xml.XmlDocument,System.String)">
            <summary>
            Get if a node exists
            </summary>
            <param name="doc">The document to search</param>
            <param name="tagName">The tag to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.NodeExists(System.Xml.XmlNode,System.String)">
            <summary>
            Get if a node exists
            </summary>
            <param name="node">The xml node to search</param>
            <param name="tagName">The tag to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.AttributeExists(System.Xml.XmlNode,System.String)">
            <summary>
            Get if a attribue exists
            </summary>
            <param name="node">The node to search for</param>
            <param name="attributeName">The attribute to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.AttributeExists(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Get if a attribue exists
            </summary>
            <param name="doc">The document to search</param>
            <param name="tagName">The tag to search for</param>
            <param name="attributeName">The attribute to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.GetAttribute(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Get an attribute
            </summary>
            <param name="doc"></param>
            <param name="tagName"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.GetAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Get a inner node from a node at a specified index
            </summary>
            <param name="node">The parent node to search</param>
            <param name="attributeName">The attribute that is being searched for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.GetNode(System.Xml.XmlNode,System.Int16)">
            <summary>
            Get a inner node from a node at a specified index
            </summary>
            <param name="node"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.GetNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Get a node
            </summary>
            <param name="doc">The document to search</param>
            <param name="tagName">The tag name to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.GetNode(System.Xml.XmlNode,System.String)">
            <summary>
            Get an node
            </summary>
            <param name="parentNode">The parent node to search</param>
            <param name="tagName">The tag name to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.GetSchema">
            <summary>
            Get the XmlSchema of this object
            </summary>
            <returns>This objects XmlSchema</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read Xml for this object
            </summary>
            <param name="reader">The XmlReader to read the Xml from</param>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializableObject.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write Xml for this object
            </summary>
            <param name="writer">The writer to use for all XmlWriting</param>
        </member>
        <member name="T:AdventureFramework.Interaction.IExaminable">
            <summary>
            Represents anything that is examinable
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.IExaminable.Examime">
            <summary>
            Examine this object
            </summary>
            <returns>A ExaminationResult detailing the examination of this object</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.IExaminable.Name">
            <summary>
            Get the name of this object
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.IExaminable.Description">
            <summary>
            Get or set a description of this object
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.IExaminable.IsPlayerVisible">
            <summary>
            Get if this is player visible
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ITransferableDelegation">
            <summary>
            Represents any object that can transfer delegation
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ITransferableDelegation.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this object
            </summary>
            <returns>The ID as a string</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ITransferableDelegation.TransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this object from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ITransferableDelegation.RegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all children that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation of this object</param>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.usedIDS">
            <summary>
            Get or set the used ID's to date
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.name">
            <summary>
            Get or set the name of this ExaminableObject
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.description">
            <summary>
            Get or set the description of this ExaminableObject
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.isPlayerVisible">
            <summary>
            Get or set if this is visible to the player
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.id">
            <summary>
            Get or set this objects ID
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.examination">
            <summary>
            Get or set the callback handling all examination of this object
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.#ctor">
            <summary>
            Initializes a new instance of the ExaminableObject class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.GenerateID">
            <summary>
            Generate an ID from a name
            </summary>
            <returns>The generated ID</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.OnExamined">
            <summary>
            Handle examination this object
            </summary>
            <returns>The result of this examination</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.OnGenerateTransferalID">
            <summary>
            Handle generation of a transferable ID for this ExaminableObject
            </summary>
            <returns>The ID of this object as a string</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.OnTransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Handle transferal of delegation to this ExaminableObject from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this ExaminableObject that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ExaminableObject</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this ExaminableObject
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this ExaminableObject
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.ResetIDSeed">
            <summary>
            Reset the ID seed
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.Examime">
            <summary>
            Examine this object
            </summary>
            <returns>A ExaminationResult detailing the examination of this object</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this ExaminableObject
            </summary>
            <returns>The ID of this object as a string</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.TransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this ExaminableObject from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.RegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this ExaminableObject that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ExaminableObject</param>
        </member>
        <member name="P:AdventureFramework.Interaction.ExaminableObject.ID">
            <summary>
            Get this objects ID
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ExaminableObject.Examination">
            <summary>
            Get or set the callback handling all examination of this object
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ExaminableObject.Name">
            <summary>
            Get the name of this object
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ExaminableObject.Description">
            <summary>
            Get or set a description of this object
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ExaminableObject.IsPlayerVisible">
            <summary>
            Get if this is player visible
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.IInteractWithItem">
            <summary>
            Represnts any object that can interact with an item
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.IInteractWithItem.Interact(AdventureFramework.Interaction.Item)">
            <summary>
            Interact with an item
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="T:AdventureFramework.Interaction.IImplementOwnActions">
            <summary>
            Represents any object that can implement it's own actions
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.IImplementOwnActions.ReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            React to an ActionableCommand
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.IImplementOwnActions.FindCommand(System.String)">
            <summary>
            Find a command by it's name
            </summary>
            <param name="command">The name of the command to find</param>
            <returns>The ActionableCommand (if it is found)</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.IImplementOwnActions.AdditionalCommands">
            <summary>
            Get or set the ActionableCommands this object can interact with
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Item.isTakeable">
            <summary>
            Get or set if this is takeable
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Item.interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Item.morphicType">
            <summary>
            Get or set the morphic type of this item. This allows correct file IO for the type of this item if it has morphed into a new type
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Item.additionalCommands">
            <summary>
            Get or set the additional actionable commands
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.#ctor">
            <summary>
            Initializes a new instance of the Item class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the Item class
            </summary>
            <param name="name">The name of this Item</param>
            <param name="description">A description of this Item</param>
            <param name="isTakeable">Specify if this item is takeable</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.#ctor(System.String,AdventureFramework.Interaction.Description,System.Boolean)">
            <summary>
            Initializes a new instance of the Item class
            </summary>
            <param name="name">The name of this Item</param>
            <param name="description">A description of this Item</param>
            <param name="isTakeable">Specify if this item is takeable</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.Morph(AdventureFramework.Interaction.Item)">
            <summary>
            Handle item morphing
            </summary>
            <param name="item">The item to morph into</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.Use(AdventureFramework.Interaction.IInteractWithItem)">
            <summary>
            Use this item on a target
            </summary>
            <param name="target">The target to use the item on</param>
            <retunrs>The result of the interaction</retunrs>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.OnInteract(AdventureFramework.Interaction.Item)">
            <summary>
            Handle interaction with other items
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.OnReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            Handle reactions to ActionableCommands
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the command</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.OnTransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Handle transferal of delegation to this Item from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this Item that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Item</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Item
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Item
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.Interact(AdventureFramework.Interaction.Item)">
            <summary>
            Interact with an item
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.ReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            React to an ActionableCommand
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Item.FindCommand(System.String)">
            <summary>
            Find a command by it's name
            </summary>
            <param name="command">The name of the command to find</param>
            <returns>The ActionableCommand (if it is found)</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.Item.IsTakeable">
            <summary>
            Get or set if this is takeable
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Item.Interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Item.MorphicType">
            <summary>
            Get or set the morphic type of this item. This allows correct file IO for the type of this item if it has morphed into a new type
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Item.AdditionalCommands">
            <summary>
            Get or set the ActionableCommands this object can interact with
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.Chains">
            <summary>
            A library of predefined FX Chains
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Chains.Attention">
            <summary>
            Get an Attention FX
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Chains.userDefinedChains">
            <summary>
            Get or set the user defined chains
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Chains.BufferUserDefinedChains">
            <summary>
            Buffer all user defined chains from the default folder into system memory
            </summary>
            <returns>True is the buffer was sucsessful</returns>
        </member>
        <member name="P:AdventureFramework.Sound.Chains.UserDefinedChains">
            <summary>
            Get the user defined chains
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.AsyncIOOperationFrame">
            <summary>
            Represents a frame for a file input/output operation
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.Frame">
            <summary>
            Represents a frame for displaying a command based interface
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.Frame.cursorLeft">
            <summary>
            Get or set the required cursors left position
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.Frame.cursorTop">
            <summary>
            Get or set the required cursors top position
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.Frame.showCursor">
            <summary>
            Get or set if the cursor should be shown
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.Frame.acceptsInput">
            <summary>
            Get or set if this Frame excepts input
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.Frame.#ctor">
            <summary>
            Initializes a new instance of the Frame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.Frame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this Frame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.Frame.Invalidate">
            <summary>
            Invalidate this Frame, forcing a re-render
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.Frame.OnDisposed">
            <summary>
            Handle disposal of this Frame
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.Frame.Dispose">
            <summary>
            Dispose this Frame
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.Frame.CursorLeft">
            <summary>
            Get the required cursors left position
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.Frame.CursorTop">
            <summary>
            Get the required cursors top position
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.Frame.ShowCursor">
            <summary>
            Get or set if the cursor should be shown
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.Frame.AcceptsInput">
            <summary>
            Get or set if this Frame excepts input
            </summary>
        </member>
        <member name="E:AdventureFramework.Rendering.Frames.Frame.Invalidated">
            <summary>
            Occurs if this Frame becomes invalid
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.AsyncIOOperationFrame.operation">
            <summary>
            Get or set the operation
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.AsyncIOOperationFrame.#ctor">
            <summary>
            Initializes a new instance of the IOOperationFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.AsyncIOOperationFrame.#ctor(AdventureFramework.Structure.EIOOperation)">
            <summary>
            Initializes a new instance of the IOOperationFrame class
            </summary>
            <param name="operation">The type of IO operation</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.AsyncIOOperationFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this AsyncIOOperationFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.AsyncIOOperationFrame.Operation">
            <summary>
            Get the operation
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.Region">
            <summary>
            Represents a region
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.GameLocation">
            <summary>
            Represents any game location
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.GameLocation.row">
            <summary>
            Get or set the row of this Room within it's parent location
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.GameLocation.column">
            <summary>
            Get or set the column of this Room within it's parent location
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.GameLocation.hasBeenVisited">
            <summary>
            Get or set if this GameLocation has been visited
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.GameLocation.#ctor">
            <summary>
            Initializes a new instance of the GameLocation class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.GameLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the GameLocation class
            </summary>
            <param name="columnWithinParnt">The column this GameLocation resides within its parent</param>
            <param name="rowWithinParent">The row this GameLocation resides within it's parent</param>
        </member>
        <member name="M:AdventureFramework.Locations.GameLocation.OnMovedInto(System.Nullable{AdventureFramework.Locations.ECardinalDirection})">
            <summary>
            Handle movement into this GameLocation
            </summary>
            <param name="fromDirection">The direction movement into this GameLocation is from. Use null if there should be no direction</param>
        </member>
        <member name="M:AdventureFramework.Locations.GameLocation.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this GameLocation
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Locations.GameLocation.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this GameLocation
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Locations.GameLocation.Row">
            <summary>
            Get or set the row of this Room within it's parent location
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.GameLocation.Column">
            <summary>
            Get or set the column of this Room within it's parent location
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.GameLocation.HasBeenVisited">
            <summary>
            Get if this GameLocation has been visited
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Region.rooms">
            <summary>
            Get or set the Rooms in this Region
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Region.currentRoom">
            <summary>
            Get or set the current Room
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Region.#ctor">
            <summary>
            Initializes a new instance of the Region class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Region.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Region class
            </summary>
            <param name="name">The name of this Region</param>
            <param name="description">The description of this Region</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the Region class
            </summary>
            <param name="name">The name of this Region</param>
            <param name="description">The description of this Region</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.CreateRoom(AdventureFramework.Locations.Room,System.Int32,System.Int32)">
            <summary>
            Create a Room in this Region
            </summary>
            <param name="room">The Room to create</param>
            <param name="columnInRegion">The column of the Room with this Region</param>
            <param name="rowInRegion">The row of the Room within this Region</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.CreateRoom(AdventureFramework.Locations.Room,AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Create a Room in this Region
            </summary>
            <param name="room">The Room to create</param>
            <param name="relativeLocation">The direction this Room lies in relative to the last Room created</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.GetAdjoiningRoom(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get an adjoining Room to the Region.CurrentRoom property
            </summary>
            <param name="direction">The direction of the adjoining Room</param>
            <returns>The adjoining Room, if there is one</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Region.GetAdjoiningRoom(AdventureFramework.Locations.ECardinalDirection,AdventureFramework.Locations.Room)">
            <summary>
            Get an adjoining Room to a specified Room
            </summary>
            <param name="direction">The direction of the adjoining Room</param>
            <param name="startRoom">The Room to start the check in</param>
            <returns>The adjoining Room, if there is one</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Region.Move(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Move in a specified direction
            </summary>
            <param name="direction">The direction to move in</param>
            <returns>If a move was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Region.Move(System.String)">
            <summary>
            Move to a specified Room
            </summary>
            <param name="roomName">The name of the Room to move to</param>
            <returns>If a move was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Region.Move(AdventureFramework.Locations.Room)">
            <summary>
            Move to a specified room
            </summary>
            <param name="room">The room to move to</param>
            <returns>If a move was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Region.SetStartRoom(AdventureFramework.Locations.Room)">
            <summary>
            Set the Room to start in
            </summary>
            <param name="room">The Room to start in</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.SetStartRoom(System.Int32)">
            <summary>
            Set the Room to start in
            </summary>
            <param name="index">The index of Room to start in</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.UnlockDoorPair(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Unlock a pair of doors in a speciifed direction in the CurrentRoom
            </summary>
            <param name="direction">The direction to unlock in</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.TryGetDirectionOfAdjoiningRoom(AdventureFramework.Locations.Room,AdventureFramework.Locations.Room,AdventureFramework.Locations.ECardinalDirection@)">
            <summary>
            Try and get the direction of an adjoining room
            </summary>
            <param name="sourceRoom">The source room</param>
            <param name="destinationRoom">The destination room</param>
            <param name="direction">The direction the destinationRoom lies in relative to the sourceRoom</param>
            <returns>True if the Room's connect, false if they don't connect</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Region.OnExamined">
            <summary>
            Handle examination this Region
            </summary>
            <returns>The result of this examination</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Region.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this Region that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Region</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Region
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Region
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Locations.Region.Rooms">
            <summary>
            Get the Rooms in this Region
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Region.CurrentRoom">
            <summary>
            Get the current Room
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Region.Item(System.Int32,System.Int32)">
            <summary>
            Get the first Room found at a specified location
            </summary>
            <param name="column">The column of the Room</param>
            <param name="row">The row of the Room</param>
            <returns>The adjoining room</returns>
        </member>
        <member name="T:AdventureFramework.Structure.GameIOEventArgs">
            <summary>
            Represents event arguments for GameIO events
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameIOEventArgs.game">
            <summary>
            Get or set the Game passed by these args
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameIOEventArgs.#ctor(AdventureFramework.Structure.Game)">
            <summary>
            Initializes a new instance of the GameIOEventArgs class
            </summary>
            <param name="game">The Game to pass in the args</param>
        </member>
        <member name="P:AdventureFramework.Structure.GameIOEventArgs.Game">
            <summary>
            Get the Game passed by these args
            </summary>
        </member>
        <member name="T:AdventureFramework.Structure.GameIOEventHandler">
            <summary>
            Event handler for Game I/O events 
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AdventureFramework.Sound.Players.StreamPlayer">
            <summary>
            Play a sound file as a stream
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.Players.SoundPlayer">
            <summary>
            Represent a sgeneric sound player
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.SoundPlayer.useSounds">
            <summary>
            Get or set if souds should be used
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.Players.SoundPlayer.UseSounds">
            <summary>
            Get or set if souds should be used
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayWav(System.String)">
            <summary>
            Play a sound file. The resource will be played asychronously
            </summary>
            <param name="fileName">The full file name of the file to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayWav(System.String,System.UInt32)">
            <summary>
            Play a sound file
            </summary>
            <param name="fileName">The full file name of the file to play</param>
            <param name="flags">The flags to use when playing the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayWav(System.String,System.UInt32,AdventureFramework.Sound.Players.ESyncModes)">
            <summary>
            Play a sound file
            </summary>
            <param name="fileName">The full file name of the file to play</param>
            <param name="flags">The flags to use when playing the sound</param>
            <param name="preSendMode">The sync mode to use prior to sending the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Play a sound file from a resource. The resource will be played asychronously
            </summary>
            <param name="assembly">The assembly the sound file belongs to</param>
            <param name="fileName">The file name of the stream, including it's extension. Any directories that the resource lies in should be specified with '.' instead of '/' e.g. .DirectoryName.File.wav</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayResourceStream(System.Reflection.Assembly,System.String,System.UInt32)">
            <summary>
            Play a sound file from a resource
            </summary>
            <param name="assembly">The assembly the sound file belongs to</param>
            <param name="fileName">The file name of the stream, including it's extension. Any directories that the resource lies in should be specified with '.' instead of '/' e.g. .DirectoryName.File.wav</param>
            <param name="flags">The flags to use when playing the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayResourceStream(System.Reflection.Assembly,System.String,System.UInt32,AdventureFramework.Sound.Players.ESyncModes)">
            <summary>
            Play a sound file from a resource
            </summary>
            <param name="assembly">The assembly the sound file belongs to</param>
            <param name="fileName">The file name of the stream, including it's extension. Any directories that the resource lies in should be specified with '.' instead of '/' e.g. .DirectoryName.File.wav</param>
            <param name="flags">The flags to use when playing the sound</param>
            <param name="preSendMode">The sync mode to use prior to sending the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayStream(System.IO.Stream)">
            <summary>
            Play a stream. The stream will be played asychronously
            </summary>
            <param name="stream">The stream to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayStream(System.IO.Stream,System.UInt32)">
            <summary>
            Play a stream
            </summary>
            <param name="stream">The stream to play</param>
            <param name="flags">The flags to use when playing the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayStream(System.IO.Stream,System.UInt32,AdventureFramework.Sound.Players.ESyncModes)">
            <summary>
            Play a stream
            </summary>
            <param name="stream">The stream to play</param>
            <param name="flags">The flags to use when playing the sound</param>
            <param name="preSendMode">The sync mode to use prior to sending the sound</param>
        </member>
        <member name="T:AdventureFramework.Sound.Players.ESoundFlags">
            <summary>
            Enumeration of sound flags
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_SYNC">
            <summary>
            Play synchronously (default)
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_ASYNC">
            <summary>
            Play asynchronously
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_NODEFAULT">
            <summary>
            Silence (default) if sound not found
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_MEMORY">
            <summary>
            Stream points to a memory file
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_LOOP">
            <summary>
            Loop the sound until next sndPlaySound
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_NOSTOP">
            <summary>
            Don't stop any currently playing sound
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_NOWAIT">
            <summary>
            Don't wait if the driver is busy
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_ALIAS">
            <summary>
            Name is a registry alias
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_ALIAS_ID">
            <summary>
            Alias is a predefined ID
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_FILENAME">
            <summary>
            Name is file name
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_RESOURCE">
            <summary>
            Name is resource name or atom 
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.Players.ESyncModes">
            <summary>
            Enumeration of sync modes
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESyncModes.Async">
            <summary>
            Asynchronous
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESyncModes.Sync">
            <summary>
            Sychronous
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.Beep">
            <summary>
            Represents a single beep of the motherboard
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.IBeep">
            <summary>
            Interface for mother board beeps
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.IBeep.Duration">
            <summary>
            Get or set the duration in ms
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.IBeep.Frequency">
            <summary>
            Get or set the frequency in htZ
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Beep.FrequencyChangeBetweenOctaves">
            <summary>
            Get the frequency between octaves
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Beep.duration">
            <summary>
            Get or set the duration of this note in milliseconds
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Beep.frequency">
            <summary>
            Get or set the frequency of the note that will be played
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Beep struct with a standard duration of 250ms
            </summary>
            <param name="frequency">Specify the frequency of the note of this FrequencyBeep</param>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Beep struct
            </summary>
            <param name="frequency">Specify the frequency of the note of this FrequencyBeep</param>
            <param name="duration">Specify the duration of this FrequencyBeep</param>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.ToString">
            <summary>
            Get this Beep as a string
            </summary>
            <returns>This Beep displayed as a string</returns>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.getWhiteSpace(System.Int32)">
            <summary>
            Get a portion of whitespace
            </summary>
            <param name="length">The length (in characters) of the whitespace</param>
            <returns>A whitespace string</returns>
        </member>
        <member name="P:AdventureFramework.Sound.Beep.Duration">
            <summary>
            Get or set the duration in ms
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.Beep.Frequency">
            <summary>
            Get or set the frequency in htZ
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Result">
            <summary>
            Represents a Result to something
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Result.desciption">
            <summary>
            Get or set the descritpion of this Result
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Result.#ctor">
            <summary>
            Initializes a new instance of the Result class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Result.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Result
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Result.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Result
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Interaction.Result.Desciption">
            <summary>
            Get the descritpion of this Result
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.MapDrawer">
            <summary>
            A class for drawing maps
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.Drawer">
            <summary>
            A class for drawing strings
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Drawer.leftBoundaryCharacter">
            <summary>
            Get or set the character used for left boundaries
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Drawer.rightBoundaryCharacter">
            <summary>
            Get or set the character used for right boundaries
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.#ctor">
            <summary>
            Initializes a new instance of the Drawer class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructPaddedArea(System.Int32,System.Int32)">
            <summary>
            Construct a padded area
            </summary>
            <param name="width">The width of the padded area</param>
            <param name="height">The height of the padded area</param>
            <returns>A constructed padded area</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructPaddedArea(System.Char,System.Char,System.Int32,System.Int32)">
            <summary>
            Construct a padded area
            </summary>
            <param name="leftBoundary">The left boundary string</param>
            <param name="rightBoundary">The right boundary string</param>
            <param name="width">The width of the padded area</param>
            <param name="height">The height of the padded area</param>
            <returns>A constructed padded area</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructDevider(System.Int32,System.Char,System.Char,System.Char)">
            <summary>
            Construct a deviding horizontal line
            </summary>
            <param name="width">The width of the devider</param>
            <param name="leftBoundary">The left boundary character</param>
            <param name="deviderString">The deviding character</param>
            <param name="rightBoundary">The right boundary character</param>
            <returns>A constructed devider</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructWrappedPaddedString(System.String,System.Int32)">
            <summary>
            Construct a wrapped padded string, ready for display
            </summary>
            <param name="displayString">The string to pad</param>
            <param name="width">The desired overall width of the padded string</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.constructWhiteSpaceWithBoundaryDevider(System.Int32,System.Char,System.Char)">
            <summary>
            Construct a deviding horizontal line
            </summary>
            <param name="width">The width of the devider</param>
            <param name="leftBoundary">The left boundary character</param>
            <param name="rightBoundary">The right boundary character</param>
            <returns>A constructed devider</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructWhitespaceString(System.Int32)">
            <summary>
            Construct a string made of whitespace
            </summary>
            <param name="width">The width of the whitespace</param>
            <returns>A string constructed of whitespace</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructUnboarderedCentralisedString(System.String,System.Int32)">
            <summary>
            Construct a unboardered, centralised string
            </summary>
            <param name="displayString">The string to pad</param>
            <param name="width">The desired overall width of the padded string</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructCentralisedString(System.String,System.Int32,System.Char,System.Char)">
            <summary>
            Construct a centralised string, ready for display
            </summary>
            <param name="displayString">The string to pad</param>
            <param name="width">The desired overall width of the padded string</param>
            <param name="leftBoundary">The left boundary character</param>
            <param name="rightBoundary">The right boundary character</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructCentralisedString(System.String,System.Int32)">
            <summary>
            Construct a centralised string, ready for display
            </summary>
            <param name="displayString">The string to pad</param>
            <param name="width">The desired overall width of the padded string</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructWrappedPaddedString(System.String,System.Int32,System.Boolean)">
            <summary>
            Construct a wrapped padded string, ready for display
            </summary>
            <param name="displayString">The string to pad</param>
            <param name="width">The desired overall width of the padded string</param>
            <param name="centralise">Specify if the string should be centralised</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.ConstructWrappedPaddedString(System.String,System.Int32,System.Char,System.Char,System.Boolean)">
            <summary>
            Construct a wrapped padded string, ready for display
            </summary>
            <param name="displayString">The string to pad</param>
            <param name="width">The desired overall width of the padded string</param>
            <param name="leftBoundary">The left boundary character</param>
            <param name="rightBoundary">The right boundary character</param>
            <param name="centralise">set if the string should be centralised</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.DetermineLinesInString(System.String)">
            <summary>
            Determine the amount of lines in a string
            </summary>
            <param name="input">The input to determine the amount of lines from</param>
            <returns>The amount of lines in the string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Drawer.extractNextWordFromString(System.String@)">
            <summary>
            Extract the next word from a string
            </summary>
            <param name="input">The input string</param>
            <returns>The extracted work</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.Drawer.LeftBoundaryCharacter">
            <summary>
            Get or set the character used for left boundaries
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Drawer.RightBoundaryCharacter">
            <summary>
            Get or set the character used for right boundaries
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.MapDrawer.lockedExitString">
            <summary>
            Get or set the string used for representing a locked exit
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.MapDrawer.itemInRoomString">
            <summary>
            Get or set the string used for representing there is an item in the room
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.MapDrawer.key">
            <summary>
            Get or set the type of key to use
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.MapDrawer.roomVisibilityMode">
            <summary>
            Get or set the visibility mode to use for Rooms
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.MapDrawer.regionMapDetail">
            <summary>
            Get or set the detail to use for a Region map
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.#ctor">
            <summary>
            Initializes a new instance of the MapDrawer class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.#ctor(AdventureFramework.Rendering.EKeyType)">
            <summary>
            Initializes a new instance of the MapDrawer class
            </summary>
            <param name="key">Specify the type of key to use</param>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.#ctor(AdventureFramework.Rendering.EKeyType,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapDrawer class
            </summary>
            <param name="key">Specify the type of key to use</param>
            <param name="lockedExitString">Specify a string used for representing a locked exit</param>
            <param name="itemInRoomString">Specify a string used for representing there is an item in the room</param>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.#ctor(AdventureFramework.Rendering.EKeyType,System.String,System.String,AdventureFramework.Rendering.ERegionDisplayMode,AdventureFramework.Rendering.ERegionMapMode)">
            <summary>
            Initializes a new instance of the MapDrawer class
            </summary>
            <param name="key">Specify the type of key to use</param>
            <param name="lockedExitString">Specify a string used for representing a locked exit</param>
            <param name="itemInRoomString">Specify a string used for representing there is an item in the room</param>
            <param name="roomVisibilityMode">Specify a visibility mode to be used for Room's</param>
            <param name="regionMapDetail">Specify a Region map detail mode</param>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.ConstructRoomMap(AdventureFramework.Locations.Room,System.Int32)">
            <summary>
            Construct a map for a Room
            </summary>
            <param name="room">The Room to draw</param>
            <param name="width">The allocated with to draw within</param>
            <returns>A map of the Room in a String</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.constructUndetailedRegionMap(AdventureFramework.Locations.Region,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct an undetailed Region map
            </summary>
            <param name="region">The Region to construct the map for</param>
            <param name="width">The width of the map</param>
            <param name="minColumn">The minimum column any Room within the Region</param>
            <param name="maxColumn">The maximum column any Room within the Region</param>
            <param name="minRow">The minimum row any Room within the Region</param>
            <param name="maxRow">The maximum row any Room within the Region</param>
            <returns>A reresentation of the Region as a string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.constructDetailedRegionMap(AdventureFramework.Locations.Region,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a detailed Region map
            </summary>
            <param name="region">The Region to construct the map for</param>
            <param name="width">The width of the map</param>
            <param name="roomWidth">The width of each room</param>
            <param name="minColumn">The minimum column any Room within the Region</param>
            <param name="maxColumn">The maximum column any Room within the Region</param>
            <param name="minRow">The minimum row any Room within the Region</param>
            <param name="maxRow">The maximum row any Room within the Region</param>
            <returns>A reresentation of the Region as a string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.constructRoomRowString(AdventureFramework.Locations.Room,System.Boolean,System.Int32)">
            <summary>
            Construct a string representing a row clice of a room
            </summary>
            <param name="room">The Room to get a slice of</param>
            <param name="isPlayerInRoom">If the player is in the room</param>
            <param name="row">The slice of the row to get (0 = top, 1 = middle, 2 = bottom)</param>
            <returns>The constructed room slice</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.tryGetRegionExtremities(AdventureFramework.Locations.Region,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Try and get the extremeties of a Region
            </summary>
            <param name="region">The Region to check</param>
            <param name="minColumn">The lowest valued column</param>
            <param name="maxColumn">The highest valued colummn</param>
            <param name="minRow">The lowest valued row</param>
            <param name="maxRow">The highest valued row</param>
            <returns>True if the check was sucsessful, else false</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.MapDrawer.ConstructRegionMap(AdventureFramework.Locations.Region,System.Int32,System.Int32)">
            <summary>
            Construct a map of a Region
            </summary>
            <param name="region">The Region to draw</param>
            <param name="width">The allocated width to draw within</param>
            <param name="height">The allocated height to draw within</param>
            <returns>A map of the Region in a String</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.MapDrawer.LockedExitString">
            <summary>
            Get or set the string used for representing a locked exit
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.MapDrawer.ItemInRoomString">
            <summary>
            Get or set the string used for representing there is an item in the room
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.MapDrawer.Key">
            <summary>
            Get or set the type of key to use
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.MapDrawer.RoomVisibilityMode">
            <summary>
            Get or set the visibility mode to use for Rooms
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.MapDrawer.RegionMapDetail">
            <summary>
            Get or set the detail to use for a Region map
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.ERegionMapMode">
            <summary>
            Enumeration of region map modes
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.ERegionMapMode.Detailed">
            <summary>
            Shows rooms at a detailed level
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.ERegionMapMode.Undetailed">
            <summary>
            Shows rooms as one character, which allows larger maps to be displayed in a limited area
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.ERegionMapMode.Dynamic">
            <summary>
            Dynamic region map - uses detailed if there is room, else map will be undetailed
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.ERegionDisplayMode">
            <summary>
            Enumeration of region display modes
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.ERegionDisplayMode.VistitedRoomsOnly">
            <summary>
            Only show visited rooms
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.ERegionDisplayMode.AllRegion">
            <summary>
            Show the whole region if it has been visited or not
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.TitleFrame">
            <summary>
            Represents a frame that can be used as a title screen
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.TitleFrame.title">
            <summary>
            Get or set the title
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.TitleFrame.description">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.TitleFrame.#ctor">
            <summary>
            Initializes a new instance of the TitleFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.TitleFrame.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TitleFrame class
            </summary>
            <param name="title">The title of the game</param>
            <param name="description">A description of the game</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.TitleFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this TitleFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.TitleFrame.Title">
            <summary>
            Get the title
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.TitleFrame.Description">
            <summary>
            Get the description
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.FrameDrawer">
            <summary>
            A class for constructing and drawing Frame's
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.FrameDrawer.deviderCharacter">
            <summary>
            Get or set the screen devider character
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.FrameDrawer.displayCommands">
            <summary>
            Get or set if commands are displayed
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.FrameDrawer.#ctor">
            <summary>
            Initializes a new instance of the SceneDrawer class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.FrameDrawer.#ctor(System.Char,System.Char,System.Char)">
            <summary>
            Initializes a new instance of the SceneDrawer class
            </summary>
            <param name="leftBoundaryCharacter">The character to use for left boundaries</param>
            <param name="rightBoundaryCharacter">The character to use for right boundaries</param>
            <param name="devidingCharacter">The character to use for deviders</param>
        </member>
        <member name="M:AdventureFramework.Rendering.FrameDrawer.ConstructDevider(System.Int32)">
            <summary>
            Construct a deviding horizontal line
            </summary>
            <param name="width">The width of the devider</param>
            <returns>A constructed devider</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.FrameDrawer.DisplayCustomFrame(AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Request a custom Frame to be displayed to any context listening for the FrameDrawer.DisplaySpecialFrame event
            </summary>
            <param name="frame">The frame to </param>
        </member>
        <member name="P:AdventureFramework.Rendering.FrameDrawer.DeviderCharacter">
            <summary>
            Get or set the screen devider character
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.FrameDrawer.DisplayCommands">
            <summary>
            Get or set if commands are displayed
            </summary>
        </member>
        <member name="E:AdventureFramework.Rendering.FrameDrawer.DisplaySpecialFrame">
            <summary>
            Occurs when a special frame has been requested to be displayed
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.EKeyType">
            <summary>
            Enumeration of key types
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EKeyType.None">
            <summary>
            No key
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EKeyType.Full">
            <summary>
            Full key
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EKeyType.Dynamic">
            <summary>
            Dynamic key, only show relevant key items
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.EFrameDrawerOption">
            <summary>
            Enumeration of FrameDrawer options
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EFrameDrawerOption.KeyOn">
            <summary>
            Turn the key on
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EFrameDrawerOption.KeyOff">
            <summary>
            Turn the key off
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EFrameDrawerOption.CommandsOn">
            <summary>
            Turn commands on
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EFrameDrawerOption.CommandsOff">
            <summary>
            Turn commands off
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EFrameDrawerOption.Invert">
            <summary>
            Invert display colours
            </summary>
        </member>
        <member name="T:AdventureFramework.Structure.Game">
            <summary>
            Represents the structure of the game
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.player">
            <summary>
            Get or set the player
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.overworld">
            <summary>
            Get or set the Overworld
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.name">
            <summary>
            Get or set the name
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.description">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.hasEnded">
            <summary>
            Get or set if this game has ended
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.titleFrame">
            <summary>
            Get or set this Games frame to display for the title screen
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.completionFrame">
            <summary>
            Get or set this Games frame to display upon completion
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.helpFrame">
            <summary>
            Get or set this Games help screen
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.currentFrame">
            <summary>
            Get or set the current Frame
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.lastUsedWidth">
            <summary>
            Get or set the last used width
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.lastUsedHeight">
            <summary>
            Get or set the last used height
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.lastUsedMapDrawer">
            <summary>
            Get or set the last used map drawer
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.completionCondition">
            <summary>
            Get or set the completion condition
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.Game.parser">
            <summary>
            Get or set the parser for this Game
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.Game.#ctor">
            <summary>
            Initializes a new instance of the Game class
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.Game.#ctor(System.String,System.String,AdventureFramework.Interaction.PlayableCharacter,AdventureFramework.Locations.Overworld)">
            <summary>
            Initializes a new instance of the Game class
            </summary>
            <param name="name">The name of this Game</param>
            <param name="description">A description of this Game</param>
            <param name="player">The Player to use for this Game</param>
            <param name="overworld">A Overworld to use for this Game</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.End">
            <summary>
            End the Game
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.Game.OnCurrentFrameUpdated(AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Handle CurrentFrame updating
            </summary>
            <param name="frame">The updated frame</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.OnGameEnded(AdventureFramework.Structure.EExitMode)">
            <summary>
            Handle game ended
            </summary>
            <param name="mode">The exit mode</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.ReactToInput(System.String)">
            <summary>
            React to input
            </summary>
            <param name="input">The input to react to</param>
            <returns>A result detailing the reaction</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.EnterGame(System.Int32,System.Int32,AdventureFramework.Rendering.MapDrawer)">
            <summary>
            Enter the game
            </summary>
            <param name="width">The width of the game</param>
            <param name="height">The height of the game</param>
            <param name="drawer">A drawer to use for constructing the map</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.GetScene">
            <summary>
            Get a scene based on the current game
            </summary>
            <returns>A constructed frame of the scene</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.GetScene(AdventureFramework.Rendering.MapDrawer)">
            <summary>
            Get a scene based on the current game
            </summary>
            <param name="drawer">A drawer to use for constructing the map</param>
            <returns>A constructed frame of the scene</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.GetScene(AdventureFramework.Rendering.MapDrawer,System.Int32,System.Int32)">
            <summary>
            Get a scene based on the current game
            </summary>
            <param name="drawer">A drawer to use for constructing the map</param>
            <param name="width">The width of the scene</param>
            <param name="height">The height of the scene</param>
            <returns>A constructed frame of the scene</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.GetScene(AdventureFramework.Rendering.MapDrawer,System.Int32,System.Int32,System.String)">
            <summary>
            Get a scene based on the current game
            </summary>
            <param name="drawer">A drawer to use for constructing the map</param>
            <param name="width">The width of the scene</param>
            <param name="height">The height of the scene</param>
            <param name="messageToUser">A message to the user</param>
            <returns>A constructed frame of the scene</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.OnHandlePlayerDied(System.String,System.String)">
            <summary>
            Handle player deaths
            </summary>
            <param name="titleMessage">A title message to display</param>
            <param name="reason">A reason for the death</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.GetAllObjectsWithAdditionalCommands">
            <summary>
            Get all objects in this Game (that are within the current scope) that implement IImplementOwnActions
            </summary>
            <returns>All IImplementOwnActions objects</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.IsValidActionableCommand(System.String)">
            <summary>
            Get if a string is a valid ActionableCommand
            </summary>
            <param name="command">The command to search for</param>
            <returns>True if the command was fouund, else false</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.FindActionableCommand(System.String)">
            <summary>
            Find a ActionableCommand in this Games IImplementOwnActions objects
            </summary>
            <param name="command">The command to search for</param>
            <returns>The first ActionableCommand whose Command property matches the command parameter</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.FindIImplementOwnActionsObject(System.String)">
            <summary>
            Find a IImplementOwnActions in this objects IImplementOwnActions objects
            </summary>
            <param name="command">The command to search for</param>
            <returns>The first IImplementOwnActions object whose Command property matches the command parameter</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.FindInteractionTarget(System.String)">
            <summary>
            Find an interaction target within the current scope fo this Game
            </summary>
            <param name="name">The targets name</param>
            <returns>The first IInteractWithItem object which has a name that matches the name parameter</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.Refresh">
            <summary>
            Refresh the current frame
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.Game.Refresh(System.String)">
            <summary>
            Refresh the current frame
            </summary>
            <param name="message">Any message to display</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.Refresh(AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Refresh the current frame
            </summary>
            <param name="frame">A frame to display</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.OnGenerateTransferalID">
            <summary>
            Handle generation of a transferable ID for this Game
            </summary>
            <returns>The ID of this object as a string</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.OnTransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Handle transferal of delegation to this Game from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this Game that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Game</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Game
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Game
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.FindRootNode(System.Xml.XmlDocument)">
            <summary>
            Find the root node in an XML document for a Game
            </summary>
            <param name="doc">The XmlDocument to search for the root node in</param>
            <returns>The root node</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.digForRootNode(System.Xml.XmlNode)">
            <summary>
            Recursively dig for a root node
            </summary>
            <param name="node">The parent node</param>
            <returns>The root node, if it is found</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.isRootNode(System.Xml.XmlNode)">
            <summary>
            Get if a XmlNode is the root node for a Game object
            </summary>
            <param name="node">The node to check</param>
            <returns>If the node was the root</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this Game
            </summary>
            <returns>The ID of this object as a string</returns>
        </member>
        <member name="M:AdventureFramework.Structure.Game.TransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this Game from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Structure.Game.RegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this Game that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Game</param>
        </member>
        <member name="P:AdventureFramework.Structure.Game.Player">
            <summary>
            Get or set the player
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.Overworld">
            <summary>
            Get or set the Overworld
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.Name">
            <summary>
            Get or set the name
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.Description">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.HasEnded">
            <summary>
            Get if this game has ended
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.TitleFrame">
            <summary>
            Get or set this Games frame to display for the title screen
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.CompletionFrame">
            <summary>
            Get or set this Games frame to display upon completion
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.HelpFrame">
            <summary>
            Get or set this Games help screen
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.CurrentFrame">
            <summary>
            Get the current Frame
            </summary>
        </member>
        <member name="E:AdventureFramework.Structure.Game.CurrentFrameUpdated">
            <summary>
            Occurs when the CurrentFrame is updated
            </summary>
        </member>
        <member name="E:AdventureFramework.Structure.Game.Ended">
            <summary>
            Occurs when the Game has ended
            </summary>
        </member>
        <member name="E:AdventureFramework.Structure.Game.Completed">
            <summary>
            Occurs when the Game has been completed
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.CompletionCondition">
            <summary>
            Get or set the completion condition
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.Game.Parser">
            <summary>
            Get or set the parser for this Game
            </summary>
        </member>
        <member name="T:AdventureFramework.Structure.GameCreator">
            <summary>
            Represents the callback used for creating new Game's
            </summary>
            <returns>A game created by the callback</returns>
        </member>
        <member name="T:AdventureFramework.Structure.IOOperationCallback">
            <summary>
            Represents the callback for an IO operation
            </summary>
            <param name="message">Any message retunred by the operation</param>
            <returns>The result of the IO operation</returns>
        </member>
        <member name="T:AdventureFramework.Structure.IOSprecifiedFileOperationCallback">
            <summary>
            Represents the callback for an IO operation
            </summary>
            <param name="message">Any message retunred by the operation</param>
            <param name="fileName">The full file name of the file to interact with</param>
            <returns>The result of the IO operation</returns>
        </member>
        <member name="T:AdventureFramework.Structure.CompletionCheck">
            <summary>
            Represents the callback used for completion checks
            </summary>
            <param name="game">The Game to check for completion</param>
            <returns>Returns if the condition if fulfilled</returns>
        </member>
        <member name="T:AdventureFramework.Structure.EGameCommand">
            <summary>
            Enumeration of game commands
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EGameCommand.New">
            <summary>
            New game
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EGameCommand.Save">
            <summary>
            Save the game
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EGameCommand.Load">
            <summary>
            Load a game
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EGameCommand.Exit">
            <summary>
            Exit the game
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EGameCommand.Help">
            <summary>
            View help
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EGameCommand.Map">
            <summary>
            View the region map
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EGameCommand.About">
            <summary>
            View information about the game
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EGameCommand.SoundOn">
            <summary>
            Turn sounds on
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EGameCommand.SoundOff">
            <summary>
            Turn sounds off
            </summary>
        </member>
        <member name="T:AdventureFramework.Structure.EIOOperation">
            <summary>
            Enumeration of IO operations
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EIOOperation.Save">
            <summary>
            Saving
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EIOOperation.Load">
            <summary>
            Loaidng
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.EndFrame">
            <summary>
            Represents a frame for when the game ends
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.EndFrame.message">
            <summary>
            Get or set the message
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.EndFrame.reason">
            <summary>
            Get or set the reason
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.EndFrame.#ctor">
            <summary>
            Initializes a new instance of the EndFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.EndFrame.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the EndFrame class
            </summary>
            <param name="message">A message to show the user</param>
            <param name="reason">The reason for the end</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.EndFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this EndFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.EndFrame.Message">
            <summary>
            Get the message
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.EndFrame.Reason">
            <summary>
            Get the reason
            </summary>
        </member>
        <member name="T:AdventureFramework.IO.GameSave">
            <summary>
            A class for saving and loading Game objects from a file
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.GameSave.password">
            <summary>
            Get or set the salt value for all encryption
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.GameSave.salt">
            <summary>
            Get or set the salt value for all encryption
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.GameSave.ILLEGAL_FILE_HANDLING_CHARACTERS">
            <summary>
            Get a string array of illegal file handling characters
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.GameSave.DefaultDirectory">
            <summary>
            Get or set the file for all GameSave's to reside in
            </summary>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.SaveGameAsXML(System.String,AdventureFramework.Structure.Game,System.String@,System.Boolean)">
            <summary>
            Save the progress of the current game
            </summary>
            <param name="fullPath">The path to save the file to</param>
            <param name="game">The game to save</param>
            <param name="message">A message detailing the save</param>
            <param name="useEncryption">Specify if encryption is used</param>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.LoadGameAsXML(System.String,AdventureFramework.Structure.Game,System.String@,System.Boolean)">
            <summary>
            Load a game
            </summary>
            <param name="fullPath">The path of the game to load</param>
            <param name="game">The loaded game</param>
            <param name="message">A message detailing the load</param>
            <param name="useDecryption">Specify if decryption should be used</param>
            <returns>If the load was sucsessfil</returns>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.EncryptStringAES(System.String,System.String)">
            <summary>
            Encrypt the a string using AES
            </summary>
            <param name="plainText">The text to encrypt</param>
            <param name="password">A password used to generate a key for encryption</param>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.DecryptStringAES(System.String,System.String)">
            <summary>
            Decrypt a string that has been encrypted with the GameSave.EncryptStringAES() method
            </summary>
            <param name="cipherText">The text to decrypt</param>
            <param name="password">A password used to generate a key for decryption. This must be the same as the password used when encrypting</param>
        </member>
        <member name="E:AdventureFramework.IO.GameSave.GameLoaded">
            <summary>
            Occurs when a Game is sucsessfuly loaded
            </summary>
        </member>
        <member name="E:AdventureFramework.IO.GameSave.GameSaved">
            <summary>
            Occurs when a Game is sucsessfuly saved
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.InGameGraphics">
            <summary>
            Represents a store for ingame graphics
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.InGameGraphics.userDefinedGraphics">
            <summary>
            Get or set the user defined graphics
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.InGameGraphics.BufferGraphics">
            <summary>
            Buffer all graphics from the default folder into system memory
            </summary>
            <returns>True is the buffer was sucsessful</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.InGameGraphics.UserDefinedGraphics">
            <summary>
            Get the user defined graphics
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.FileIOFrame">
            <summary>
            Represents a Frame for File IO
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.FileIOFrame.defaultDirectory">
            <summary>
            Get or set default directroy
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.FileIOFrame.extension">
            <summary>
            Get or set the file extension to use
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.FileIOFrame.determinedFiles">
            <summary>
            Get or set the determined files from file generation
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.FileIOFrame.indexOfFirstDisplayedFile">
            <summary>
            Get or set the index if the first displayed file
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.FileIOFrame.indexOfLastDisplayedFile">
            <summary>
            Get or set the index if the last displayed file
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.FileIOFrame.#ctor">
            <summary>
            Initializes a new instance of the FileIOFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.FileIOFrame.TryDetermineValidFileName(System.Int32,System.String@)">
            <summary>
            Try and determine a valid file name
            </summary>
            <param name="fileIndex">The index of the file</param>
            <param name="fileName">The constructed file name</param>
            <returns>True if a file name could be determined</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.FileIOFrame.TryDetermineValidFileName(System.String,System.String@)">
            <summary>
            Try and determine a valid file name
            </summary>
            <param name="newFileName">The new file name</param>
            <param name="fileName">The constructed file name</param>
            <returns>True if a file name could be determined</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.FileIOFrame.DefaultDirectory">
            <summary>
            Get or set default directroy
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.FileIOFrame.Extension">
            <summary>
            Get or set file extension to use
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.FileIOFrame.DeterminedFiles">
            <summary>
            Get or set the determined files from file generation
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.FileIOFrame.IndexOfFirstDisplayedFile">
            <summary>
            Get or set the index if the first displayed file
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.FileIOFrame.IndexOfLastDisplayedFile">
            <summary>
            Get or set the index if the last displayed file
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.Chain">
            <summary>
            Represents a chain made out of a collection of Beeps
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Chain.beeps">
            <summary>
            Get the Beep's that make up this chain
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.#ctor">
            <summary>
            Initializes a new instance of the Chain class
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.#ctor(AdventureFramework.Sound.IBeep[])">
            <summary>
            Initializes a new instance of the Chain class
            </summary>
            <param name="beeps">The beeps that make up this chain</param>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.AddBeep(AdventureFramework.Sound.IBeep)">
            <summary>
            Add a new beep to the end of the chain
            </summary>
            <param name="beep">The beep to add</param>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.AddRange(AdventureFramework.Sound.IBeep[])">
            <summary>
            Add multiple new beeps to the end of the chain
            </summary>
            <param name="beeps">The beeps to add</param>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.RemoveLast">
            <summary>
            Remove the last beep in this chain
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of beeps from this chain
            </summary>
            <param name="index">The index of the first beep to remove</param>
            <param name="count">The amount of beeps to remove from the index</param>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.Clear">
            <summary>
            Clear all beeps from this song
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.SerializeToFile(System.String)">
            <summary>
            Serialize this Chain to a file
            </summary>
            <param name="fullPath">The full path of the file to serialize to</param>
            <returns>True is the file is seralized correctly</returns>
        </member>
        <member name="P:AdventureFramework.Sound.Chain.Beeps">
            <summary>
            Get the Beep's that make up this chain
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.Chain.Duration">
            <summary>
            Get the total duration of this Chain
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.RegionMapFrame">
            <summary>
            Represents a frame for displaying a Region map
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.RegionMapFrame.region">
            <summary>
            Get or set the Region
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.RegionMapFrame.mapDrawer">
            <summary>
            Get or set the drawer used for constructing room maps
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.RegionMapFrame.#ctor">
            <summary>
            Initializes a new instance of the RegionMapFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.RegionMapFrame.#ctor(AdventureFramework.Locations.Region,AdventureFramework.Rendering.MapDrawer)">
            <summary>
            Initializes a new instance of the RegionMapFrame class
            </summary>
            <param name="region">Specify the Region</param>
            <param name="mapDrawer">Sepcify a drawer for constructing room maps</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.RegionMapFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this RegionMapFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.RegionMapFrame.Region">
            <summary>
            Get or set the Region
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.RegionMapFrame.MapDrawer">
            <summary>
            Get or set the drawer used for constructing room maps
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ConditionalDescription">
            <summary>
            Represents a conditional description of an object
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Description">
            <summary>
            Represents a description of an object
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Description.trueDescription">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Description.#ctor">
            <summary>
            Initializes a new instance of the Description class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Description.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Description class
            </summary>
            <param name="description">The description</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Description.GetDescription">
            <summary>
            Get the descrpition
            </summary>
            <returns>The description as a string</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Description.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Description
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Description.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Description
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="F:AdventureFramework.Interaction.ConditionalDescription.falseDescription">
            <summary>
            Get or set the description for when this condition is false
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ConditionalDescription.condition">
            <summary>
            Get or set the condition
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.#ctor">
            <summary>
            Initializes anew instance of the ConditionalDescription class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.#ctor(System.String,System.String,AdventureFramework.Interaction.Condition)">
            <summary>
            Initializes anew instance of the ConditionalDescription class
            </summary>
            <param name="trueDescription">The true description</param>
            <param name="falseDescription">The false description</param>
            <param name="condition">The condition</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.GetDescription">
            <summary>
            Get the description
            </summary>
            <returns>The description as a string</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.OnGenerateTransferalID">
            <summary>
            Handle generation of a transferable ID for this ConditionalDescription
            </summary>
            <returns>The ID of this object as a string</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.OnTransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Handle transferal of delegation to this ConditionalDescription from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this ConditionalDescription that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ConditionalDescription</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this ConditionalDescription
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this ConditionalDescription
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this ConditionalDescription
            </summary>
            <returns>The ID as a string</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.TransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this ConditionalDescription from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.RegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this ConditionalDescription that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ConditionalDescription</param>
        </member>
        <member name="P:AdventureFramework.Interaction.ConditionalDescription.Condition">
            <summary>
            Get or set the condition
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Condition">
            <summary>
            Represents a callback for conditions
            </summary>
            <returns>The result of the condition</returns>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame">
            <summary>
            Represents a Frame used for ASCII animation
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.frames">
            <summary>
            Get or set the frames that make up this animation
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.interval">
            <summary>
            Get or set the interval between frames in ms
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.repeats">
            <summary>
            Get or set the amount of times this animation should be looped. For infinate use System.Threading.Timeout.Infinate
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.autoReverse">
            <summary>
            Get or set if the animation should be automatically reversed
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.isRunning">
            <summary>
            Get or set if animation this is running
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.animationClock">
            <summary>
            Get or set the timer used for the animation timeline
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.currentFrameIndex">
            <summary>
            Get or set the current frame index
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.currentLoopIndex">
            <summary>
            Get or set the current loop index
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.isHandlingFrameUpdate">
            <summary>
            Get or set if this is currently handling a frame update
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.isInReverse">
            <summary>
            Get or set if this is currently in reverse
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.#ctor">
            <summary>
            Initializes a new instance of the ASCIIAnimationFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.#ctor(AdventureFramework.Rendering.Frames.ASCIIImageFrame[])">
            <summary>
            Initializes a new instance of the ASCIIAnimationFrame class
            </summary>
            <param name="frames">Specify the frames of the animation</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.#ctor(System.Int32,AdventureFramework.Rendering.Frames.ASCIIImageFrame[])">
            <summary>
            Initializes a new instance of the ASCIIAnimationFrame class
            </summary>
            <param name="loops">Specify the amount of times this animation should be looped. For infinate use System.Threading.Timeout.Infinate</param>
            <param name="frames">Specify the frames of the animation</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.#ctor(System.Int32,System.Int32,System.Boolean,AdventureFramework.Rendering.Frames.ASCIIImageFrame[])">
            <summary>
            Initializes a new instance of the ASCIIAnimationFrame class
            </summary>
            <param name="loops">Specify the amount of times this animation should be looped. For infinate use System.Threading.Timeout.Infinate</param>
            <param name="interval">Specify the interval to be used between frames in ms</param>
            <param name="autoReverse">Specify if the animation should be automatically reversed</param>
            <param name="frames">Specify the frames of the animation</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this ASCIIAnimationFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Stop">
            <summary>
            Stop any running animation
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Start">
            <summary>
            Start the animation
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Reset">
            <summary>
            Reset the animation
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.OnDisposed">
            <summary>
            Handle disposal of this ASCIIAnimationFrame
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Frames">
            <summary>
            Get or set the frames that make up this animation
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Interval">
            <summary>
            Get or set the interval between frames in ms
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Loops">
            <summary>
            Get or set the amount of times this animation should be looped. For infinate use System.Threading.Timeout.Infinate
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.AutoReverse">
            <summary>
            Get or set if the animation should be automatically reversed
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.IsRunning">
            <summary>
            Get if this animation is running
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ReasonEventArgs">
            <summary>
            Event arguments for reason events
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ReasonEventArgs.reason">
            <summary>
            Get or set the reason
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ReasonEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ReasonEventArgs class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ReasonEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ReasonEventArgs class
            </summary>
            <param name="reason">The reason for the death</param>
        </member>
        <member name="P:AdventureFramework.Interaction.ReasonEventArgs.Reason">
            <summary>
            Get the reason
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ReasonEventHandler">
            <summary>
            Event handler for reason events
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AdventureFramework.Interaction.ITalkative">
            <summary>
            Represents an object that can talk
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ITalkative.Talk">
            <summary>
            Talk to this object
            </summary>
            <returns>A string representing the conversation</returns>
        </member>
        <member name="T:AdventureFramework.Interaction.ConversationElement">
            <summary>
            Represents an element of a Conversation
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ConversationElement.line">
            <summary>
            Get or set the line
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ConversationElement.action">
            <summary>
            Get or set any action to carry out on this line
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ConversationElement.#ctor">
            <summary>
            Initializes a new instance of the ConversationElement class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ConversationElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConversationElement class
            </summary>
            <param name="line">Specify the line in this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ConversationElement.#ctor(System.String,System.Action)">
            <summary>
            Initializes a new instance of the ConversationElement class
            </summary>
            <param name="line">Specify the line in this conversation</param>
            <param name="action">Specify any action to be carried out with this line</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ConversationElement.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this ConversationElement
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ConversationElement.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Conversationelement
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Interaction.ConversationElement.Line">
            <summary>
            Get or set the line
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ConversationElement.Action">
            <summary>
            Get or set any action to carry out on this line
            </summary>
        </member>
        <member name="T:AdventureFramework.Structure.GameCreationHelper">
            <summary>
            Represents a class that helps to build games
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameCreationHelper.creator">
            <summary>
            Get or set the game creator 
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.#ctor">
            <summary>
            Initializes a new instance of the GameCreationHelper class
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,AdventureFramework.Structure.OverworldGeneration,AdventureFramework.Structure.PlayerGeneration,AdventureFramework.Structure.CompletionCheck)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">The callback for generating the Overworld</param>
            <param name="playerGenerator">The callback for generating the Player</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,AdventureFramework.Structure.OverworldGeneration,AdventureFramework.Structure.PlayerGeneration,AdventureFramework.Structure.CompletionCheck,AdventureFramework.Rendering.Frames.TitleFrame)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">The callback for generating the Overworld</param>
            <param name="playerGenerator">The callback for generating the Player</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <param name="titleFrame">The title Frame</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,AdventureFramework.Structure.OverworldGeneration,AdventureFramework.Structure.PlayerGeneration,AdventureFramework.Structure.CompletionCheck,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.TitleFrame)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <param name="titleFrame">The title Frame</param>
            <param name="completionFrame">The completion Frame</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,AdventureFramework.Structure.OverworldGeneration,AdventureFramework.Structure.PlayerGeneration,AdventureFramework.Structure.CompletionCheck,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.HelpFrame)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <param name="titleFrame">The title Frame</param>
            <param name="completionFrame">The completion Frame</param>
            <param name="help">The games help screen</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,AdventureFramework.Structure.OverworldGeneration,AdventureFramework.Structure.PlayerGeneration,AdventureFramework.Structure.CompletionCheck,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.HelpFrame,AdventureFramework.IO.TextParser)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <param name="titleFrame">The title Frame</param>
            <param name="completionFrame">The completion Frame</param>
            <param name="help">The help Frame</param>
            <param name="parser">The parser for all input parsing</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,System.Func{AdventureFramework.Locations.Overworld},System.Func{AdventureFramework.Interaction.PlayableCharacter},AdventureFramework.Structure.CompletionCheck)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,System.Func{AdventureFramework.Locations.Overworld},System.Func{AdventureFramework.Interaction.PlayableCharacter},AdventureFramework.Structure.CompletionCheck,AdventureFramework.Rendering.Frames.TitleFrame)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <param name="titleFrame">The title Frame</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,System.Func{AdventureFramework.Locations.Overworld},System.Func{AdventureFramework.Interaction.PlayableCharacter},AdventureFramework.Structure.CompletionCheck,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.TitleFrame)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <param name="titleFrame">The title Frame</param>
            <param name="completionFrame">The completion Frame</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,System.Func{AdventureFramework.Locations.Overworld},System.Func{AdventureFramework.Interaction.PlayableCharacter},AdventureFramework.Structure.CompletionCheck,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.HelpFrame)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <param name="titleFrame">The title Frame</param>
            <param name="help">The help Frame</param>
            <param name="completionFrame">The completion Frame</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameCreationHelper.Create(System.String,System.String,System.Func{AdventureFramework.Locations.Overworld},System.Func{AdventureFramework.Interaction.PlayableCharacter},AdventureFramework.Structure.CompletionCheck,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.TitleFrame,AdventureFramework.Rendering.Frames.HelpFrame,AdventureFramework.IO.TextParser)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The callback used to to check game completion</param>
            <param name="titleFrame">The title Frame</param>
            <param name="completionFrame">The completion Frame</param>
            <param name="help">The help Frame</param>
            <param name="parser">The parser for all input parsing</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="P:AdventureFramework.Structure.GameCreationHelper.Creator">
            <summary>
            Get the game creator 
            </summary>
        </member>
        <member name="T:AdventureFramework.Structure.OverworldGeneration">
            <summary>
            Represents a callback for Overworld generation
            </summary>
            <returns>A generated Overworld</returns>
        </member>
        <member name="T:AdventureFramework.Structure.PlayerGeneration">
            <summary>
            Represents a callback for Player generation
            </summary>
            <returns>A generated Player</returns>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.FrameEventArgs">
            <summary>
            Event arguments for Frame events
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.FrameEventArgs.frame">
            <summary>
            Get or set the frame
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.FrameEventArgs.#ctor">
            <summary>
            Initializes a new instance of the FrameEventArgs class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.FrameEventArgs.#ctor(AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Initializes a new instance of the FrameEventArgs class
            </summary>
            <param name="frame">The Frame to specify for these arguments</param>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.FrameEventArgs.Frame">
            <summary>
            Get the frame
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.FrameEventHandler">
            <summary>
            Event handler for Frame events
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.ASCIIImageFrame">
            <summary>
            Represents a Frame for displaying ASCII images
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIImageFrame.grayscaleASCIIDictionary">
            <summary>
            Get or set the grayscale ASCII dictionary
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.ASCIIImageFrame.lines">
            <summary>
            Get or set the lines that make up this ASCII image
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.#ctor">
            <summary>
            Initializes a new instance of the ASCIIImageFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the ASCIIImageFrame class
            </summary>
            <param name="lines">Specify the lines of the ASCII image</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this ASCIIImageFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.ConvertToASCIIImageString(System.Int32,System.Int32,System.Drawing.Bitmap,System.Int16)">
            <summary>
            Convert a BitmapImage to an ASCII image string
            </summary>
            <param name="width">The width of the output ASCII image</param>
            <param name="height">The height of the output ASCII image</param>
            <param name="image">The source image</param>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast</param>
            <returns>A ASCII string representation of the source image</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.ConvertPixelToASCII(System.Drawing.Color,System.Int16)">
            <summary>
            Convert a pixel to an ASCII character
            </summary>
            <param name="pixel">The pixel to convert</param>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast</param>
            <returns>The ACSII representation of the pixel</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.ConvertPixelsToASCII(System.Int16,System.Drawing.Color[])">
            <summary>
            Convert some pixels to an ASCII character
            </summary>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast</param>
            <param name="pixels">The pixels to convert</param>
            <returns>The ACSII representation of the pixels</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.Create(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Create a new ASCIIImageFrame
            </summary>
            <param name="image">The image to use as the source</param>
            <param name="width">Specify the width of the ASCII image</param>
            <param name="height">Specify the height of the ASCII image</param>
            <returns>A new ASCIIImageFrame created from the parameters</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.Create(System.Drawing.Image,System.Int32,System.Int32,System.Int16)">
            <summary>
            Create a new ASCIIImageFrame
            </summary>
            <param name="image">The image to use as the source</param>
            <param name="width">Specify the width of the ASCII image</param>
            <param name="height">Specify the height of the ASCII image</param>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast</param>
            <returns>A new ASCIIImageFrame created from the parameters</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.Create(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Create a new ASCIIImageFrame
            </summary>
            <param name="image">The image to use as the source</param>
            <param name="width">Specify the width of the ASCII image</param>
            <param name="height">Specify the height of the ASCII image</param>
            <returns>A new ASCIIImageFrame created from the parameters</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.Create(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int16)">
            <summary>
            Create a new ASCIIImageFrame
            </summary>
            <param name="image">The image to use as the source</param>
            <param name="width">Specify the width of the ASCII image</param>
            <param name="height">Specify the height of the ASCII image</param>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast</param>
            <returns>A new ASCIIImageFrame created from the parameters</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.ASCIIImageFrame.CreateDefaultASCIIDictionary">
            <summary>
            Create a new default ASCII dictionary
            </summary>
            <returns>A standard ASCII dictionary</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.ASCIIImageFrame.GrayscaleASCIIDictionary">
            <summary>
            Get the grayscale ASCII dictionary
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.ASCIIImageFrame.Lines">
            <summary>
            Get or set the lines that make up this ASCII image
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.SaveFileFrame">
            <summary>
            Represents a frame for saving files
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.SaveFileFrame.#ctor">
            <summary>
            Initializes a new insatnce of the SaveFileFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.SaveFileFrame.#ctor(System.String,System.String)">
            <summary>
            Initializes a new insatnce of the SaveFileFrame class
            </summary>
            <param name="directory">Specify the default directory</param>
            <param name="extension">The file extension (excluding the '.')</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.SaveFileFrame.#ctor(System.IO.DirectoryInfo,System.String)">
            <summary>
            Initializes a new insatnce of the SaveFileFrame class
            </summary>
            <param name="directory">Specify the default directory</param>
            <param name="extension">The file extension (excluding the '.')</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.SaveFileFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this SaveFileFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.LoadFileFrame">
            <summary>
            Represents a frame for loading files
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.LoadFileFrame.#ctor">
            <summary>
            Initializes a new insatnce of the LoadFileFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.LoadFileFrame.#ctor(System.String,System.String)">
            <summary>
            Initializes a new insatnce of the LoadFileFrame class
            </summary>
            <param name="directory">Specify the default directory</param>
            <param name="extension">The file extension (excluding the '.')</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.LoadFileFrame.#ctor(System.IO.DirectoryInfo,System.String)">
            <summary>
            Initializes a new insatnce of the LoadFileFrame class
            </summary>
            <param name="directory">Specify the default directory</param>
            <param name="extension">The file extension (excluding the '.')</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.LoadFileFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this LoadFileFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="T:AdventureFramework.Sound.Players.BeepPlayer">
            <summary>
            A class that allows advanced control of the System.Console.Beep() method
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.BeepPlayer.hasBeenCancelled">
            <summary>
            Get or set if playing has been cancelled
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayBeeps(AdventureFramework.Sound.IBeep[],System.Int32)">
            <summary>
            Play many Beeps
            </summary>
            <param name="beeps">The beeps to play</param>
            <param name="cycles">The amount of times the beeps should be repeated. Use -1 for inifinity</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayChain(AdventureFramework.Sound.Chain)">
            <summary>
            Play a Chain
            </summary>
            <param name="chain">The chain to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayChain(AdventureFramework.Sound.Chain,System.Int32,AdventureFramework.Sound.Players.ESyncModes)">
            <summary>
            Play a Chain
            </summary>
            <param name="chain">The song to play</param>
            <param name="cycles">The amount of times the chain should be repeated. Use -1 for inifinity</param>
            <param name="mode">The sync mode to use</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayNote(AdventureFramework.Sound.EConsoleNote)">
            <summary>
            Play a note for a set duration of one whole beat
            </summary>
            <param name="note">The note to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayNote(AdventureFramework.Sound.EConsoleNote,AdventureFramework.Sound.ENoteDuration)">
            <summary>
            Play a note for a specified duration
            </summary>
            <param name="note">The note to play</param>
            <param name="duration">The duration of the note to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayNote(AdventureFramework.Sound.Note)">
            <summary>
            Play a note for a specified duration
            </summary>
            <param name="note">The note to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayNotes(AdventureFramework.Sound.Note[],System.Int32)">
            <summary>
            Play many Notes
            </summary>
            <param name="notes">The notes to play</param>
            <param name="cycles">The amount of times the notes should be repeated. Use -1 for inifinity</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayBeep(System.Int32)">
            <summary>
            Play a beep for a set duration of 250ms
            </summary>
            <param name="frequency">The frequency of the beep to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayBeep(AdventureFramework.Sound.IBeep)">
            <summary>
            Play a beep for a specified duration
            </summary>
            <param name="beep">The beep to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayBeep(System.Int32,System.Int32)">
            <summary>
            Play a beep for a specified duration
            </summary>
            <param name="frequency">The frequency of the beep to play</param>
            <param name="duration">The duration of the beep to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.Cancel">
            <summary>
            Cancel any playing beep
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.Note">
            <summary>
            Represents a musical note
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Note.noteDuration">
            <summary>
            Get or set the duration of this Note
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Note.musicalNote">
            <summary>
            Get or set the note that will be played
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Note.#ctor(AdventureFramework.Sound.EConsoleNote)">
            <summary>
            Initializes a new instance of the Note struct with a standard duration of a whole note
            </summary>
            <param name="note">Specify the note of this Note</param>
        </member>
        <member name="M:AdventureFramework.Sound.Note.#ctor(AdventureFramework.Sound.EConsoleNote,AdventureFramework.Sound.ENoteDuration)">
            <summary>
            Initializes a new instance of the Note struct
            </summary>
            <param name="note">Specify the frequency of the note of this Note</param>
            <param name="duration">Specify the duration of this Note</param>
        </member>
        <member name="M:AdventureFramework.Sound.Note.ToString">
            <summary>
            Get this Note as a string
            </summary>
            <returns>This Note as a string</returns>
        </member>
        <member name="P:AdventureFramework.Sound.Note.NoteDuration">
            <summary>
            Get or set the duration of this Note
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.Note.MusicalNote">
            <summary>
            Get or set the note that will be played
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.Note.Duration">
            <summary>
            Get or set the duration in ms
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.Note.Frequency">
            <summary>
            Get or set the frequency in htZ
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.EConsoleNote">
            <summary>
            Enumeration of console notes in the second ocatve 
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.Rest">
            <summary>
            A musical rest
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.C2">
            <summary>
            Note C in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.Cs2">
            <summary>
            Note C# in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.D2">
            <summary>
            Note D in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.Ds2">
            <summary>
            Note D# in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.E2">
            <summary>
            Note E in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.F2">
            <summary>
            Note F in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.Fs2">
            <summary>
            Note F# in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.G">
            <summary>
            Note G in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.Gs2">
            <summary>
            Note G# in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.A">
            <summary>
            Note A in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.As2">
            <summary>
            Note A# in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.B">
            <summary>
            Note B in the 2nd octave
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.EConsoleNote.C3">
            <summary>
            Note C in the 3rd octave
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.ENoteDuration">
            <summary>
            Enueration of not durations, based on 120 bpm
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.ENoteDuration.Whole">
            <summary>
            A whole note
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.ENoteDuration.Half">
            <summary>
            A half note
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.ENoteDuration.Quater">
            <summary>
            A quater note
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.ENoteDuration.Eighth">
            <summary>
            An eigth note
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.ENoteDuration.Sixteenth">
            <summary>
            A sixteenth note
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.ENoteDuration.EighthDot">
            <summary>
            A eighth . note
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.ENoteDuration.QuaterDot">
            <summary>
            A quater . note
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.ENoteDuration.SixteenthDot">
            <summary>
            A sixteenth . note
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.NonPlayableCharacter">
            <summary>
            Represents a non-playable character
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Character">
            <summary>
            Represents a generic in game character
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Character.isAlive">
            <summary>
            Get or set if this character is alive
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Character.interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Character.additionalCommands">
            <summary>
            Get or set the additional actionable commands
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.#ctor">
            <summary>
            Initializes a new instance of the Character class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.InteractWithItem(AdventureFramework.Interaction.Item)">
            <summary>
            Interact with a specified item
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.Kill">
            <summary>
            Kill this character
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.Kill(System.String)">
            <summary>
            Kill the character
            </summary>
            <param name="reason">A reason for the death</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.OnReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            Handle reactions to ActionableCommands
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the command</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.OnTransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Handle transferal of delegation to this Character from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this Character that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Character</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Character
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Character
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.Interact(AdventureFramework.Interaction.Item)">
            <summary>
            Interact with an item
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.ReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            React to an ActionableCommand
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Character.FindCommand(System.String)">
            <summary>
            Find a command by it's name
            </summary>
            <param name="command">The name of the command to find</param>
            <returns>The ActionableCommand (if it is found)</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.Character.IsAlive">
            <summary>
            Get if this character is alive
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Character.Interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Character.AdditionalCommands">
            <summary>
            Get or set the ActionableCommands this object can interact with
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.NonPlayableCharacter.conversation">
            <summary>
            Get or set the conversation
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.#ctor">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.#ctor(System.String,System.String,AdventureFramework.Interaction.Conversation)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
            <param name="conversation">The conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.Conversation)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
            <param name="conversation">The conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.Conversation,System.Boolean,AdventureFramework.Interaction.InteractionCallback)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
            <param name="conversation">The conversation</param>
            <param name="isAlive">Set if this NonPlayableCharacter is alive</param>
            <param name="interaction">Set this NonPlayableCharacter's interaction</param>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.Conversation,System.Boolean,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Interaction.ExaminationCallback)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
            <param name="conversation">The conversation</param>
            <param name="isAlive">Set if this NonPlayableCharacter is alive</param>
            <param name="interaction">Set this NonPlayableCharacter's interaction</param>
            <param name="examination">Set this NonPlayableCharacter's examination</param>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.OnTalk">
            <summary>
            Handle talking
            </summary>
            <returns>A string representing the dialogue</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this NonPlayableCharacter
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this NonPLayableCharacter
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.NonPlayableCharacter.Talk">
            <summary>
            Talk to this object
            </summary>
            <returns>A string representing the conversation</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.NonPlayableCharacter.Conversation">
            <summary>
            Get or set the conversation
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ActionableCommand">
            <summary>
            Represents an actionable command
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ActionableCommand.command">
            <summary>
            Get or set the custom command
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ActionableCommand.description">
            <summary>
            Get or set the description of the command
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ActionableCommand.action">
            <summary>
            Get or set the action of the command
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ActionableCommand.isPlayerVisible">
            <summary>
            Get or set if this is visible to the player
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.#ctor">
            <summary>
            Initializes a new instance of the ActionableCommand class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ActionableCommand class
            </summary>
            <param name="command">The command</param>
            <param name="description">A description of the command</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionableCommand class
            </summary>
            <param name="command">The command</param>
            <param name="description">A description of the command</param>
            <param name="isPlayerVisible">Specify it this command is visible to the player</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.#ctor(System.String,System.String,System.Boolean,AdventureFramework.Interaction.ActionCallback)">
            <summary>
            Initializes a new instance of the ActionableCommand class
            </summary>
            <param name="command">The command</param>
            <param name="description">A description of the command</param>
            <param name="isPlayerVisible">Specify it this command is visible to the player</param>
            <param name="action">The action callback to the command</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.OnGenerateTransferalID">
            <summary>
            Handle generation of a transferable ID for this ActionableCommand
            </summary>
            <returns>The ID of this object as a string</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.OnTransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Handle transferal of delegation to this ActionableCommand from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this ActionableCommand that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ActionableCommand</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this ActionableCommand
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this ActionableCommand
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this ActionableCommand
            </summary>
            <returns>The ID of this object as a string</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.TransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this ActionableCommand from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.RegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this ActionableCommand that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ActionableComand</param>
        </member>
        <member name="P:AdventureFramework.Interaction.ActionableCommand.Command">
            <summary>
            Get or set the command
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ActionableCommand.Description">
            <summary>
            Get or set the description of the command
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ActionableCommand.Action">
            <summary>
            Get or set the action of the command
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ActionableCommand.IsPlayerVisible">
            <summary>
            Get or set if this is visible to the player
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ActionCallback">
            <summary>
            Represents the callback for a action
            </summary>
            <returns>The result of the interaction</returns>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.SceneFrame">
            <summary>
            Represents a frame that describes a scene
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.SceneFrame.room">
            <summary>
            Get or set the Room
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.SceneFrame.player">
            <summary>
            Get or set the player
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.SceneFrame.message">
            <summary>
            Get or set the message
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.SceneFrame.mapDrawer">
            <summary>
            Get or set the drawer used for constructing room maps
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.SceneFrame.#ctor(AdventureFramework.Locations.Room,AdventureFramework.Interaction.PlayableCharacter,System.String)">
            <summary>
            Initializes a new instance of the SceneFrame class
            </summary>
            <param name="room">Specify the Room</param>
            <param name="player">Specify the player</param>
            <param name="message">Any additional message</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.SceneFrame.#ctor(AdventureFramework.Locations.Room,AdventureFramework.Interaction.PlayableCharacter,System.String,AdventureFramework.Rendering.MapDrawer)">
            <summary>
            Initializes a new instance of the SceneFrame class
            </summary>
            <param name="room">Specify the Room</param>
            <param name="player">Specify the player</param>
            <param name="message">Any additional message</param>
            <param name="mapDrawer">Sepcify a drawer for constructing room maps</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.SceneFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this SceneFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.SceneFrame.Room">
            <summary>
            Get or set the Room
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.SceneFrame.Player">
            <summary>
            Get or set the player
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.SceneFrame.Message">
            <summary>
            Get or set the message
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.SceneFrame.MapDrawer">
            <summary>
            Get or set the drawer used for constructing room maps
            </summary>
        </member>
        <member name="T:AdventureFramework.Structure.GameFlow">
            <summary>
            Represents a class for controling the flow of a Game
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.defaultFileName">
            <summary>
            Get or set the default file name
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.game">
            <summary>
            Get or set the game
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.creator">
            <summary>
            Get or set the game creator 
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.errorPrefix">
            <summary>
            Get or set the error prefix
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.frameDrawer">
            <summary>
            Get or set the drawer for drawing all frames
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.mapDrawer">
            <summary>
            Get or set the drawer used for constructing room maps
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.ioWorker">
            <summary>
            Get or set the worker used for all IO operations
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.isProcessingAsyncFileIOOperation">
            <summary>
            Get or set if this is processing an asyncronous file IO operation
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.encryptFiles">
            <summary>
            Get if this should encrypt all files
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.output">
            <summary>
            Get or set the output stream
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.input">
            <summary>
            Get or set input stream
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.error">
            <summary>
            Get or set the error stream
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.displaySize">
            <summary>
            Get or set the standard size of the display area
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.waitForKeyPressCallback">
            <summary>
            Get or set the callback to invoke when waiting for key presses
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.lastFrame">
            <summary>
            Get or set the last frame
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameFlow.sourceLoadedDelegation">
            <summary>
            Get or set the source delegation from the last loaded game
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.#ctor">
            <summary>
            Initializes a new instance of the GameFlow class
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.#ctor(AdventureFramework.Structure.GameCreator)">
            <summary>
            Initializes a new instance of the GameFlow class
            </summary>
            <param name="gameCreator">A game creator to create the GameFlow.Game property from</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.#ctor(AdventureFramework.Structure.GameCreationHelper)">
            <summary>
            Initializes a new instance of the GameFlow class
            </summary>
            <param name="helper">A game helper to create the GameFlow.Creator property from</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.Begin">
            <summary>
            Begin the game
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.DisplayLoadScreen">
            <summary>
            Display the load file screen
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.DisplaySaveScreen">
            <summary>
            Display the save file screen
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.TryHandleInputAtFlowLevel(System.String)">
            <summary>
            Try to handle the input at a flow level, i.e higher operations on a Game such as saving, loading and creating new games
            </summary>
            <param name="input">The input to handle</param>
            <returns>The decision based on the input</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.EnterGameLoop">
            <summary>
            Enter the game loop
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.UpdateScreenWithCurrentFrame(System.String)">
            <summary>
            Update the screen with the current Frame, provided by the GameFlow.Game property
            </summary>
            <param name="message">An additional message to display to the user</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.DrawFrame(AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Draw a Frame onto the ouput stream
            </summary>
            <param name="frame">The frame to draw</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.OnFrameUpdated(AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Handle GameFlow.Frame property updating
            </summary>
            <param name="frame">The new frame</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.OnGameEnded(AdventureFramework.Structure.EExitMode)">
            <summary>
            Handle the GameFlow.Game.Ended event
            </summary>
            <param name="exitMode">The exit mode from the game</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.OnGameCompleted">
            <summary>
            Handle the GameFlow.Game.Completed event
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.OnDisposed">
            <summary>
            Handle disposal of this GameFlow
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.StartAsyncIOOperation(AdventureFramework.Structure.IOOperationCallback,AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Start an async IO operations
            </summary>
            <param name="operation">The operation to carry out</param>
            <param name="frameToDisplayWhileInOperation">The frame to display while in operation</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.StartAsyncIOOperation(AdventureFramework.Structure.IOSprecifiedFileOperationCallback,System.String,AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Start an async IO operations
            </summary>
            <param name="operation">The operation to carry out</param>
            <param name="fileName">The full file name of the file to perform all IO operation on</param>
            <param name="frameToDisplayWhileInOperation">The frame to display while in operation</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.SaveGameAsXML">
            <summary>
            Save the game as xml
            </summary>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.SaveGameAsXML(System.String@)">
            <summary>
            Save the game as xml
            </summary>
            <param name="message">Any message regarding the save</param>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.SaveGameAsXML(System.String@,System.String)">
            <summary>
            Save the game as xml
            </summary>
            <param name="message">Any message regarding the save</param>
            <param name="fileName">The full file name to save the file as</param>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.SaveGameAsEncyptedXML">
            <summary>
            Save the game as encrypted xml
            </summary>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.SaveGameAsEncyptedXML(System.String@)">
            <summary>
            Save the game as encrypted xml
            </summary>
            <param name="message">Any message regarding the save</param>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.SaveGameAsEncyptedXML(System.String@,System.String)">
            <summary>
            Save the game as encrypted xml
            </summary>
            <param name="message">Any message regarding the save</param>
            <param name="fileName">The full file name to save the file as</param>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.BeginAsyncSave(System.String,System.Boolean)">
            <summary>
            Begin an encrypted asyncronous save operation
            </summary>
            <param name="fileName">The file name to save the file as</param>
            <param name="isEncrypted">Specify if the file is encrypted</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.LoadGameAsXML">
            <summary>
            Load a game from an xml file
            </summary>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.LoadGameAsXML(System.String@)">
            <summary>
            Load a game from an xml file
            </summary>
            <param name="message">Any message regarding the load</param>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.LoadGameAsXML(System.String@,System.String)">
            <summary>
            Load a game from an xml file
            </summary>
            <param name="message">Any message regarding the load</param>
            <param name="fileName">The full file name of the file to load</param>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.LoadGameAsEncryptedXML">
            <summary>
            Load a game from an encrypted xml file
            </summary>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.LoadGameAsEncryptedXML(System.String@)">
            <summary>
            Load a game from an encrypted xml file
            </summary>
            <param name="message">Any message regarding the load</param>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.LoadGameAsEncryptedXML(System.String@,System.String)">
            <summary>
            Load a game from an encrypted xml file
            </summary>
            <param name="message">Any message regarding the load</param>
            <param name="fileName">The full file name of the file to load</param>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.BeginAsyncLoad(System.String,System.Boolean)">
            <summary>
            Begin an encrypted asyncronous load operation
            </summary>
            <param name="fileName">The full file name of the file to load</param>
            <param name="isEncrypted">Specify if the file is encrypted</param>
        </member>
        <member name="M:AdventureFramework.Structure.GameFlow.Dispose">
            <summary>
            Dispose this GameFlow
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.Game">
            <summary>
            Get the Game
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.Creator">
            <summary>
            Get or set the game creator 
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.ErrorPrefix">
            <summary>
            Get or set the error prefix
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.FrameDrawer">
            <summary>
            Get or set the drawer for drawing all frames
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.MapDrawer">
            <summary>
            Get or set the drawer used for constructing room maps
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.IsProcessingAsyncFileIOOperation">
            <summary>
            Get if this is processing an asyncronous file IO operation
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.EncryptFiles">
            <summary>
            Get if this should encrypt all files
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.Output">
            <summary>
            Get or set the output stream
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.Input">
            <summary>
            Get or set input stream
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.Error">
            <summary>
            Get or set the error stream
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.DisplaySize">
            <summary>
            Get or set the standard size of the display area
            </summary>
        </member>
        <member name="P:AdventureFramework.Structure.GameFlow.WaitForKeyPressCallback">
            <summary>
            Get or set the callback to invoke when waiting for key presses
            </summary>
        </member>
        <member name="E:AdventureFramework.Structure.GameFlow.StartingFrameDraw">
            <summary>
            Occurs when the frame draw begins
            </summary>
        </member>
        <member name="E:AdventureFramework.Structure.GameFlow.FinishingFrameDraw">
            <summary>
            Occurs when the frame draw exits
            </summary>
        </member>
        <member name="E:AdventureFramework.Structure.GameFlow.DisplayInverted">
            <summary>
            Occurs when the display is inverted
            </summary>
        </member>
        <member name="T:AdventureFramework.Structure.WaitForKeyPressCallback">
            <summary>
            Callback that invokes a callback for waiting for a key press
            </summary>
            <param name="key">The ASCII code of the key to wait for</param>
            <returns>If the key pressed returned the same ASCII character as the key property</returns>
        </member>
        <member name="T:AdventureFramework.Rendering.Frames.HelpFrame">
            <summary>
            Represents a frame for displaying help
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.HelpFrame.commandsDictionary">
            <summary>
            Get or set the commands and descriptions to display to the user
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.HelpFrame.title">
            <summary>
            Get or set the title
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.Frames.HelpFrame.description">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.HelpFrame.#ctor">
            <summary>
            Initializes a new instance of the HelpFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.HelpFrame.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the HelpFrame class
            </summary>
            <param name="title">Specify the frames title</param>
            <param name="description">Specify the frames description</param>
            <param name="commands">Sepcify the commands and the descriptions to display</param>
        </member>
        <member name="M:AdventureFramework.Rendering.Frames.HelpFrame.BuildFrame(System.Int32,System.Int32,AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this HelpFrame into a text based display
            </summary>
            <param name="width">Specify the width of the Frame</param>
            <param name="height">Specify the height of the Frame</param>
            <param name="drawer">The FrameDrawer to draw the Frame with</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.HelpFrame.CommandsDictionary">
            <summary>
            Get or set the commands and descriptions to display to the user
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.HelpFrame.Title">
            <summary>
            Get the title
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.Frames.HelpFrame.Description">
            <summary>
            Get the description
            </summary>
        </member>
        <member name="T:AdventureFramework.IO.TextParser">
            <summary>
            An parser used for parsing text into in-game interactions
            </summary>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.#ctor">
            <summary>
            Initializes a new instance of the TextParser class
            </summary>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.TryParseToECardinalDirection(System.String,AdventureFramework.Locations.ECardinalDirection@)">
            <summary>
            Try and parse a string to an ECardinalDirection
            </summary>
            <param name="obj">The string to parse</param>
            <param name="direction">The direction</param>
            <returns>The result of the parse</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.IsTextCardinalDirection(System.String)">
            <summary>
            Get if text is a ECardinalDirection
            </summary>
            <param name="input">The input to check</param>
            <returns>True is the input is a cardinal direction</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.TryParseToECommand(System.String,AdventureFramework.Interaction.ECommand@)">
            <summary>
            Try and parse a string to a ECommand
            </summary>
            <param name="obj">The string to parse</param>
            <param name="command">The command</param>
            <returns>The result of the parse</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.IsCommand(System.String)">
            <summary>
            Get if text is a ECommand
            </summary>
            <param name="input">The input to check</param>
            <returns>True is the input is a comman</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.checkEnumerationForCaseInsensitiveMember(System.Type,System.String,System.Object@)">
            <summary>
            Check an enumeration for a case insensitive value
            </summary>
            <param name="typeOfEnum">The type of the enum to check</param>
            <param name="name">The name of the enumeration member</param>
            <param name="obj">The enumeration member, if found</param>
            <returns>The result of the check</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.TryParseToEGameCommand(System.String,AdventureFramework.Structure.EGameCommand@)">
            <summary>
            Try and parse a string to a EGameCommand
            </summary>
            <param name="obj">The string to parse</param>
            <param name="command">The command</param>
            <returns>The result of the parse</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.IsEGameCommand(System.String)">
            <summary>
            Get if text is a EGameCommand
            </summary>
            <param name="input">The input to check</param>
            <returns>True is the input is a comman</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.TryParseToEFrameDrawerOption(System.String,AdventureFramework.Rendering.EFrameDrawerOption@)">
            <summary>
            Try and parse a string to a EFrameDrawerOption
            </summary>
            <param name="obj">The string to parse</param>
            <param name="command">The command</param>
            <returns>The result of the parse</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.IsEFrameDrawerOption(System.String)">
            <summary>
            Get if text is a EFrameDrawerOption
            </summary>
            <param name="input">The input to check</param>
            <returns>True is the input is a comman</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.ReactToInput(System.String,AdventureFramework.Structure.Game,System.String@)">
            <summary>
            React to an input string. This will take all necessary action to the input on the Game parameter
            </summary>
            <param name="input">The input to action</param>
            <param name="game">The game to action the input on</param>
            <param name="result">Any result of the reaction</param>
            <returns>The reaction to the input</returns>
        </member>
        <member name="T:AdventureFramework.Structure.GameEndedEventArgs">
            <summary>
            Event arguments for end of game events
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.GameEndedEventArgs.exitMode">
            <summary>
            Get or set the exit mode
            </summary>
        </member>
        <member name="M:AdventureFramework.Structure.GameEndedEventArgs.#ctor(AdventureFramework.Structure.EExitMode)">
            <summary>
            Initializes a new instance of the GameEndedEventArgs class
            </summary>
            <param name="mode">The type of exit to use</param>
        </member>
        <member name="P:AdventureFramework.Structure.GameEndedEventArgs.ExitMode">
            <summary>
            Get the exit mode
            </summary>
        </member>
        <member name="T:AdventureFramework.Structure.GameEndedEventHandler">
            <summary>
            Event handler for game ended events
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AdventureFramework.Structure.EExitMode">
            <summary>
            Enumeration of exit modes
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EExitMode.ExitApplication">
            <summary>
            Exit the application
            </summary>
        </member>
        <member name="F:AdventureFramework.Structure.EExitMode.ReturnToTitleScreen">
            <summary>
            Return to the title screen
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Decision">
            <summary>
            Represents a boolean decision
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Decision.result">
            <summary>
            Get or set the result of the Decision
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Decision.reason">
            <summary>
            Get or set a reason for this Decision
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Decision.#ctor(AdventureFramework.Interaction.EReactionToInput)">
            <summary>
            Initializes a new instance of the Decision class
            </summary>
            <param name="result">The result of the decision</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Decision.#ctor(AdventureFramework.Interaction.EReactionToInput,System.String)">
            <summary>
            Initializes a new instance of the Decision class
            </summary>
            <param name="result">The result of the decision</param>
            <param name="reason">The reason for this decision</param>
        </member>
        <member name="P:AdventureFramework.Interaction.Decision.Result">
            <summary>
            Get the result of the Decision
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Decision.Reason">
            <summary>
            Get a reason for this Decision
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.EReactionToInput">
            <summary>
            Enuemration of reactions to input
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EReactionToInput.CouldReact">
            <summary>
            Could react to input
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EReactionToInput.CouldntReact">
            <summary>
            Couldn't react to input
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EReactionToInput.SelfContainedReaction">
            <summary>
            A self contained reaction to an input
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.Room">
            <summary>
            Represents a room
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.exits">
            <summary>
            Get o set the exits
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.characters">
            <summary>
            Get or set the characters of this Room
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.items">
            <summary>
            Get or set the items in this Room
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.additionalCommands">
            <summary>
            Get or set the additional actionable commands
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.enteredFrom">
            <summary>
            Get or set which direction this Room was entered from
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor">
            <summary>
            Initializes a new instance of the Room class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.Exit[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exits">The exits from this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exits">The exits from this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exit">The exit from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exit">The exit from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item[],AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exit">The exit from this room</param>
            <param name="items">The items in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item,AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exit">The exit from this room</param>
            <param name="item">The item in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Item[],AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item[],AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exit">The exit from this room</param>
            <param name="items">The items in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item,AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exit">The exit from this room</param>
            <param name="item">The item in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Item[],AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Locations.Exit[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exits">The exits from this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exits">The exits from this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exit">The exit from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exit">The exit from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item,AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exit">The exit from this room</param>
            <param name="item">The item in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item[],AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exit">The exit from this room</param>
            <param name="items">The items in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Item[],AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item[],AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exit">The exit from this room</param>
            <param name="items">The items in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit,AdventureFramework.Interaction.Item,AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exit">The exit from this room</param>
            <param name="item">The item in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,System.String,AdventureFramework.Interaction.InteractionCallback,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Item[],AdventureFramework.Interaction.NonPlayableCharacter[])">
            <summary>
            Initializes a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
            <param name="characters">The characters in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.AddCharacter(AdventureFramework.Interaction.NonPlayableCharacter)">
            <summary>
            Add a character to this room
            </summary>
            <param name="character">The character to add</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.AddItem(AdventureFramework.Interaction.Item)">
            <summary>
            Add an item to this room
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.AddExit(AdventureFramework.Locations.Exit)">
            <summary>
            Add an exit to this room
            </summary>
            <param name="exit">The exit to add</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveItemFromRoom(AdventureFramework.Interaction.Item)">
            <summary>
            Remove an item from the room
            </summary>
            <param name="item">The item to remove</param>
            <returns>The item removed from this room</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveItemFromRoom(System.String)">
            <summary>
            Remove an item from the room
            </summary>
            <param name="itemName">The name of the item to remove</param>
            <returns>If the item was removed correctly</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveItemFromRoom(System.String,AdventureFramework.Interaction.Item@)">
            <summary>
            Remove an item from the room
            </summary>
            <param name="itemName">The name of the item to remove</param>
            <param name="removedItem">The item removed from this room</param>
            <returns>If the item was removed correctly</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveCharacterFromRoom(AdventureFramework.Interaction.NonPlayableCharacter)">
            <summary>
            Remove an character from the room
            </summary>
            <param name="character">The character to remove</param>
            <returns>The character removed from this room</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveCharacterFromRoom(System.String)">
            <summary>
            Remove an character from the room
            </summary>
            <param name="characterName">The name of the character to remove</param>
            <returns>If the character was removed correctly</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveCharacterFromRoom(System.String,AdventureFramework.Interaction.NonPlayableCharacter@)">
            <summary>
            Remove an character from the room
            </summary>
            <param name="characterName">The name of the character to remove</param>
            <param name="removedCharacter">The character removed from this room</param>
            <returns>If the character was removed correctly</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveInteractionTargetFromRoom(AdventureFramework.Interaction.IInteractWithItem)">
            <summary>
            Remove an interaction target from the room
            </summary>
            <param name="target">The target to remove</param>
            <returns>The target removed from this room</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.CanMove(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Test if a move is possible
            </summary>
            <param name="direction">The direction to test</param>
            <returns>If a move in the specified direction is possible</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.InteractWithItem(AdventureFramework.Interaction.Item)">
            <summary>
            Interact with a specified item
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.OnExamined">
            <summary>
            Handle examination this Room
            </summary>
            <returns>The result of this examination</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.getPrexingGrammer(System.String)">
            <summary>
            Get prefixing grammer for a string
            </summary>
            <param name="word">The word to get grammer for</param>
            <returns>The grammer prefixing this word</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.isVowel(System.Char)">
            <summary>
            Get if a character is a vowel
            </summary>
            <param name="c">The character to check</param>
            <returns>True if the character is a vowel</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.isPlural(System.String)">
            <summary>
            Get if a word is plural
            </summary>
            <param name="word">The word to check</param>
            <returns>True if the word is plural</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.getItemsAndPuzzlesAsList">
            <summary>
            Get all Items and Puzzles as a list in a string
            </summary>
            <returns>A list of all</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.GetExaminableObjects">
            <summary>
            Get everything that can be examined within this room
            </summary>
            <returns>An array of everything that can be examined in this room</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.HasLockedExitInDirection(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get if this room has a visible locked exit in a specified direction. This will not include exits whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="direction">The directon to check</param>
            <returns>If there is a locked exit in the specified direction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.HasLockedExitInDirection(AdventureFramework.Locations.ECardinalDirection,System.Boolean)">
            <summary>
            Get if this room has a visible locked exit in a specified direction
            </summary>
            <param name="direction">The directon to check</param>
            <param name="includeInvisibleExits">Specifiy if invisible exits should be included</param>
            <returns>If there is a locked exit in the specified direction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.HasUnlockedExitInDirection(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get if this room has a visible unlocked exit in a specified direction. This will not include exits whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="direction">The directon to check</param>
            <returns>If there is a unlocked exit in the specified direction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.HasUnlockedExitInDirection(AdventureFramework.Locations.ECardinalDirection,System.Boolean)">
            <summary>
            Get if this room has a visible unlocked exit in a specified direction
            </summary>
            <param name="direction">The directon to check</param>
            <param name="includeInvisibleExits">Specify if invisible exits should be included</param>
            <returns>If there is a unlocked exit in the specified direction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsExit(AdventureFramework.Locations.Exit)">
            <summary>
            Get if this Room contains an exit. This will not include exits whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="exit">The exit to check for</param>
            <returns>True if the exit exists, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsExit(AdventureFramework.Locations.Exit,System.Boolean)">
            <summary>
            Get if this Room contains an exit
            </summary>
            <param name="exit">The exit to check for</param>
            <param name="includeInvisibleExits">Specify if invisible exits should be included</param>
            <returns>True if the exit exists, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsExit(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get if this Room contains an exit. This will not include exits whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="direction">The direction of the exit to check for</param>
            <returns>True if the exit exists, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsExit(AdventureFramework.Locations.ECardinalDirection,System.Boolean)">
            <summary>
            Get if this Room contains an exit
            </summary>
            <param name="direction">The direction of the exit to check for</param>
            <param name="includeInvisibleExits">Specify if invisible exits should be included</param>
            <returns>True if the exit exists, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindExit(AdventureFramework.Locations.ECardinalDirection,AdventureFramework.Locations.Exit@)">
            <summary>
            Find an exit. This will not include exits whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="direction">The exits direction</param>
            <param name="exit">The exit</param>
            <returns>True if the exit was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindExit(AdventureFramework.Locations.ECardinalDirection,AdventureFramework.Locations.Exit@,System.Boolean)">
            <summary>
            Find an exit
            </summary>
            <param name="direction">The exits direction</param>
            <param name="exit">The exit</param>
            <param name="includeInvisibleExits">Specify if invisible exists should be included</param>
            <returns>True if the exit was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsItem(AdventureFramework.Interaction.Item)">
            <summary>
            Get if this Room contains an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="item">The item to check for</param>
            <returns>True if the item is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsItem(AdventureFramework.Interaction.Item,System.Boolean)">
            <summary>
            Get if this Room contains an item
            </summary>
            <param name="item">The item to check for</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included</param>
            <returns>True if the item is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsItem(System.String)">
            <summary>
            Get if this Room contains an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="itemName">The item name to check for. This is case insensitive</param>
            <returns>True if the item is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsItem(System.String,System.Boolean)">
            <summary>
            Get if this Room contains an item
            </summary>
            <param name="itemName">The item name to check for. This is case insensitive</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included</param>
            <returns>True if the item is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsInteractionTarget(AdventureFramework.Interaction.IInteractWithItem)">
            <summary>
            Get if this Room contains an interaction target
            </summary>
            <param name="target">The target to check for</param>
            <returns>True if the target is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsInteractionTarget(System.String)">
            <summary>
            Get if this Room contains an interaction target
            </summary>
            <param name="targetName">The name of the target to check for. This is case insensitive</param>
            <returns>True if the target is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindItem(System.String,AdventureFramework.Interaction.Item@)">
            <summary>
            Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="itemName">The items name. This is case insensitive</param>
            <param name="item">The item</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindItem(System.String,AdventureFramework.Interaction.Item@,System.Boolean)">
            <summary>
            Find an item
            </summary>
            <param name="itemName">The items name. This is case insensitive</param>
            <param name="item">The item</param>
            <param name="includeInvisibleItems">Specify is invisible items should be included</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindItemByID(System.String,AdventureFramework.Interaction.Item@)">
            <summary>
            Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="itemID">The items ID</param>
            <param name="item">The item</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindItemByID(System.String,AdventureFramework.Interaction.Item@,System.Boolean)">
            <summary>
            Find an item
            </summary>
            <param name="itemID">The items ID</param>
            <param name="item">The item</param>
            <param name="includeInvisibleItems">Specifiy if invisible items should be included</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindInteractionTarget(System.String,AdventureFramework.Interaction.IInteractWithItem@)">
            <summary>
            Find an interaction target
            </summary>
            <param name="targetName">The targets name. This is case insensitive</param>
            <param name="target">The target</param>
            <returns>True if the target was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsCharacter(AdventureFramework.Interaction.Character)">
            <summary>
            Get if this Room contains a character. This will not include characters whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="character">The character to check for</param>
            <returns>True if the character is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsCharacter(AdventureFramework.Interaction.Character,System.Boolean)">
            <summary>
            Get if this Room contains a character
            </summary>
            <param name="character">The character to check for</param>
            <param name="includeInvisibleCharacters">Specify is invisible characters should be included</param>
            <returns>True if the character is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsCharacter(System.String)">
            <summary>
            Get if this Room contains a character. This will not include characters whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="character">The item name to check for. This is case insensitive</param>
            <returns>True if the item is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsCharacter(System.String,System.Boolean)">
            <summary>
            Get if this Room contains a character
            </summary>
            <param name="characterName">The character name to check for. This is case insensitive</param>
            <param name="includeInvisibleCharacters">Specify if invisible characters should be included</param>
            <returns>True if the item is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindCharacter(System.String,AdventureFramework.Interaction.NonPlayableCharacter@)">
            <summary>
            Find a character. This will not include characters whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="character">The character name. This is case insensitive</param>
            <param name="characterName">The character</param>
            <returns>True if the character was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindCharacter(System.String,AdventureFramework.Interaction.NonPlayableCharacter@,System.Boolean)">
            <summary>
            Find a character
            </summary>
            <param name="characterName">The character name. This is case insensitive</param>
            <param name="character">The character</param>
            <param name="includeInvisibleCharacters">Specify if inviisble characters should be included</param>
            <returns>True if the character was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.SpecifyConditionalDescription(AdventureFramework.Interaction.ConditionalDescription)">
            <summary>
            Sepecify a conditional description of this room
            </summary>
            <param name="description">The description of this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.GetAllObjectsWithAdditionalCommands">
            <summary>
            Get all IImplementOwnActions objects within this Room
            </summary>
            <returns>An array of all IImplementOwnActions objects within this rrom</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.OnReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            Handle reactions to ActionableCommands
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the command</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.OnMovedInto(System.Nullable{AdventureFramework.Locations.ECardinalDirection})">
            <summary>
            Handle movement into this Room
            </summary>
            <param name="fromDirection">The direction movement into this Room is from. Use null if there should be no direction</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.OnTransferFrom(AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Handle transferal of delegation to this Room from a source ITransferableDelegation object. This sould only concern top level properties and fields
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this Room that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Room
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Room
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.Interact(AdventureFramework.Interaction.Item)">
            <summary>
            Interact with an item
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            React to an ActionableCommand
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindCommand(System.String)">
            <summary>
            Find a command by it's name
            </summary>
            <param name="command">The name of the command to find</param>
            <returns>The ActionableCommand (if it is found)</returns>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Exits">
            <summary>
            Get the exits
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.UnlockedExits">
            <summary>
            Get all unlocked exits
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Characters">
            <summary>
            Get the characters of this Room
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Items">
            <summary>
            Get the items in this Room
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Item(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get an exit
            </summary>
            <param name="direction">The direction of an exit</param>
            <returns>The exit</returns>
        </member>
        <member name="P:AdventureFramework.Locations.Room.EnteredFrom">
            <summary>
            Get which direction this Room was entered from
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.AdditionalCommands">
            <summary>
            Get or set the ActionableCommands this object can interact with
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.ECardinalDirection">
            <summary>
            Enumeration of cardinal directions
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.ECardinalDirection.North">
            <summary>
            North (up)
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.ECardinalDirection.East">
            <summary>
            East (right)
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.ECardinalDirection.South">
            <summary>
            South (down)
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.ECardinalDirection.West">
            <summary>
            West (left)
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.InteractionResult">
            <summary>
            Represents a result of an interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.InteractionResult.effect">
            <summary>
            Get or set the effect
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.InteractionResult.item">
            <summary>
            Get or set the item used in the interaction
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.#ctor">
            <summary>
            Initializes a new instance of the InteractionResult class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.#ctor(AdventureFramework.Interaction.EInteractionEffect,AdventureFramework.Interaction.Item)">
            <summary>
            Initializes a new instance of the InteractionResult class
            </summary>
            <param name="effect">The effect of this interaction</param>
            <param name="item">The item used in this interaction</param>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.#ctor(AdventureFramework.Interaction.EInteractionEffect,AdventureFramework.Interaction.Item,System.String)">
            <summary>
            Initializes a new instance of the InteractionResult class
            </summary>
            <param name="effect">The effect of this interaction</param>
            <param name="item">The item used in this interaction</param>
            <param name="descriptionOfEffect">A description of the effect</param>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.#ctor(AdventureFramework.Interaction.EInteractionEffect,System.String)">
            <summary>
            Initializes a new instance of the InteractionResult class
            </summary>
            <param name="effect">The effect of this interaction</param>
            <param name="descriptionOfEffect">A description of the effect</param>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this InteractionResult
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this InteractionResult
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Interaction.InteractionResult.Effect">
            <summary>
            Get the effect
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.InteractionResult.Item">
            <summary>
            Get the item used in the interaction
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.EInteractionEffect">
            <summary>
            Enumeration of interaction effects
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.NoEffect">
            <summary>
            No effect to the interaction on either the item or the target
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.ItemUsedUp">
            <summary>
            Item was used up
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.ItemMorphed">
            <summary>
            Item morphed into another object
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.FatalEffect">
            <summary>
            A fatal effect to the interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.TargetUsedUp">
            <summary>
            The target was used up
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.SelfContained">
            <summary>
            Any other self contained effect
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.InteractionCallback">
            <summary>
            Represents the callback for interacting with objects
            </summary>
            <param name="item">The item to interact with</param>
            <param name="target">The target interaction element</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="T:AdventureFramework.Interaction.ExaminationCallback">
            <summary>
            Represents the callback for examinations
            </summary>
            <param name="obj">The object to examine</param>
            <returns>A string representing the result of the examination</returns>
        </member>
        <member name="T:AdventureFramework.Interaction.PlayableCharacter">
            <summary>
            Represents a playable character
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.PlayableCharacter.items">
            <summary>
            Get or set the items this Player holds
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.#ctor">
            <summary>
            Initializes a new instance of the PlayableCharacter class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the PlayableCharacter class
            </summary>
            <param name="name">The name of the player</param>
            <param name="description">The description of the player</param>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the PlayableCharacter class
            </summary>
            <param name="name">The name of the player</param>
            <param name="description">The description of the player</param>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.#ctor(System.String,System.String,AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the PlayableCharacter class
            </summary>
            <param name="name">The name of the player</param>
            <param name="description">The description of the player</param>
            <param name="items">The players items</param>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the PlayableCharacter class
            </summary>
            <param name="name">The name of the player</param>
            <param name="description">The description of the player</param>
            <param name="items">The players items</param>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.UseItem(AdventureFramework.Interaction.IInteractWithItem,System.Int16)">
            <summary>
            Use an item
            </summary>
            <param name="targetObject">A target object to use the item on</param>
            <param name="itemIndex">The index of the item to use</param>
            <returns>The result of the items usage</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.UseItem(AdventureFramework.Interaction.IInteractWithItem,AdventureFramework.Interaction.Item)">
            <summary>
            Use an item
            </summary>
            <param name="targetObject">A target object to use the item on</param>
            <param name="item">The item to use</param>
            <returns>The result of the items usage</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.AquireItem(AdventureFramework.Interaction.Item)">
            <summary>
            Aquire an item
            </summary>
            <param name="item">The item to aquire</param>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.DequireItem(AdventureFramework.Interaction.Item)">
            <summary>
            Dequire an item
            </summary>
            <param name="item">The item to dequire</param>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.HasItem(System.String)">
            <summary>
            Determine if this PlayableCharacter has an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="itemName">The items name. This is case insensitive</param>
            <returns>True if the item is found, else false</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.HasItem(System.String,System.Boolean)">
            <summary>
            Determine if this PlayableCharacter has an item
            </summary>
            <param name="itemName">The items name. This is case insensitive</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included</param>
            <returns>True if the item is found, else false</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.FindItem(System.String,AdventureFramework.Interaction.Item@)">
            <summary>
            Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="itemName">The items name. This is case insensitive</param>
            <param name="item">The item</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.FindItem(System.String,AdventureFramework.Interaction.Item@,System.Boolean)">
            <summary>
            Find an item
            </summary>
            <param name="itemName">The items name. This is case insensitive</param>
            <param name="item">The item</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.FindItemByID(System.String,AdventureFramework.Interaction.Item@)">
            <summary>
            Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="itemID">The items ID. This is case insensitive</param>
            <param name="item">The item</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.FindItemByID(System.String,AdventureFramework.Interaction.Item@,System.Boolean)">
            <summary>
            Find an item
            </summary>
            <param name="itemID">The items ID. This is case insensitive</param>
            <param name="item">The item</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.GetItemsAsList">
            <summary>
            Get items as a list
            </summary>
            <returns>A list of all</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.Kill">
            <summary>
            Kill the character
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.Kill(System.String)">
            <summary>
            Kill the character
            </summary>
            <param name="reason">A reason for the death</param>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.GetAllObjectsWithAdditionalCommands">
            <summary>
            Get all IImplementOwnActions objects within this PlayableCharacter
            </summary>
            <returns>An array of all IImplementOwnActions objects within this PlayableCharacter</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this PlayableCharacter that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this PlayableCharacter</param>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this PlayableCharacter
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.PlayableCharacter.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this PlayableCharacter
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Interaction.PlayableCharacter.Items">
            <summary>
            Get the items this Player holds
            </summary>
        </member>
        <member name="E:AdventureFramework.Interaction.PlayableCharacter.Died">
            <summary>
            Occurs if this player dies
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ECommand">
            <summary>
            Enumeration of commands
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ECommand.Use">
            <summary>
            Use an item
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ECommand.Take">
            <summary>
            Take an item
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ECommand.Examine">
            <summary>
            Examine something
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ECommand.Drop">
            <summary>
            Drop an item
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ECommand.Talk">
            <summary>
            Talk to a non-playable character
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Conversation">
            <summary>
            Represents an in-game conversation with a character
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Conversation.lines">
            <summary>
            Get or set the lines of the convesation
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Conversation.currentLine">
            <summary>
            Get or set the current line
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.#ctor">
            <summary>
            Initializes a new instance of the Conversation class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the Conversation class
            </summary>
            <param name="lines">The lines to add in this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.#ctor(AdventureFramework.Interaction.ConversationElement[])">
            <summary>
            Initializes a new instance of the Conversation class
            </summary>
            <param name="lines">The lines to add in this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.Reset">
            <summary>
            Reset this conversation
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.NextLine">
            <summary>
            Get the next line of the conversation
            </summary>
            <returns>The next line of the conversation</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.AddLine(System.String)">
            <summary>
            Add a line to this conversation
            </summary>
            <param name="line">The line to add to this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.AddLine(AdventureFramework.Interaction.ConversationElement)">
            <summary>
            Add a line to this conversation
            </summary>
            <param name="line">The line to add to this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.Truncate">
            <summary>
            Truncate this conversation at the current line
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Conversation
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Conversation.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Conversation
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Interaction.Conversation.Lines">
            <summary>
            Get the lines of this conversation
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Conversation.CurrentLine">
            <summary>
            Get the current line of this conversation
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Conversation.HasSomeRemainingLines">
            <summary>
            Get if this has some remaining lines
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.Overworld">
            <summary>
            Represents an entire overworld
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Overworld.regions">
            <summary>
            Get or set the Regions in this Overworld
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Overworld.currentRegion">
            <summary>
            Get or set the current Region
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.#ctor">
            <summary>
            Initializes a new instance of the Overworld class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Overworld class
            </summary>
            <param name="name">The name of this Overworld</param>
            <param name="description">A description of this Overworld</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the Overworld class
            </summary>
            <param name="name">The name of this Overworld</param>
            <param name="description">A description of this Overworld</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.CreateRegion(AdventureFramework.Locations.Region,System.Int32,System.Int32)">
            <summary>
            Create a Region in this Overworld
            </summary>
            <param name="region">The Region to create</param>
            <param name="columnInOverworld">The column of the Region with this Overworld</param>
            <param name="rowInOverworld">The row of the Region within this Overworld</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.CreateRegion(AdventureFramework.Locations.Region,AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Create a Region in this Overworld
            </summary>
            <param name="region">The Region to create</param>
            <param name="relativeLocation">The direction this Region lies in relative to the last Region created</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.MoveRegion(System.String)">
            <summary>
            Move to a specified Region
            </summary>
            <param name="regionName">The name of the Region to move to</param>
            <returns>If a move was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.MoveRegion(AdventureFramework.Locations.Region)">
            <summary>
            Move to a different Region
            </summary>
            <param name="region">The Region to move to</param>
            <returns>If a move was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.MoveRegion(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Move to a region in a specified direction
            </summary>
            <param name="direction">The direction to move in</param>
            <returns>If a move was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.HasAdjoiningRegion(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get if the Overworld.CurrentRegion prperty has an adjoining Region
            </summary>
            <param name="direction">The direction to check</param>
            <returns>True if there is an adjoining region in the direction specified</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.GetAdjoiningRegion(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get an adjoining Region
            </summary>
            <param name="direction">The direction of the adjoining Region</param>
            <returns>The adjoining Region, if there is one</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.SetStartRegion(AdventureFramework.Locations.Region)">
            <summary>
            Set the Region to start in
            </summary>
            <param name="region">The Region to start in</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.SetStartRegion(System.Int32)">
            <summary>
            Set the Region to start in
            </summary>
            <param name="index">The index of Region to start in</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.OnExamined">
            <summary>
            Handle examination this Overworld
            </summary>
            <returns>The result of this examination</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.TryGetDirectionOfAdjoiningRegion(AdventureFramework.Locations.Region,AdventureFramework.Locations.Region,AdventureFramework.Locations.ECardinalDirection@)">
            <summary>
            Try and get the direction of an adjoining region
            </summary>
            <param name="sourceRegion">The source region</param>
            <param name="destinationRegion">The destination region</param>
            <param name="direction">The direction the destinationRegion lies in relative to the sourceRegion</param>
            <returns>True if the Region's connect, false if they don't connect</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.OnRegisterTransferableChildren(System.Collections.Generic.List{AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this Overworld that are ITransferableDelegation
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Overworld</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Overworld
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Overworld
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Locations.Overworld.Regions">
            <summary>
            Get the Regions in this Overworld
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Overworld.CurrentRegion">
            <summary>
            Get the current Region
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.Exit">
            <summary>
            Represents an exit from a GameLocation
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Exit.direction">
            <summary>
            Get or set the direcion of the exit
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Exit.isLocked">
            <summary>
            Get if this Exit is locked
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.#ctor">
            <summary>
            Initializes a new instance of the Exit class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.#ctor(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Initializes a new instance of the Exit class
            </summary>
            <param name="direction">The direction of the exit</param>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.#ctor(AdventureFramework.Locations.ECardinalDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the Exit class
            </summary>
            <param name="direction">The direction of the exit</param>
            <param name="isLocked">If this exit is locked</param>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.#ctor(AdventureFramework.Locations.ECardinalDirection,System.Boolean,AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the Exit class
            </summary>
            <param name="direction">The direction of the exit</param>
            <param name="isLocked">If this exit is locked</param>
            <param name="description">A description of this exit</param>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.GenerateDescription">
            <summary>
            generate a description for this exit
            </summary>
            <returns>The completed Description</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.Unlock">
            <summary>
            Set if this exit is locked
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this Exit
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this Exit
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Locations.Exit.Direction">
            <summary>
            Get the direcion of the exit
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Exit.IsLocked">
            <summary>
            Get if this Exit is locked
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ExaminationResult">
            <summary>
            Represents the result of an examination
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminationResult.type">
            <summary>
            Get or set the type of result
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminationResult.#ctor">
            <summary>
            Initializes a new instance of the ExaminationResult class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminationResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExaminationResult class
            </summary>
            <param name="description">A description of the result</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminationResult.#ctor(System.String,AdventureFramework.Interaction.EExaminationResults)">
            <summary>
            Initializes a new instance of the ExaminationResult class
            </summary>
            <param name="description">A description of the result</param>
            <param name="type">The type of this result</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminationResult.OnWriteXml(System.Xml.XmlWriter)">
            <summary>
            Handle writing of Xml for this ExaminationResult
            </summary>
            <param name="writer">The XmlWriter to write Xml with</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminationResult.OnReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Handle reading of Xml for this ExaminationResult
            </summary>
            <param name="node">The node to read Xml from</param>
        </member>
        <member name="P:AdventureFramework.Interaction.ExaminationResult.Type">
            <summary>
            Get the type of result
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.EExaminationResults">
            <summary>
            Enumeration of interaction effects
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EExaminationResults.DescriptionReturned">
            <summary>
            No effect to the interaction on either the item or the target
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EExaminationResults.SelfContained">
            <summary>
            Any other self contained effect
            </summary>
        </member>
    </members>
</doc>
