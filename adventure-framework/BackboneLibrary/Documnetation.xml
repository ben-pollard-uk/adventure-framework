<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdventureFramework</name>
    </assembly>
    <members>
        <member name="T:AdventureFramework.Sound.Chains">
            <summary>
            A library of predefined FX Chains
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Chains.Attention">
            <summary>
            Get an Attention FX
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.Region">
            <summary>
            Represents a region
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.GameLocation">
            <summary>
            Represents any game location
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ExaminableObject">
            <summary>
            Represents an object that can be examined
            </summary>
        </member>
        <member name="T:AdventureFramework.IO.XMLSerializeableObject">
            <summary>
            Represents any object that can serialize to and from XML
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.XMLSerializeableObject.encoding">
            <summary>
            Get or set the encoding object for UTF8
            </summary>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.OnGetSchema">
            <summary>
            Get the XML schema
            </summary>
            <returns>The XMLSchema of this object</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.OnReadXML(System.Xml.XmlReader)">
            <summary>
            Handle reading XML
            </summary>
            <param name="reader">The XML reader</param>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.OnWriteXML(System.Xml.XmlWriter)">
            <summary>
            Handle writing XML
            </summary>
            <param name="writer">The XML writer</param>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.OnReadXMLNode(System.Xml.XmlNode)">
            <summary>
            Handle reading XML
            </summary>
            <param name="node">The XML node to read</param>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.ReadXmlNode(System.Xml.XmlNode)">
            <summary>
            Reconstruct an object from an xml node
            </summary>
            <param name="node">The node to reconstruct this object from</param>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.SerializeToXML(System.Xml.Serialization.IXmlSerializable)">
            <summary>
            Serialize an object into UTF8
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>A serialization of the object</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.Deserialize(System.String,System.Type)">
            <summary>
            Reconstruct an object from an XML string
            </summary>
            <param name="xmlString">The string to deserialize</param>
            <param name="typeOfObject">The type of the object to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.UTF8ByteArrayToString(System.Byte[])">
            <summary>
            To convert a Byte Array of Unicode values (UTF-8 encoded) to a complete String.
            </summary>
            <param name="characters">Unicode Byte Array to be converted to String</param>
            <returns>String converted from Unicode Byte Array</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.StringToUTF8ByteArray(System.String)">
            <summary>
            Converts a String to UTF8 Byte array
            </summary>
            <param name="xmlString">The xml string</param>
            <returns>A byte array based from the XML string</returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.NodeExists(System.Xml.XmlDocument,System.String)">
            <summary>
            Get if a node exists
            </summary>
            <param name="doc">The document to search</param>
            <param name="tagName">The tag to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.NodeExists(System.Xml.XmlNode,System.String)">
            <summary>
            Get if a node exists
            </summary>
            <param name="node">The xml node to search</param>
            <param name="tagName">The tag to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.AttributeExists(System.Xml.XmlNode,System.String)">
            <summary>
            Get if a attribue exists
            </summary>
            <param name="node">The node to search for</param>
            <param name="attributeName">The attribute to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.AttributeExists(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Get if a attribue exists
            </summary>
            <param name="doc">The document to search</param>
            <param name="tagName">The tag to search for</param>
            <param name="attributeName">The attribute to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.GetAttribute(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Get an attribute
            </summary>
            <param name="doc"></param>
            <param name="tagName"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.GetAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Get a inner node from a node at a specified index
            </summary>
            <param name="node">The parent node to search</param>
            <param name="attributeName">The attribute that is being searched for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.GetNode(System.Xml.XmlNode,System.Int16)">
            <summary>
            Get a inner node from a node at a specified index
            </summary>
            <param name="node"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.GetNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Get a node
            </summary>
            <param name="doc">The document to search</param>
            <param name="tagName">The tag name to search for</param>
            <returns></returns>
        </member>
        <member name="M:AdventureFramework.IO.XMLSerializeableObject.GetNode(System.Xml.XmlNode,System.String)">
            <summary>
            Get an node
            </summary>
            <param name="parentNode">The parent node to search</param>
            <param name="tagName">The tag name to search for</param>
            <returns></returns>
        </member>
        <member name="T:AdventureFramework.Interaction.IExaminable">
            <summary>
            Represents anything that is examinable
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.IExaminable.Examime">
            <summary>
            Examine this object
            </summary>
            <returns>A description of the examination of this object</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.IExaminable.Name">
            <summary>
            Get the name of this object
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.IExaminable.Description">
            <summary>
            Get or set a description of this object
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.IExaminable.IsPlayerVisible">
            <summary>
            Get if this is player visible
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.usedIDS">
            <summary>
            Get or set the used ID's to date
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.name">
            <summary>
            Get or set the name of this ExaminableObject
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.description">
            <summary>
            Get or set the description of this ExaminableObject
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.isPlayerVisible">
            <summary>
            Get or set if this is player visible
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.id">
            <summary>
            Get or set this objects ID
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ExaminableObject.examination">
            <summary>
            Get or set a delegate handling all examination of this object
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.#ctor">
            <summary>
            Initializes a new instance of the ExaminableObject class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.GenerateID">
            <summary>
            Generate an ID from a name
            </summary>
            <returns>The generated ID</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.ExaminableObject.OnExaminded">
            <summary>
            Handle examination this object
            </summary>
            <returns>A description of the examination of this Weapon</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.ExaminableObject.ID">
            <summary>
            Get this objects ID
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ExaminableObject.Examination">
            <summary>
            Get or set a delegate handling all examination of this object
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.GameLocation.row">
            <summary>
            Get or set the row of this Room within it's parent location
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.GameLocation.column">
            <summary>
            Get or set the column of this Room within it's parent location
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.GameLocation.#ctor">
            <summary>
            Initialize a new instance of the GameLocation class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.GameLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the GameLocation class
            </summary>
            <param name="columnWithinParnt">The column this GameLocation resides within its parent</param>
            <param name="rowWithinParent">The row this GameLocation resides within it's parent</param>
        </member>
        <member name="P:AdventureFramework.Locations.GameLocation.Row">
            <summary>
            Get or set the row of this Room within it's parent location
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.GameLocation.Column">
            <summary>
            Get or set the column of this Room within it's parent location
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Region.rooms">
            <summary>
            Get or set the Rooms in this Region
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Region.currentRoom">
            <summary>
            Get or set the current Room
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Region.#ctor">
            <summary>
            Initialize a new instance of the Region class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Region.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the Region class
            </summary>
            <param name="name">The name of this Region</param>
            <param name="description">The description of this Region</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initialize a new instance of the Region class
            </summary>
            <param name="name">The name of this Region</param>
            <param name="description">The description of this Region</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.CreateRoom(AdventureFramework.Locations.Room,System.Int32,System.Int32)">
            <summary>
            Create a Rroom in this Region
            </summary>
            <param name="room">The Room to create</param>
            <param name="columnInRegion">The column of the Room with this Region</param>
            <param name="rowInRegion">The row of the Room within this Region</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.GetAdjoiningRoom(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get an adjoining Room
            </summary>
            <param name="direction">The direction of the adjoining Room</param>
            <returns>The adjoining Room, if there is one</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Region.Move(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Move in a specified direction
            </summary>
            <param name="direction">The direction to move in</param>
            <returns>If a move was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Region.SetStartRoom(AdventureFramework.Locations.Room)">
            <summary>
            Set the Room to start in
            </summary>
            <param name="room">The Room to start in</param>
        </member>
        <member name="M:AdventureFramework.Locations.Region.SetStartRoom(System.Int32)">
            <summary>
            Set the Room to start in
            </summary>
            <param name="index">The index of Room to start in</param>
        </member>
        <member name="P:AdventureFramework.Locations.Region.Rooms">
            <summary>
            Get the Rooms in this Region
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Region.CurrentRoom">
            <summary>
            Get the current Room
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Items.StaticItem">
            <summary>
            Represents a static item, one that is fixed in place
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Items.Item">
            <summary>
            Represents an item that can be used within the game
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.IInteractWithItem">
            <summary>
            Represnts any object that can interact with an item
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.IInteractWithItem.Interact(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Interact with an item
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="T:AdventureFramework.Interaction.IImplementOwnActions">
            <summary>
            Represents any object that can implement it's own actions
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.IImplementOwnActions.ReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            React to an ActionableCommand
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.IImplementOwnActions.FindCommand(System.String)">
            <summary>
            Find a command by it's name
            </summary>
            <param name="command">The name of the command to find</param>
            <returns>The ActionableCommand (if it is found)</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.IImplementOwnActions.AdditionalCommands">
            <summary>
            Get or set the ActionableCommands this object can interact with
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Items.Item.isTakeable">
            <summary>
            Get or set if this is takeable
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Items.Item.interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Items.Item.morphicType">
            <summary>
            Get or set the morphic type of this item. This allows correct file IO for the type of this item if it has morphed into a new type
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Items.Item.additionalCommands">
            <summary>
            Get or set the additional actionable commands
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.Item.#ctor">
            <summary>
            Initialize a new instance of the Item class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.Item.Morph(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Handle item morphing
            </summary>
            <param name="item">The item to morph into</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.Item.Use(AdventureFramework.Interaction.IInteractWithItem)">
            <summary>
            Use this item on a target
            </summary>
            <param name="target">The target to use the item on</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.Item.OnInteract(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Handle interaction with other items
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.Item.OnReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            Handle reactions to ActionableCommands
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the command</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.Items.Item.IsTakeable">
            <summary>
            Get or set if this is takeable
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Items.Item.Interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Items.Item.MorphicType">
            <summary>
            Get or set the morphic type of this item. This allows correct file IO for the type of this item if it has morphed into a new type
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.StaticItem.#ctor">
            <summary>
            Initialize a new instance of the StaticItem class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.StaticItem.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the StaticItem class
            </summary>
            <param name="name">The name of this FixedItem</param>
            <param name="description">A description of this FixedItem</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.StaticItem.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initialize a new instance of the StaticItem class
            </summary>
            <param name="name">The name of this FixedItem</param>
            <param name="description">A description of this FixedItem</param>
        </member>
        <member name="T:AdventureFramework.Sound.Players.StreamPlayer">
            <summary>
            Play a sound file as a stream
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayWav(System.String)">
            <summary>
            Play a sound file. The resource will be played asychronously
            </summary>
            <param name="fileName">The full file name of the file to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayWav(System.String,System.UInt32)">
            <summary>
            Play a sound file
            </summary>
            <param name="fileName">The full file name of the file to play</param>
            <param name="flags">The flags to use when playing the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayWav(System.String,System.UInt32,AdventureFramework.Sound.Players.ESyncModes)">
            <summary>
            Play a sound file
            </summary>
            <param name="fileName">The full file name of the file to play</param>
            <param name="flags">The flags to use when playing the sound</param>
            <param name="preSendMode">The sync mode to use prior to sending the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Play a sound file from a resource. The resource will be played asychronously
            </summary>
            <param name="assembly">The assembly the sound file belongs to</param>
            <param name="fileName">The file name of the stream, including it's extension. Any directories that the resource lies in should be specified with '.' instead of '/' e.g. .DirectoryName.File.wav</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayResourceStream(System.Reflection.Assembly,System.String,System.UInt32)">
            <summary>
            Play a sound file from a resource
            </summary>
            <param name="assembly">The assembly the sound file belongs to</param>
            <param name="fileName">The file name of the stream, including it's extension. Any directories that the resource lies in should be specified with '.' instead of '/' e.g. .DirectoryName.File.wav</param>
            <param name="flags">The flags to use when playing the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayResourceStream(System.Reflection.Assembly,System.String,System.UInt32,AdventureFramework.Sound.Players.ESyncModes)">
            <summary>
            Play a sound file from a resource
            </summary>
            <param name="assembly">The assembly the sound file belongs to</param>
            <param name="fileName">The file name of the stream, including it's extension. Any directories that the resource lies in should be specified with '.' instead of '/' e.g. .DirectoryName.File.wav</param>
            <param name="flags">The flags to use when playing the sound</param>
            <param name="preSendMode">The sync mode to use prior to sending the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayStream(System.IO.Stream)">
            <summary>
            Play a stream. The stream will be played asychronously
            </summary>
            <param name="stream">The stream to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayStream(System.IO.Stream,System.UInt32)">
            <summary>
            Play a stream
            </summary>
            <param name="stream">The stream to play</param>
            <param name="flags">The flags to use when playing the sound</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.StreamPlayer.PlayStream(System.IO.Stream,System.UInt32,AdventureFramework.Sound.Players.ESyncModes)">
            <summary>
            Play a stream
            </summary>
            <param name="stream">The stream to play</param>
            <param name="flags">The flags to use when playing the sound</param>
            <param name="preSendMode">The sync mode to use prior to sending the sound</param>
        </member>
        <member name="T:AdventureFramework.Sound.Players.ESoundFlags">
            <summary>
            Enumeration of sound flags
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_SYNC">
            <summary>
            Play synchronously (default)
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_ASYNC">
            <summary>
            Play asynchronously
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_NODEFAULT">
            <summary>
            Silence (default) if sound not found
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_MEMORY">
            <summary>
            Stream points to a memory file
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_LOOP">
            <summary>
            Loop the sound until next sndPlaySound
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_NOSTOP">
            <summary>
            Don't stop any currently playing sound
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_NOWAIT">
            <summary>
            Don't wait if the driver is busy
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_ALIAS">
            <summary>
            Name is a registry alias
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_ALIAS_ID">
            <summary>
            Alias is a predefined ID
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_FILENAME">
            <summary>
            Name is file name
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESoundFlags.SND_RESOURCE">
            <summary>
            Name is resource name or atom 
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.Players.ESyncModes">
            <summary>
            Enumeration of sync modes
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESyncModes.Async">
            <summary>
            Asynchronous
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.ESyncModes.Sync">
            <summary>
            Sychronous
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.Beep">
            <summary>
            Represents a single beep of the motherboard
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Beep.FrequencyChangeBetweenOctaves">
            <summary>
            Get the frequency between octaves
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Beep.duration">
            <summary>
            Get or set the duration of this note in milliseconds
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Beep.frequency">
            <summary>
            Get or set the frequency of the note that will be played
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.#ctor(AdventureFramework.Sound.EConsoleNote)">
            <summary>
            Initialize a new instance of the Beep struct with a standard duration of 250ms
            </summary>
            <param name="note">Specify the note of this Beep</param>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.#ctor(AdventureFramework.Sound.EConsoleNote,System.Int32)">
            <summary>
            Initialize a new instance of the Beep struct
            </summary>
            <param name="note">Specify the note of this Beep</param>
            <param name="duration">Specify the duration of this Beep</param>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.#ctor(System.Int32)">
            <summary>
            Initialize a new instance of the Beep struct with a standard duration of 250ms
            </summary>
            <param name="frequency">Specify the frequency of the note of this Beep</param>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the Beep struct
            </summary>
            <param name="frequency">Specify the frequency of the note of this Beep</param>
            <param name="duration">Specify the duration of this Beep</param>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.Create(AdventureFramework.Sound.EConsoleNote,System.Int32)">
            <summary>
            Create a new Beep
            </summary>
            <param name="note">The note of the beep</param>
            <param name="durationInMs">The duration of the beep</param>
            <returns>The created beep</returns>
        </member>
        <member name="M:AdventureFramework.Sound.Beep.Create(System.Int32,System.Int32)">
            <summary>
            Create a new Beep
            </summary>
            <param name="frequency">The frequency of the beep</param>
            <param name="durationInMs">The duration of the beep</param>
            <returns>The created beep</returns>
        </member>
        <member name="P:AdventureFramework.Sound.Beep.Duration">
            <summary>
            Get or set the duration of this note in milliseconds
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.Beep.Frequency">
            <summary>
            Get or set the frequency of the note that will be played
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.EConsoleNote">
            <summary>
            Enumeration of console notes in the second ocatve 
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.TitleScreen">
            <summary>
            Represents a title screen
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.SceneFrame">
            <summary>
            Represents a frame of scene that can be displayed as a string
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneFrame.sceneAsString">
            <summary>
            Get or set the scene as a string
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneFrame.cursorLeft">
            <summary>
            Get or set the required cursors left position
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneFrame.cursorTop">
            <summary>
            Get or set the required cursors top position
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneFrame.showCursor">
            <summary>
            Get or set if the cursor should be shown
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneFrame.acceptsInput">
            <summary>
            Get or set if the frame excepts input
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneFrame.#ctor">
            <summary>
            Initialize a new instance of the SceneFrame class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneFrame.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the SceneFrame class
            </summary>
            <param name="sceneAsString">The scene as a String</param>
            <param name="cursorLeft">The required cursor left proition</param>
            <param name="cursorTop">The required cursor top position</param>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneFrame.OnBuildScene(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Build the Scene string
            </summary>
            <param name="name">The name of the game to build the SceneFrame for</param>
            <param name="description">A description of the scene</param>
            <param name="width">The width of the SceneFrame</param>
            <param name="height">The height of the SceneFrame</param>
            <returns>A string representing the SceneFrame</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.SceneFrame.SceneAsString">
            <summary>
            Get the scene as a String
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.SceneFrame.CursorLeft">
            <summary>
            Get the required cursors left position
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.SceneFrame.CursorTop">
            <summary>
            Get the required cursors top position
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.SceneFrame.ShowCursor">
            <summary>
            Get or set if the cursor should be shown
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.SceneFrame.AcceptsInput">
            <summary>
            Get or set if the frame excepts input
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.TitleScreen.#ctor">
            <summary>
            Initialize a new instance of the TitleScreen class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.TitleScreen.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the TitleScreen class
            </summary>
            <param name="title">The title of the game</param>
            <param name="description">A description of the game</param>
            <param name="width">The width of the TitleScreen</param>
            <param name="height">The height of the TitleScreen</param>
        </member>
        <member name="T:AdventureFramework.Rendering.SceneFrameEventArgs">
            <summary>
            Event arguments for SceneFrame events
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneFrameEventArgs.frame">
            <summary>
            Get or set the frame
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneFrameEventArgs.#ctor">
            <summary>
            Initialize a new instance of the SceneFrameEventArgs class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneFrameEventArgs.#ctor(AdventureFramework.Rendering.SceneFrame)">
            <summary>
            Initialize a new instance of the SceneFrameEventArgs class
            </summary>
            <param name="frame">The SceneFrame to specify for these arguments</param>
        </member>
        <member name="P:AdventureFramework.Rendering.SceneFrameEventArgs.Frame">
            <summary>
            Get the frame
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.SceneFrameEventHandler">
            <summary>
            Event handler for SceneFrame events
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AdventureFramework.Interaction.Items.Collectable">
            <summary>
            Represents a collectable item
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.Collectable.#ctor">
            <summary>
            Initialize a new instance of the Collectable class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.Collectable.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the Collectable class
            </summary>
            <param name="name">The name of this Collectable</param>
            <param name="description">A description of this Collectable</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Items.Collectable.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initialize a new instance of the Collectable class
            </summary>
            <param name="name">The name of this Collectable</param>
            <param name="description">A description of this Collectable</param>
        </member>
        <member name="T:AdventureFramework.IO.GameSave">
            <summary>
            A class for saving and loading Game objects from a file
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.GameSave.password">
            <summary>
            Get or set the salt value for all encryption
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.GameSave.salt">
            <summary>
            Get or set the salt value for all encryption
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.GameSave.filePath">
            <summary>
            Get or set the full file path
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.GameSave.game">
            <summary>
            Get or set the Game this file relates to
            </summary>
        </member>
        <member name="F:AdventureFramework.IO.GameSave.useCryption">
            <summary>
            Get or set if encryption should be used
            </summary>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.#ctor">
            <summary>
            Initialize a new instance of the GameSave class
            </summary>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.#ctor(AdventureFramework.GameStructure.Game)">
            <summary>
            Initialize a new instance of the GameSave class
            </summary>
            <param name="game">The Game to save</param>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.#ctor(System.String)">
            <summary>
            Initialize a new instance of the GameSave class
            </summary>
            <param name="fullPath">The file path to load</param>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.Save">
            <summary>
            Save this file to the path specified in the GameSave.FilePath property
            </summary>
            <returns>The result of the save</returns>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.Save(System.String)">
            <summary>
            Save this file to the path specified
            </summary>
            <param name="fullPath">The full path of the file</param>
            <returns>The result of the save</returns>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.Load">
            <summary>
            Load a game from the path specified in the GameSave.FilePath property
            </summary>
            <returns>The result of the load</returns>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.Load(System.String)">
            <summary>
            Load a game from the path specified
            </summary>
            <param name="fullPath">The full path of the file</param>
            <returns>The result of the load</returns>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.GetApplicationDirecory">
            <summary>
            Get the applications directory
            </summary>
            <returns>A new instance of the DirectoryInfo class based on the application directory</returns>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.SaveGameAsXML(System.String,AdventureFramework.GameStructure.Game,System.String@,System.Boolean)">
            <summary>
            Save the progress of the current game
            </summary>
            <param name="fullPath">The path to save the file to</param>
            <param name="game">The game to save</param>
            <param name="message">A message detailing the save</param>
            <param name="useEncryption">Specify if encryption is used</param>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.LoadGameAsXML(System.String,AdventureFramework.GameStructure.Game,System.String@,System.Boolean)">
            <summary>
            Load a game
            </summary>
            <param name="fullPath">The path of the game to load</param>
            <param name="game">The loaded game</param>
            <param name="message">A message detailing the load</param>
            <param name="useDecryption">Specify if decryption should be used</param>
            <returns>If the load was sucsessfil</returns>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.EncryptStringAES(System.String,System.String)">
            <summary>
            Encrypt the a string using AES
            </summary>
            <param name="plainText">The text to encrypt</param>
            <param name="password">A password used to generate a key for encryption</param>
        </member>
        <member name="M:AdventureFramework.IO.GameSave.DecryptStringAES(System.String,System.String)">
            <summary>
            Decrypt a string that has been encrypted with the GameSave.EncryptStringAES() method
            </summary>
            <param name="cipherText">The text to decrypt</param>
            <param name="password">A password used to generate a key for decryption. This must be the same as the password used when encrypting</param>
        </member>
        <member name="P:AdventureFramework.IO.GameSave.FilePath">
            <summary>
            Get the full file path
            </summary>
        </member>
        <member name="P:AdventureFramework.IO.GameSave.Game">
            <summary>
            Get the Game this file relates to
            </summary>
        </member>
        <member name="P:AdventureFramework.IO.GameSave.UseCryption">
            <summary>
            Get or set if encryption should be used
            </summary>
        </member>
        <member name="T:AdventureFramework.GameStructure.GameCreationHelper">
            <summary>
            Represents a class that helps to build games
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.GameCreationHelper.creator">
            <summary>
            Get or set the game creator 
            </summary>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameCreationHelper.#ctor">
            <summary>
            Initialize a new instance of the GameCreationHelper class
            </summary>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,AdventureFramework.GameStructure.OverworldGeneration,AdventureFramework.GameStructure.PlayerGeneration,AdventureFramework.GameStructure.CompletionCheck)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A delegate to generate the Overworld with</param>
            <param name="playerGenerator">The delegate to generate the Player with</param>
            <param name="completionCondition">The delegate to check game completion with</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,AdventureFramework.GameStructure.OverworldGeneration,AdventureFramework.GameStructure.PlayerGeneration,AdventureFramework.GameStructure.CompletionCheck,AdventureFramework.Rendering.TitleScreen)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A delegate to generate the Overworld with</param>
            <param name="playerGenerator">The delegate to generate the Player with</param>
            <param name="completionCondition">The delegate to check game completion with</param>
            <param name="titleScreen">The title screen</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,AdventureFramework.GameStructure.OverworldGeneration,AdventureFramework.GameStructure.PlayerGeneration,AdventureFramework.GameStructure.CompletionCheck,AdventureFramework.Rendering.TitleScreen,AdventureFramework.Rendering.TitleScreen)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The delegate to check game completion with</param>
            <param name="titleScreen">The title screen</param>
            <param name="completionScreen">The completion screen</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,System.Func{AdventureFramework.Locations.Overworld},System.Func{AdventureFramework.Interaction.Inhabitants.PlayableCharacter},AdventureFramework.GameStructure.CompletionCheck)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The delegate to check game completion with</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,System.Func{AdventureFramework.Locations.Overworld},System.Func{AdventureFramework.Interaction.Inhabitants.PlayableCharacter},AdventureFramework.GameStructure.CompletionCheck,AdventureFramework.Rendering.TitleScreen)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The delegate to check game completion with</param>
            <param name="titleScreen">The title screen</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,System.Func{AdventureFramework.Locations.Overworld},System.Func{AdventureFramework.Interaction.Inhabitants.PlayableCharacter},AdventureFramework.GameStructure.CompletionCheck,AdventureFramework.Rendering.TitleScreen,AdventureFramework.Rendering.TitleScreen)">
            <summary>
            Create a new GameCreationHelper
            </summary>
            <param name="name">The name of the game</param>
            <param name="description">A description of the game</param>
            <param name="overworldGenerator">A function to generate the Overworld with</param>
            <param name="playerGenerator">The function to generate the Player with</param>
            <param name="completionCondition">The delegate to check game completion with</param>
            <param name="titleScreen">The title screen</param>
            <param name="completionScreen">The completion screen</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified</returns>
        </member>
        <member name="P:AdventureFramework.GameStructure.GameCreationHelper.Creator">
            <summary>
            Get the game creator 
            </summary>
        </member>
        <member name="T:AdventureFramework.GameStructure.OverworldGeneration">
            <summary>
            Delegate for Overworld generation
            </summary>
            <returns>A generated Overworld</returns>
        </member>
        <member name="T:AdventureFramework.GameStructure.PlayerGeneration">
            <summary>
            Delegate for Player generation
            </summary>
            <returns>A generated Player</returns>
        </member>
        <member name="T:AdventureFramework.Sound.Chain">
            <summary>
            Represents a chain made out of a collection of Beeps
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Chain.beeps">
            <summary>
            Get the Beep's that make up this chain
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.#ctor(AdventureFramework.Sound.Beep[])">
            <summary>
            Initialize a new instance of the Chain struct
            </summary>
            <param name="beeps">The beeps that make up this chain</param>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.AddBeep(AdventureFramework.Sound.Beep)">
            <summary>
            Add a new beep to the end of the chain
            </summary>
            <param name="beep">The beep to add</param>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.AddRange(AdventureFramework.Sound.Beep[])">
            <summary>
            Add multiple new beeps to the end of the chain
            </summary>
            <param name="beeps">The beeps to add</param>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.RemoveLast">
            <summary>
            Remove the last beep in this chain
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of beeps from this chain
            </summary>
            <param name="index">The index of the first beep to remove</param>
            <param name="count">The amount of beeps to remove from the index</param>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.Clear">
            <summary>
            Clear all beeps from this song
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.ShiftUpOctave">
            <summary>
            Shift all the notes in this chain up one octave
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Chain.ShiftDownOctave">
            <summary>
            Shift all the notes in this chain down one octave
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.Chain.Beeps">
            <summary>
            Get the Beep's that make up this chain
            </summary>
        </member>
        <member name="P:AdventureFramework.Sound.Chain.Duration">
            <summary>
            Get the total duration of this Chain
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ConditionalDescription">
            <summary>
            Represents a conditional description of an object
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Description">
            <summary>
            Represents a description of an object
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Description.trueDescription">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Description.#ctor">
            <summary>
            Initialize a new instance of the Description class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Description.#ctor(System.String)">
            <summary>
            Initialize a new instance of the Description class
            </summary>
            <param name="description">The description</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Description.GetDescription">
            <summary>
            Get the descrpition
            </summary>
            <returns>The description</returns>
        </member>
        <member name="F:AdventureFramework.Interaction.ConditionalDescription.falseDescription">
            <summary>
            Get or set the description for when this condition is false
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ConditionalDescription.condition">
            <summary>
            Get or set the condition
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.#ctor">
            <summary>
            Initialize anew instance of the ConditionalDescription class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ConditionalDescription.#ctor(System.String,System.String,AdventureFramework.Interaction.Condition)">
            <summary>
            Initialize anew instance of the ConditionalDescription class
            </summary>
            <param name="trueDescription">The true description</param>
            <param name="falseDescription">The false description</param>
            <param name="condition">The condition</param>
        </member>
        <member name="P:AdventureFramework.Interaction.ConditionalDescription.TrueDesciption">
            <summary>
            Get or set the description for when this condition is true
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ConditionalDescription.FalseDesciption">
            <summary>
            Get or set the description for when this condition is false
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ConditionalDescription.Condition">
            <summary>
            Get or set the condition
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Condition">
            <summary>
            Delegate used for conditions
            </summary>
            <returns>The result of the condition</returns>
        </member>
        <member name="T:AdventureFramework.Interaction.Inhabitants.ReasonEventArgs">
            <summary>
            Event arguments for reason events
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.ReasonEventArgs.reason">
            <summary>
            Get or set the reason
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.ReasonEventArgs.#ctor">
            <summary>
            Initialize a new instance of the ReasonEventArgs class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.ReasonEventArgs.#ctor(System.String)">
            <summary>
            Initialize a new instance of the ReasonEventArgs class
            </summary>
            <param name="reason">The reason for the death</param>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.ReasonEventArgs.Reason">
            <summary>
            Get the reason
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Inhabitants.ReasonEventHandler">
            <summary>
            Event handler for reason events
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AdventureFramework.Interaction.Inhabitants.PlayableCharacter">
            <summary>
            Represents a playable character
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Inhabitants.Character">
            <summary>
            Represents a generic in game character
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.Character.isAlive">
            <summary>
            Get or set if this character is alive
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.Character.interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.Character.additionalCommands">
            <summary>
            Get or set the additional actionable commands
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Character.#ctor">
            <summary>
            Initialize a new instance of the Character class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Character.InteractWithItem(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Interact with a specified item
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Character.Kill">
            <summary>
            Kill this character
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Character.Kill(System.String)">
            <summary>
            Kill the character
            </summary>
            <param name="reason">A reason for the death</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Character.OnReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            Handle reactions to ActionableCommands
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the command</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.Character.IsAlive">
            <summary>
            Get if this character is alive
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.Character.Interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.items">
            <summary>
            Get or set the items this Player holds
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.#ctor">
            <summary>
            Initialize a new instance of the PlayableCharacter class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the PlayableCharacter class
            </summary>
            <param name="name">The name of the player</param>
            <param name="description">The description of the player</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initialize a new instance of the PlayableCharacter class
            </summary>
            <param name="name">The name of the player</param>
            <param name="description">The description of the player</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.#ctor(System.String,System.String,AdventureFramework.Interaction.Items.Item[])">
            <summary>
            Initialize a new instance of the PlayableCharacter class
            </summary>
            <param name="name">The name of the player</param>
            <param name="description">The description of the player</param>
            <param name="items">The players items</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.Items.Item[])">
            <summary>
            Initialize a new instance of the PlayableCharacter class
            </summary>
            <param name="name">The name of the player</param>
            <param name="description">The description of the player</param>
            <param name="items">The players items</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.UseItem(AdventureFramework.Interaction.IInteractWithItem,System.Int16)">
            <summary>
            Use an item
            </summary>
            <param name="targetObject">A target object to use the item on</param>
            <param name="itemIndex">The index of the item to use</param>
            <returns>The result of the items usage</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.UseItem(AdventureFramework.Interaction.IInteractWithItem,AdventureFramework.Interaction.Items.Item)">
            <summary>
            Use an item
            </summary>
            <param name="targetObject">A target object to use the item on</param>
            <param name="item">The item to use</param>
            <returns>The result of the items usage</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.AquireItem(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Aquire an item
            </summary>
            <param name="item">The item to aquire</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.DequireItem(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Dequire an item
            </summary>
            <param name="item">The item to dequire</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.FindItem(System.String,AdventureFramework.Interaction.Items.Item@)">
            <summary>
            Find an item
            </summary>
            <param name="itemName">The items name</param>
            <param name="item">The item</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.FindItemByID(System.String,AdventureFramework.Interaction.Items.Item@)">
            <summary>
            Find an item
            </summary>
            <param name="itemID">The items ID</param>
            <param name="item">The item</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.GetItemsAsList">
            <summary>
            Get items as a list
            </summary>
            <returns>A list of all</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.GetAllObjectsWithAdditionalCommands">
            <summary>
            Get all IImplementOwnActions objects within this PlayableCharacter
            </summary>
            <returns>An array of all IImplementOwnActions objects within this PlayableCharacter</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.Items">
            <summary>
            Get the items this Player holds
            </summary>
        </member>
        <member name="E:AdventureFramework.Interaction.Inhabitants.PlayableCharacter.Died">
            <summary>
            Occurs if this player dies
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Inhabitants.ECommand">
            <summary>
            Enumeration of commands
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.ECommand.USE">
            <summary>
            Use an item
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.ECommand.TAKE">
            <summary>
            Take an item
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.ECommand.EXAMINE">
            <summary>
            Examine something
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.ECommand.DROP">
            <summary>
            Drop an item
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.ECommand.TALK">
            <summary>
            Talk to a NPC
            </summary>
        </member>
        <member name="T:AdventureFramework.Sound.Players.BeepPlayer">
            <summary>
            A class that allows advanced control of the System.Console.Beep() method
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.BeepPlayer.lowToHighNotes">
            <summary>
            Get a list of all notes in asscending order
            </summary>
        </member>
        <member name="F:AdventureFramework.Sound.Players.BeepPlayer.hasBeenCancelled">
            <summary>
            Get or set if playing has been cancelled
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayLowToHigh">
            <summary>
            Play each note in the 2nd ocatve from low to high with a duration of 250ms
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayLowToHigh(System.Int32)">
            <summary>
            Play each note in the 2nd ocatve from low to high with a custom duration
            </summary>
            <param name="duration">Specify a duration for each note</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayLowToHigh(System.Int32,System.Int32)">
            <summary>
            Play each note in the 2nd ocatve from low to high witha  custom duration and a specified number of cycles
            </summary>
            <param name="duration">Specify a duration for each note</param>
            <param name="cycles">The amount of times the song should be repeated. Use -1 for inifinity</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayHighToLow">
            <summary>
            Play each note in the 2nd ocatve from high to low with a set duration of 250ms
            </summary>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayHighToLow(System.Int32)">
            <summary>
            Play each note in the second ocatve from high to low with a specified duration
            </summary>
            <param name="duration">Specify a duration for each note</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayHighToLow(System.Int32,System.Int32)">
            <summary>
            Play each note in the second ocatve from high to low with a specified duration and number of cycles
            </summary>
            <param name="duration">Specify a duration for each note</param>
            <param name="cycles">The amount of times the song should be repeated. Use -1 for inifinity</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayNotes(AdventureFramework.Sound.Beep[],System.Int32)">
            <summary>
            Play many Beeps
            </summary>
            <param name="notes">The notes to play</param>
            <param name="cycles">The amount of times the song should be repeated. Use -1 for inifinity</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayChain(AdventureFramework.Sound.Chain)">
            <summary>
            Play a Chain
            </summary>
            <param name="chain">The chain to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayChain(AdventureFramework.Sound.Chain,System.Int32)">
            <summary>
            Play a Chain
            </summary>
            <param name="chain">The song to play</param>
            <param name="cycles">The amount of times the chain should be repeated. Use -1 for inifinity</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayNote(AdventureFramework.Sound.EConsoleNote)">
            <summary>
            Play a singular note for a set duration of 250ms
            </summary>
            <param name="note">The note to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayNote(System.Int32)">
            <summary>
            Play a singular note for a set duration of 250ms
            </summary>
            <param name="frequency">The frequency of the note to play</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayNote(AdventureFramework.Sound.EConsoleNote,System.Int32)">
            <summary>
            Play a singular note for a specified duration
            </summary>
            <param name="note">The note to play</param>
            <param name="duration">Specify a duration for each note</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.PlayNote(System.Int32,System.Int32)">
            <summary>
            Play a singular note for a specified duration
            </summary>
            <param name="frequency">The frequency of the note to play</param>
            <param name="duration">Specify a duration for each note</param>
        </member>
        <member name="M:AdventureFramework.Sound.Players.BeepPlayer.Cancel">
            <summary>
            Cancel any playing note
            </summary>
        </member>
        <member name="T:AdventureFramework.GameStructure.Game">
            <summary>
            Represents the structure of the game
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.player">
            <summary>
            Get or set the player
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.overworld">
            <summary>
            Get or set the Overworld
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.name">
            <summary>
            Get or set the name
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.description">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.hasEnded">
            <summary>
            Get or set if this game has ended
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.titleScreen">
            <summary>
            Get or set this Games title screen
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.completionScreen">
            <summary>
            Get or set this Games title screen
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.currentScene">
            <summary>
            Get or set the current SceneFrame
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.lastUsedWidth">
            <summary>
            Get or set the last used width
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.lastUsedHeight">
            <summary>
            Get or set the last used height
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.Game.completionCondition">
            <summary>
            Get or set the completion condition
            </summary>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.#ctor">
            <summary>
            Initialize a new instance of the Game class
            </summary>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.#ctor(System.String,System.String,AdventureFramework.Interaction.Inhabitants.PlayableCharacter,AdventureFramework.Locations.Overworld)">
            <summary>
            Initialize a new instance of the Game class
            </summary>
            <param name="name">The name of this Game</param>
            <param name="description">A description of this Game</param>
            <param name="player">The Player to use for this Game</param>
            <param name="overworld">A Overworld to use for this Game</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.ReturnToTitleScreen(System.Boolean)">
            <summary>
            Return to the title screen
            </summary>
            <param name="save">If the current game should be saved</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.EndGame(System.Boolean)">
            <summary>
            End the current game
            </summary>
            <param name="save">If the current game should be saved</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.OnSceneUpdated(AdventureFramework.Rendering.SceneFrame)">
            <summary>
            Handle scene updating
            </summary>
            <param name="frame">The updated frame</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.OnGameEnded(AdventureFramework.GameStructure.EExitMode,System.Boolean)">
            <summary>
            Handle game ended
            </summary>
            <param name="mode">The exit mode</param>
            <param name="save">The save mode</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.ReactToInput(System.String)">
            <summary>
            React to input
            </summary>
            <param name="input">The input to react to</param>
            <returns>A result detailing the reaction</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.EnterGame(System.Int32,System.Int32)">
            <summary>
            Enter the game
            </summary>
            <param name="width">The width of the game</param>
            <param name="height">The height of the game</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.GetScene">
            <summary>
            Get a scene based on the current game
            </summary>
            <returns>A constructed frame of the scene</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.GetScene(System.Int32,System.Int32)">
            <summary>
            Get a scene based on the current game
            </summary>
            <param name="width">The width of the scene</param>
            <param name="height">The height of the scene</param>
            <returns>A constructed frame of the scene</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.GetScene(System.Int32,System.Int32,System.String)">
            <summary>
            Get a scene based on the current game
            </summary>
            <param name="width">The width of the scene</param>
            <param name="height">The height of the scene</param>
            <param name="messageToUser">A message to the user</param>
            <returns>A constructed frame of the scene</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.SaveGameAsXML">
            <summary>
            Save the game as xml
            </summary>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.SaveGameAsXML(System.String@)">
            <summary>
            Save the game as xml
            </summary>
            <param name="message">Any message regarding the save</param>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.SaveGameAsEncyptedXML">
            <summary>
            Save the game as encrypted xml
            </summary>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.SaveGameAsEncyptedXML(System.String@)">
            <summary>
            Save the game as encrypted xml
            </summary>
            <param name="message">Any message regarding the save</param>
            <returns>If the save was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.LoadGameAsXML">
            <summary>
            Load a game from an xml file
            </summary>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.LoadGameAsXML(System.String@)">
            <summary>
            Load a game from an xml file
            </summary>
            <param name="message">Any message regarding the load</param>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.LoadGameAsEncryptedXML">
            <summary>
            Load a game from an encrypted xml file
            </summary>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.LoadGameAsEncryptedXML(System.String@)">
            <summary>
            Load a game from an encrypted xml file
            </summary>
            <param name="message">Any message regarding the load</param>
            <returns>If the load was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.OnHandlePlayerDied(System.String,System.String)">
            <summary>
            Handle player deaths
            </summary>
            <param name="titleMessage">A title message to display</param>
            <param name="reason">A reason for the death</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.GetAllObjectsWithAdditionalCommands">
            <summary>
            Get all objects in this Game (that are within the current scope) that implement IImplementOwnActions
            </summary>
            <returns>All IImplementOwnActions objects</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.IsValidActionableCommand(System.String)">
            <summary>
            Get if a string is a valid ActionableCommand
            </summary>
            <param name="command">The command to search for</param>
            <returns>True if the command was fouund, else false</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.FindActionableCommand(System.String)">
            <summary>
            Find a ActionableCommand in this Games IImplementOwnActions objects
            </summary>
            <param name="command">The command to search for</param>
            <returns>The first ActionableCommand whose Command property matches the command parameter</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.FindIImplementOwnActionsObject(System.String)">
            <summary>
            Find a IImplementOwnActions in this objects IImplementOwnActions objects
            </summary>
            <param name="command">The command to search for</param>
            <returns>The first IImplementOwnActions object whose Command property matches the command parameter</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.FindRootNode(System.Xml.XmlDocument)">
            <summary>
            Find the root node in an XML document for a Game
            </summary>
            <param name="doc">The XmlDocument to search for the root node in</param>
            <returns>The root node</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.digForRootNode(System.Xml.XmlNode)">
            <summary>
            Recursively dig for a root node
            </summary>
            <param name="node">The parent node</param>
            <returns>The root node, if it is found</returns>
        </member>
        <member name="M:AdventureFramework.GameStructure.Game.isRootNode(System.Xml.XmlNode)">
            <summary>
            Get if a XmlNode is the root node for a Game object
            </summary>
            <param name="node">The node to check</param>
            <returns>If the node was the root</returns>
        </member>
        <member name="P:AdventureFramework.GameStructure.Game.Player">
            <summary>
            Get or set the player
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.Game.Overworld">
            <summary>
            Get or set the Overworld
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.Game.Name">
            <summary>
            Get or set the name
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.Game.Description">
            <summary>
            Get or set the description
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.Game.HasEnded">
            <summary>
            Get if this game has ended
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.Game.TitleScreen">
            <summary>
            Get or set this Games title screen
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.Game.CompletionScreen">
            <summary>
            Get or set this Games completion screen
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.Game.CurrentScene">
            <summary>
            Get the current SceneFrame
            </summary>
        </member>
        <member name="E:AdventureFramework.GameStructure.Game.SceneUpdated">
            <summary>
            Occurs when the scene is updated
            </summary>
        </member>
        <member name="E:AdventureFramework.GameStructure.Game.Ended">
            <summary>
            Occurs when the game has ended
            </summary>
        </member>
        <member name="E:AdventureFramework.GameStructure.Game.Completed">
            <summary>
            Occurs when the game has been completed
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.Game.CompletionCondition">
            <summary>
            Get or set the completion condition
            </summary>
        </member>
        <member name="T:AdventureFramework.GameStructure.GameCreator">
            <summary>
            Delegate used for creating new Game's
            </summary>
            <returns>A game created by the delegate</returns>
        </member>
        <member name="T:AdventureFramework.GameStructure.EGameCommand">
            <summary>
            Enumeration of game commands
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EGameCommand.NEW">
            <summary>
            New game
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EGameCommand.SAVE">
            <summary>
            Save the game
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EGameCommand.LOAD">
            <summary>
            Load a game
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EGameCommand.EXIT">
            <summary>
            Exit the game
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EGameCommand.KEYON">
            <summary>
            Turn the key on
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EGameCommand.KEYOFF">
            <summary>
            Turn the key off
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EGameCommand.COMMANDSON">
            <summary>
            Turn commands on
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EGameCommand.COMMANDSOFF">
            <summary>
            Turn commands off
            </summary>
        </member>
        <member name="T:AdventureFramework.GameStructure.CompletionCheck">
            <summary>
            Delgate used for completion checks
            </summary>
            <returns>Returns if the condition if fulfilled</returns>
        </member>
        <member name="T:AdventureFramework.Rendering.SceneDrawer">
            <summary>
            A class for constructing and drawing SceneFrame's
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneDrawer.leftBoundaryCharacter">
            <summary>
            Get the character used for left boundaries
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneDrawer.rightBoundaryCharacter">
            <summary>
            Get the character used for right boundaries
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneDrawer.deviderCharacter">
            <summary>
            Get the screen devider character
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneDrawer.key">
            <summary>
            Get or set the type of key to use
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.SceneDrawer.displayCommands">
            <summary>
            Get or set if commands are displayed
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.ConstuctScene(AdventureFramework.Locations.Room,AdventureFramework.Interaction.Inhabitants.PlayableCharacter,System.Int32,System.Int32,System.String)">
            <summary>
            Construct a scene
            </summary>
            <param name="room">The room to construct</param>
            <param name="player">The player</param>
            <param name="width">The width of the scene</param>
            <param name="height">The height of the scene</param>
            <param name="message">Any additional message</param>
            <returns>A String detailing the scene</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.DetermineLinesInString(System.String)">
            <summary>
            Determine the amount of lines in a string
            </summary>
            <param name="input">The input to determine the amount of lines from</param>
            <returns>The amount of lines in the string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.ConstructPaddedArea(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Construct a padded area
            </summary>
            <param name="leftBoundary">The left boundary string</param>
            <param name="rightBoundary">The right boundary string</param>
            <param name="width">The width of the padded area</param>
            <param name="height">The height of the padded area</param>
            <returns>A constructed padded area</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.constructDevider(System.Int32)">
            <summary>
            Construct a deviding horizontal line
            </summary>
            <param name="width">The width of the devider</param>
            <returns>A constructed devider</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.ConstructDevider(System.Int32,System.String,System.String,System.String)">
            <summary>
            Construct a deviding horizontal line
            </summary>
            <param name="width">The width of the devider</param>
            <param name="leftBoundary">The left boundary string</param>
            <param name="deviderString">The deviding string</param>
            <param name="rightBoundary">The right boundary string</param>
            <returns>A constructed devider</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.constructWhiteSpaceWithBoundaryDevider(System.Int32,System.String,System.String)">
            <summary>
            Construct a deviding horizontal line
            </summary>
            <param name="width">The width of the devider</param>
            <param name="leftBoundary">The left boundary string</param>
            <param name="rightBoundary">The right boundary string</param>
            <returns>A constructed devider</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.constructWhitespaceString(System.Int32)">
            <summary>
            Construct a string made of whitespace
            </summary>
            <param name="width">The width of the whitespace</param>
            <returns>A string constructed of whitespace</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.ConstructCentralisedString(System.String,System.Int32,System.String,System.String)">
            <summary>
            Construct a centralised string, ready for display
            </summary>
            <param name="displayString">The string to pad</param>
            <param name="width">The desired overall width of the padded string</param>
            <param name="leftBoundary">The left boundary string</param>
            <param name="rightBoundary">The right boundary string</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.ConstructWrappedPaddedString(System.String,System.Int32)">
            <summary>
            Construct a wrapped padded string, ready for display
            </summary>
            <param name="displayString">The string to pad</param>
            <param name="width">The desired overall width of the padded string</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.ConstructWrappedPaddedString(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Construct a wrapped padded string, ready for display
            </summary>
            <param name="displayString">The string to pad</param>
            <param name="width">The desired overall width of the padded string</param>
            <param name="leftBoundary">The left boundary string</param>
            <param name="rightBoundary">The right boundary string</param>
            <param name="centralise">set if the string should be centralised</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.extractNextWordFromString(System.String@)">
            <summary>
            Extract the next word from a string
            </summary>
            <param name="input">The input string</param>
            <returns>The extracted work</returns>
        </member>
        <member name="M:AdventureFramework.Rendering.SceneDrawer.drawRoomMap(AdventureFramework.Locations.Room,AdventureFramework.Rendering.EKeyType,System.Int32)">
            <summary>
            Draw a room map
            </summary>
            <param name="room">The room to draw</param>
            <param name="width">The allocated with to draw within</param>
            <param name="key">The type of key to draw</param>
            <returns>A map of the room in a String</returns>
        </member>
        <member name="P:AdventureFramework.Rendering.SceneDrawer.Key">
            <summary>
            Get or set the type of key to use
            </summary>
        </member>
        <member name="P:AdventureFramework.Rendering.SceneDrawer.DisplayCommands">
            <summary>
            Get or set if commands are displayed
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.EKeyType">
            <summary>
            Enumeration of key types
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EKeyType.None">
            <summary>
            No key
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EKeyType.Full">
            <summary>
            Full key
            </summary>
        </member>
        <member name="F:AdventureFramework.Rendering.EKeyType.Dynamic">
            <summary>
            Dynamic key, only show relevant key items
            </summary>
        </member>
        <member name="T:AdventureFramework.GameStructure.GameEndedEventArgs">
            <summary>
            Event arguments for end of game events
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.GameEndedEventArgs.exitMode">
            <summary>
            Get or set the exit mode
            </summary>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameEndedEventArgs.#ctor(AdventureFramework.GameStructure.EExitMode)">
            <summary>
            Initialize a new instance of the GameEndedEventArgs class
            </summary>
            <param name="mode">The type of exit to use</param>
        </member>
        <member name="P:AdventureFramework.GameStructure.GameEndedEventArgs.ExitMode">
            <summary>
            Get the exit mode
            </summary>
        </member>
        <member name="T:AdventureFramework.GameStructure.GameEndedEventHandler">
            <summary>
            Event handler for game ended events
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AdventureFramework.GameStructure.EExitMode">
            <summary>
            Enumeration of exit modes
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EExitMode.ExitApplication">
            <summary>
            Exit the application
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.EExitMode.ReturnToTitleScreen">
            <summary>
            Return to the title screen
            </summary>
        </member>
        <member name="T:AdventureFramework.GameStructure.GameFlow">
            <summary>
            Represents a class for controling the flow of a Game
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.GameFlow.game">
            <summary>
            Get or set the game
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.GameFlow.creator">
            <summary>
            Get or set the game creator 
            </summary>
        </member>
        <member name="F:AdventureFramework.GameStructure.GameFlow.errorPrefix">
            <summary>
            Get or set the error prefix
            </summary>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.#ctor">
            <summary>
            Initialize a new instance of the GameIOFlow class
            </summary>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.#ctor(AdventureFramework.GameStructure.GameCreator)">
            <summary>
            Initialize a new instance of the GameIOFlow class
            </summary>
            <param name="gameCreator">A game creator to create the GameFlow.Game property from</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.#ctor(AdventureFramework.GameStructure.GameCreationHelper)">
            <summary>
            Initialize a new instance of the GameIOFlow class
            </summary>
            <param name="helper">A game helper to create the GameFlow.Creator property from</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.Begin">
            <summary>
            Begin the game
            </summary>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.EnterGameLoop">
            <summary>
            Enter the game loop
            </summary>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.UpdateScreenWithCurrentFrame(System.String)">
            <summary>
            Update the screen with the current SceneFrame, provided by the GameFlow.Game property
            </summary>
            <param name="message">An additional message to display to the user</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.DrawScene(AdventureFramework.Rendering.SceneFrame)">
            <summary>
            Draw a SceneFrame on the console window
            </summary>
            <param name="frame">The frame to draw</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.OnSceneUpdated(AdventureFramework.Rendering.SceneFrame)">
            <summary>
            Handle scene updating
            </summary>
            <param name="frame">The new frame</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.OnGameEnded(AdventureFramework.GameStructure.EExitMode)">
            <summary>
            Handle the Game ending
            </summary>
            <param name="exitMode">The exit mode from the game</param>
        </member>
        <member name="M:AdventureFramework.GameStructure.GameFlow.OnGameCompleted">
            <summary>
            Handle the Game completion
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.GameFlow.Game">
            <summary>
            Get the Game
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.GameFlow.Creator">
            <summary>
            Get or set the game creator 
            </summary>
        </member>
        <member name="P:AdventureFramework.GameStructure.GameFlow.ErrorPrefix">
            <summary>
            Get or set the error prefix
            </summary>
        </member>
        <member name="T:AdventureFramework.IO.TextParser">
            <summary>
            An object used for parsing text into in game interactions
            </summary>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.TryParseToECardinalDirection(System.String,AdventureFramework.Locations.ECardinalDirection@)">
            <summary>
            Try and parse a string to an ECardinalDirection
            </summary>
            <param name="obj">The string to parse</param>
            <param name="direction">The direction</param>
            <returns>The result of the parse</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.IsTextCardinalDirection(System.String)">
            <summary>
            Get if text is a ECardinalDirection
            </summary>
            <param name="input">The input to check</param>
            <returns>True is the input is a cardinal direction</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.TryParseToECommand(System.String,AdventureFramework.Interaction.Inhabitants.ECommand@)">
            <summary>
            Try and parse a string to a ECommand
            </summary>
            <param name="obj">The string to parse</param>
            <param name="command">The command</param>
            <returns>The result of the parse</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.IsCommand(System.String)">
            <summary>
            Get if text is a ECommand
            </summary>
            <param name="input">The input to check</param>
            <returns>True is the input is a comman</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.TryParseToEGameCommand(System.String,AdventureFramework.GameStructure.EGameCommand@)">
            <summary>
            Try and parse a string to a EGameCommand
            </summary>
            <param name="obj">The string to parse</param>
            <param name="command">The command</param>
            <returns>The result of the parse</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.IsEGameCommand(System.String)">
            <summary>
            Get if text is a EGameCommand
            </summary>
            <param name="input">The input to check</param>
            <returns>True is the input is a comman</returns>
        </member>
        <member name="M:AdventureFramework.IO.TextParser.ReactToInput(System.String,AdventureFramework.GameStructure.Game,System.String@)">
            <summary>
            React to an input string
            </summary>
            <param name="input">The input to action</param>
            <param name="game">The game to action the input on</param>
            <param name="result">Any result of the reaction</param>
            <returns>The reaction to the input</returns>
        </member>
        <member name="T:AdventureFramework.Interaction.Inhabitants.Conversation">
            <summary>
            Represents an in-game conversation with a character
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.Conversation.lines">
            <summary>
            Get or set the lines of the convesation
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.Conversation.currentLine">
            <summary>
            Get or set the current line
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Conversation.#ctor">
            <summary>
            Initialize a new instance of the Conversation class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Conversation.#ctor(System.String[])">
            <summary>
            Initialize a new instance of the Conversation class
            </summary>
            <param name="lines">The lines to add in this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Conversation.#ctor(AdventureFramework.Interaction.Inhabitants.ConversationElement[])">
            <summary>
            Initialize a new instance of the Conversation class
            </summary>
            <param name="lines">The lines to add in this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Conversation.Reset">
            <summary>
            Reset this conversation
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Conversation.NextLine">
            <summary>
            Get the next line of the conversation
            </summary>
            <returns>The next line of the conversation</returns>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Conversation.AddLine(System.String)">
            <summary>
            Add a line to this conversation
            </summary>
            <param name="line">The line to add to this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Conversation.AddLine(AdventureFramework.Interaction.Inhabitants.ConversationElement)">
            <summary>
            Add a line to this conversation
            </summary>
            <param name="line">The line to add to this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.Conversation.Truncate">
            <summary>
            Truncate this conversation at the current line
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.Conversation.Lines">
            <summary>
            Get the lines of this conversation
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.Conversation.CurrentLine">
            <summary>
            Get the current line of this conversation
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.Conversation.HasSomeRemainingLines">
            <summary>
            Get if this has some remaining lines
            </summary>
        </member>
        <member name="T:AdventureFramework.Rendering.EndScreen">
            <summary>
            Represents a screen for when the game ends
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.EndScreen.#ctor">
            <summary>
            Initialize a new instance of the EndScreen class
            </summary>
        </member>
        <member name="M:AdventureFramework.Rendering.EndScreen.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initialize a new instance of the EndScreen class
            </summary>
            <param name="message">A message to show the user</param>
            <param name="reason">The reason for the end</param>
            <param name="width">The width of the EndScreen</param>
            <param name="height">The height of the EndScreen</param>
        </member>
        <member name="T:AdventureFramework.Interaction.Decision">
            <summary>
            Represents a boolean decision
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Decision.result">
            <summary>
            Get or set the result of the Decision
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Decision.reason">
            <summary>
            Get or set a reason for this Decision
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Decision.#ctor(AdventureFramework.Interaction.EReactionToInput)">
            <summary>
            Initialize a new instance of the Decision class
            </summary>
            <param name="result">The result of the decision</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Decision.#ctor(AdventureFramework.Interaction.EReactionToInput,System.String)">
            <summary>
            Initialize a new instance of the Decision class
            </summary>
            <param name="result">The result of the decision</param>
            <param name="reason">The reason for this decision</param>
        </member>
        <member name="P:AdventureFramework.Interaction.Decision.Result">
            <summary>
            Get the result of the Decision
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Decision.Reason">
            <summary>
            Get a reason for this Decision
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.EReactionToInput">
            <summary>
            Enuemration of reactions to input
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EReactionToInput.CouldReact">
            <summary>
            Could react to input
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EReactionToInput.CouldntReact">
            <summary>
            Couldn't react to input
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EReactionToInput.SelfContainedReaction">
            <summary>
            A self contained reaction to an input
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.Room">
            <summary>
            Represents a room
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.exits">
            <summary>
            Get o set the exits
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.inhabitants">
            <summary>
            Get or set the inhabitants of this Room
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.items">
            <summary>
            Get or set the items in this Room
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Room.additionalCommands">
            <summary>
            Get or set the additional actionable commands
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor">
            <summary>
            Initialize a new instance of the Room class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.Exit[])">
            <summary>
            Initialize a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exits">The exits from this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.InteractionDelegate,AdventureFramework.Locations.Exit[])">
            <summary>
            Initialize a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exits">The exits from this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Items.Item[])">
            <summary>
            Initialize a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.InteractionDelegate,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Items.Item[])">
            <summary>
            Initialize a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Items.Item[],AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter[])">
            <summary>
            Initialize a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
            <param name="inhabitants">The inhabitants in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Locations.InteractionDelegate,AdventureFramework.Locations.Exit[],AdventureFramework.Interaction.Items.Item[],AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter[])">
            <summary>
            Initialize a new instance of the Room class
            </summary>
            <param name="name">This rooms name</param>
            <param name="description">This rooms description</param>
            <param name="interaction">This rooms interaction</param>
            <param name="exits">The exits from this room</param>
            <param name="items">The items in this room</param>
            <param name="inhabitants">The inhabitants in this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.AddInhabitant(AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter)">
            <summary>
            Add an inhabitant to this room
            </summary>
            <param name="inhabitant">The inhabitant to add</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.AddItem(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Add an item to this room
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.AddExit(AdventureFramework.Locations.Exit)">
            <summary>
            Add an exit to this room
            </summary>
            <param name="exit">The exit to add</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveItemFromRoom(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Remove an item from the room
            </summary>
            <param name="item">The item to remove</param>
            <returns>The item removed from this room</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveItemFromRoom(System.String)">
            <summary>
            Remove an item from the room
            </summary>
            <param name="itemName">The name of the item to remove</param>
            <returns>If the item was removed correctly</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveItemFromRoom(System.String,AdventureFramework.Interaction.Items.Item@)">
            <summary>
            Remove an item from the room
            </summary>
            <param name="itemName">The name of the item to remove</param>
            <param name="removedItem">The item removed from this room</param>
            <returns>If the item was removed correctly</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveInhabitantFromRoom(AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter)">
            <summary>
            Remove an inhabitant from the room
            </summary>
            <param name="inhabitant">The inhabitant to remove</param>
            <returns>The inhabitant removed from this room</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveInhabitantFromRoom(System.String)">
            <summary>
            Remove an inhabitant from the room
            </summary>
            <param name="inhabitantName">The name of the inhabitant to remove</param>
            <returns>If the inhabitant was removed correctly</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.RemoveInhabitantFromRoom(System.String,AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter@)">
            <summary>
            Remove an inhabitant from the room
            </summary>
            <param name="inhabitantName">The name of the inhabitant to remove</param>
            <param name="removedInhabitant">The inhabitant removed from this room</param>
            <returns>If the inhabitant was removed correctly</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.CanMove(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Test if a move is possible
            </summary>
            <param name="direction">The direction to test</param>
            <returns>If a move in the specified direction is possible</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.InteractWithItem(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Interact with a specified item
            </summary>
            <param name="item">The item to interact with</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.OnExaminded">
            <summary>
            Examine this Room
            </summary>
            <returns>A description of the examination of this Room</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.getItemsAsList">
            <summary>
            Get all Items as a list in a string
            </summary>
            <returns>A list of all</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.GetExaminableObjects">
            <summary>
            Get everything that can be examined within this room
            </summary>
            <returns>An array of everything that can be examined in this room</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.HasLockedExitInDirection(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get if this room has a locked exit in a specified direction
            </summary>
            <param name="direction">The directon to check</param>
            <returns>If there is a locked exit in the specified direction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.HasUnlockedExitInDirection(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get if this room has a unlocked exit in a specified direction
            </summary>
            <param name="direction">The directon to check</param>
            <returns>If there is a unlocked exit in the specified direction</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsExit(AdventureFramework.Locations.Exit)">
            <summary>
            Get if this Room contains an exit
            </summary>
            <param name="exit">The exit to check for</param>
            <returns>True if the exit exists, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsExit(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get if this Room contains an exit
            </summary>
            <param name="direction">The direction of the exit to check for</param>
            <returns>True if the exit exists, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindExit(AdventureFramework.Locations.ECardinalDirection,AdventureFramework.Locations.Exit@)">
            <summary>
            Find an exit
            </summary>
            <param name="direction">The exits direction</param>
            <param name="exit">The exit</param>
            <returns>True if the exit was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsItem(AdventureFramework.Interaction.Items.Item)">
            <summary>
            Get if this Room contains an item
            </summary>
            <param name="item">The item to check for</param>
            <returns>True if the item is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsItem(System.String)">
            <summary>
            Get if this Room contains an item
            </summary>
            <param name="itemName">The item name to check for</param>
            <returns>True if the item is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindItem(System.String,AdventureFramework.Interaction.Items.Item@)">
            <summary>
            Find an item
            </summary>
            <param name="itemName">The items name</param>
            <param name="item">The item</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindItemByID(System.String,AdventureFramework.Interaction.Items.Item@)">
            <summary>
            Find an item
            </summary>
            <param name="itemID">The items ID</param>
            <param name="item">The item</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsInhabitant(AdventureFramework.Interaction.Inhabitants.Character)">
            <summary>
            Get if this Room contains an inhabitant
            </summary>
            <param name="inhabitant">The inhabitant to check for</param>
            <returns>True if the inhabitant is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.ContainsInhabitant(System.String)">
            <summary>
            Get if this Room contains an inhabitant
            </summary>
            <param name="inhabitant">The item name to check for</param>
            <returns>True if the item is in this room, else false</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.FindInhabitant(System.String,AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter@)">
            <summary>
            Find an inhabitant
            </summary>
            <param name="inhabitant">The inhabitant name</param>
            <param name="character">The inhabitant</param>
            <returns>True if the inhabitant was found</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.SpecifyConditionalDescription(AdventureFramework.Interaction.ConditionalDescription)">
            <summary>
            Sepecify a conditional description of this room
            </summary>
            <param name="description">The description of this room</param>
        </member>
        <member name="M:AdventureFramework.Locations.Room.GetAllObjectsWithAdditionalCommands">
            <summary>
            Get all IImplementOwnActions objects within this Room
            </summary>
            <returns>An array of all IImplementOwnActions objects within this rrom</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Room.OnReactToAction(AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            Handle reactions to ActionableCommands
            </summary>
            <param name="command">The command to react to</param>
            <returns>The result of the command</returns>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Exits">
            <summary>
            Get the exits
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.UnlockedExits">
            <summary>
            Get all unlocked exits
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Inhabitants">
            <summary>
            Get the inhabitants of this Room
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Items">
            <summary>
            Get the items in this Room
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Interaction">
            <summary>
            Get or set the interaction
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Room.Item(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get an exit
            </summary>
            <param name="direction">The direction of an exit</param>
            <returns>The exit</returns>
        </member>
        <member name="T:AdventureFramework.Locations.ECardinalDirection">
            <summary>
            Enumeration of cardinal directions
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.ECardinalDirection.North">
            <summary>
            North (up)
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.ECardinalDirection.East">
            <summary>
            East (right)
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.ECardinalDirection.South">
            <summary>
            South (down)
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.ECardinalDirection.West">
            <summary>
            West (left)
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.InteractionDelegate">
            <summary>
            Delegate for interacting with objects
            </summary>
            <param name="item">The item to interact with</param>
            <param name="target">The target interaction element</param>
            <returns>The result of the interaction</returns>
        </member>
        <member name="T:AdventureFramework.Interaction.InteractionResult">
            <summary>
            Represents a result of an interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.InteractionResult.effect">
            <summary>
            Get or set the effect
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.InteractionResult.desciption">
            <summary>
            Get or set the descritpion of this InteractionResult
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.InteractionResult.item">
            <summary>
            Get or set the item used in the interaction
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.#ctor">
            <summary>
            Initialize a new instance of the InteractionResult class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.#ctor(AdventureFramework.Interaction.EInteractionEffect,AdventureFramework.Interaction.Items.Item)">
            <summary>
            Initialize a new instance of the InteractionResult class
            </summary>
            <param name="effect">The effect of this interaction</param>
            <param name="item">The item used in this interaction</param>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.#ctor(AdventureFramework.Interaction.EInteractionEffect,AdventureFramework.Interaction.Items.Item,System.String)">
            <summary>
            Initialize a new instance of the InteractionResult class
            </summary>
            <param name="effect">The effect of this interaction</param>
            <param name="item">The item used in this interaction</param>
            <param name="descriptionOfEffect">A description of the effect</param>
        </member>
        <member name="M:AdventureFramework.Interaction.InteractionResult.#ctor(AdventureFramework.Interaction.EInteractionEffect,System.String)">
            <summary>
            Initialize a new instance of the InteractionResult class
            </summary>
            <param name="effect">The effect of this interaction</param>
            <param name="descriptionOfEffect">A description of the effect</param>
        </member>
        <member name="P:AdventureFramework.Interaction.InteractionResult.Effect">
            <summary>
            Get the effect
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.InteractionResult.Desciption">
            <summary>
            Get the descritpion of this InteractionResult
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.InteractionResult.Item">
            <summary>
            Get the item used in the interaction
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.EInteractionEffect">
            <summary>
            Enumeration of interaction effects
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.NoEffect">
            <summary>
            No effect to the interaction
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.ItemUsedUp">
            <summary>
            Item was used up
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.ItemMorphed">
            <summary>
            Item morphed into another object
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.EInteractionEffect.FatalEffect">
            <summary>
            A fatal effect to the interaction
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter">
            <summary>
            Represents a non-playable character
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.Inhabitants.ITalkative">
            <summary>
            Represents an object that can talk
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.ITalkative.Talk">
            <summary>
            Talk
            </summary>
            <returns>A string representing the conversation</returns>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.conversation">
            <summary>
            Get or set the conversation
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.#ctor">
            <summary>
            Initialize a new instance of the NonPlayableCharacter class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.#ctor(System.String,System.String,AdventureFramework.Interaction.Inhabitants.Conversation)">
            <summary>
            Initialize a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
            <param name="conversation">The conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initialize a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.Inhabitants.Conversation)">
            <summary>
            Initialize a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
            <param name="conversation">The conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.Inhabitants.Conversation,System.Boolean,AdventureFramework.Locations.InteractionDelegate)">
            <summary>
            Initialize a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
            <param name="conversation">The conversation</param>
            <param name="isAlive">Set if this NonPlayableCharacter is alive</param>
            <param name="interaction">Set this NonPlayableCharacter's interaction</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.#ctor(System.String,AdventureFramework.Interaction.Description,AdventureFramework.Interaction.Inhabitants.Conversation,System.Boolean,AdventureFramework.Locations.InteractionDelegate,AdventureFramework.Interaction.ExaminationDelegate)">
            <summary>
            Initialize a new instance of the NonPlayableCharacter class
            </summary>
            <param name="name">The name of this NonPlayableCharacter</param>
            <param name="description">The description of this NonPlayableCharacter</param>
            <param name="conversation">The conversation</param>
            <param name="isAlive">Set if this NonPlayableCharacter is alive</param>
            <param name="interaction">Set this NonPlayableCharacter's interaction</param>
            <param name="examination">Set this NonPlayableCharacter's examination</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.OnTalk">
            <summary>
            Handle talking
            </summary>
            <returns>A string representing the dialogue</returns>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.NonPlayableCharacter.Conversation">
            <summary>
            Get the conversation
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ExaminationDelegate">
            <summary>
            Delegate for examination
            </summary>
            <param name="obj">The object to examine</param>
            <returns>A string representing the result of the examination</returns>
        </member>
        <member name="T:AdventureFramework.Locations.Overworld">
            <summary>
            Represents an entire overworld
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Overworld.regions">
            <summary>
            Get or set the Regions in this Overworld
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Overworld.currentRegion">
            <summary>
            Get or set the current Region
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.#ctor">
            <summary>
            Initialize a new instance of the Overworld class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the Overworld class
            </summary>
            <param name="name">The name of this Overworld</param>
            <param name="description">A description of this Overworld</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.#ctor(System.String,AdventureFramework.Interaction.Description)">
            <summary>
            Initialize a new instance of the Overworld class
            </summary>
            <param name="name">The name of this Overworld</param>
            <param name="description">A description of this Overworld</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.CreateRegion(AdventureFramework.Locations.Region,System.Int32,System.Int32)">
            <summary>
            Create a Region in this Overworld
            </summary>
            <param name="region">The Region to create</param>
            <param name="columnInOverworld">The column of the Region with this Overworld</param>
            <param name="rowInOverworld">The row of the Region within this Overworld</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.MoveRegions(AdventureFramework.Locations.Region)">
            <summary>
            Move to a different Region
            </summary>
            <param name="region">The Region to move to</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.MoveRegion(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Move to a region in a specified direction
            </summary>
            <param name="direction">The direction to move in</param>
            <returns>If a move was sucsessful</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.HasAdjoiningRegion(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get if the Overworld.CurrentRegion prperty has an adjoining Region
            </summary>
            <param name="direction">The direction to check</param>
            <returns>True if there is an adjoining region in the direction specified</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.GetAdjoiningRegion(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Get an adjoining Region
            </summary>
            <param name="direction">The direction of the adjoining Region</param>
            <returns>The adjoining Region, if there is one</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.SetStartRegion(AdventureFramework.Locations.Region)">
            <summary>
            Set the Region to start in
            </summary>
            <param name="region">The Region to start in</param>
        </member>
        <member name="M:AdventureFramework.Locations.Overworld.SetStartRegion(System.Int32)">
            <summary>
            Set the Region to start in
            </summary>
            <param name="index">The index of Region to start in</param>
        </member>
        <member name="P:AdventureFramework.Locations.Overworld.Regions">
            <summary>
            Get the Regions in this Overworld
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Overworld.CurrentRegion">
            <summary>
            Get the current Region
            </summary>
        </member>
        <member name="T:AdventureFramework.Locations.Exit">
            <summary>
            Represents an exit from a GameLocation
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Exit.direction">
            <summary>
            Get or set the direcion of the exit
            </summary>
        </member>
        <member name="F:AdventureFramework.Locations.Exit.isLocked">
            <summary>
            Get if this Exit is locked
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.#ctor">
            <summary>
            Initialize a new instance of the Exit class
            </summary>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.#ctor(AdventureFramework.Locations.ECardinalDirection)">
            <summary>
            Initialize a new instance of the Exit class
            </summary>
            <param name="direction">The direction of the exit</param>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.#ctor(AdventureFramework.Locations.ECardinalDirection,System.Boolean)">
            <summary>
            Initialize a new instance of the Exit class
            </summary>
            <param name="direction">The direction of the exit</param>
            <param name="isLocked">If this exit is locked</param>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.#ctor(AdventureFramework.Locations.ECardinalDirection,System.Boolean,AdventureFramework.Interaction.Description)">
            <summary>
            Initialize a new instance of the Exit class
            </summary>
            <param name="direction">The direction of the exit</param>
            <param name="isLocked">If this exit is locked</param>
            <param name="description">A description of this exit</param>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.GenerateDescription">
            <summary>
            generate a description for this exit
            </summary>
            <returns>The completed Description</returns>
        </member>
        <member name="M:AdventureFramework.Locations.Exit.Unlock">
            <summary>
            Set if this exit is locked
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Exit.Direction">
            <summary>
            Get the direcion of the exit
            </summary>
        </member>
        <member name="P:AdventureFramework.Locations.Exit.IsLocked">
            <summary>
            Get if this Exit is locked
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ActionableCommand">
            <summary>
            Represents an actionable command
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ActionableCommand.command">
            <summary>
            Get or set the custom command
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ActionableCommand.description">
            <summary>
            Get or set the description of the command
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.ActionableCommand.action">
            <summary>
            Get or set the action of the command
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.#ctor">
            <summary>
            Initialize a new instance of the ActionableCommand class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the ActionableCommand class
            </summary>
            <param name="command">The command</param>
            <param name="description">A description of the command</param>
        </member>
        <member name="M:AdventureFramework.Interaction.ActionableCommand.#ctor(System.String,System.String,AdventureFramework.Interaction.ActionDelegate)">
            <summary>
            Initialize a new instance of the ActionableCommand class
            </summary>
            <param name="command">The command</param>
            <param name="description">A description of the command</param>
            <param name="action">The action to the command</param>
        </member>
        <member name="P:AdventureFramework.Interaction.ActionableCommand.Command">
            <summary>
            Get or set the command
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ActionableCommand.Description">
            <summary>
            Get or set the description of the command
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.ActionableCommand.Action">
            <summary>
            Get or set the action of the command
            </summary>
        </member>
        <member name="T:AdventureFramework.Interaction.ActionDelegate">
            <summary>
            Delegate for actions
            </summary>
            <returns>The result of the interaction</returns>
        </member>
        <member name="T:AdventureFramework.Interaction.Inhabitants.ConversationElement">
            <summary>
            Represents an element of a Conversation
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.ConversationElement.line">
            <summary>
            Get or set the line
            </summary>
        </member>
        <member name="F:AdventureFramework.Interaction.Inhabitants.ConversationElement.action">
            <summary>
            Get or set any action to carry out on this line
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.ConversationElement.#ctor">
            <summary>
            Initialize a new instance of the ConversationElement class
            </summary>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.ConversationElement.#ctor(System.String)">
            <summary>
            Initialize a new instance of the ConversationElement class
            </summary>
            <param name="line">Specify the line in this conversation</param>
        </member>
        <member name="M:AdventureFramework.Interaction.Inhabitants.ConversationElement.#ctor(System.String,System.Action)">
            <summary>
            Initialize a new instance of the ConversationElement class
            </summary>
            <param name="line">Specify the line in this conversation</param>
            <param name="action">Specify any action to be carried out with this line</param>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.ConversationElement.Line">
            <summary>
            Get or set the line
            </summary>
        </member>
        <member name="P:AdventureFramework.Interaction.Inhabitants.ConversationElement.Action">
            <summary>
            Get or set any action to carry out on this line
            </summary>
        </member>
    </members>
</doc>
