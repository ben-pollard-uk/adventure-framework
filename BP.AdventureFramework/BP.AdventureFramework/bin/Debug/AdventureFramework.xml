<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BP.AdventureFramework</name>
    </assembly>
    <members>
        <member name="T:BP.AdventureFramework.Interaction.ActionCallback">
            <summary>
            Represents the callback for a action.
            </summary>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.Command">
            <summary>
            Enumeration of commands.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.Command.Use">
            <summary>
            Use an item.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.Command.Take">
            <summary>
            Take an item.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.Command.Examine">
            <summary>
            Examine something.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.Command.Drop">
            <summary>
            Drop an item.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.Command.Talk">
            <summary>
            Talk to a non-playable character.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.Condition">
            <summary>
            Represents a callback for conditions.
            </summary>
            <returns>The result of the condition.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ExaminationCallback">
            <summary>
            Represents the callback for examinations.
            </summary>
            <param name="obj">The object to examine.</param>
            <returns>A string representing the result of the examination.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ExaminationResults">
            <summary>
            Enumeration of examination results.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.ExaminationResults.DescriptionReturned">
            <summary>
            No effect to the interaction on either the item or the target.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.ExaminationResults.SelfContained">
            <summary>
            Any other self contained effect.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.InteractionCallback">
            <summary>
            Represents the callback for interacting with objects.
            </summary>
            <param name="item">The item to interact with.</param>
            <param name="target">The target interaction element.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.InteractionEffect">
            <summary>
            Enumeration of interaction effects.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.InteractionEffect.NoEffect">
            <summary>
            No effect to the interaction on either the item or the target.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.InteractionEffect.ItemUsedUp">
            <summary>
            Item was used up.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.InteractionEffect.ItemMorphed">
            <summary>
            Item morphed into another object.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.InteractionEffect.FatalEffect">
            <summary>
            A fatal effect to the interaction.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.InteractionEffect.TargetUsedUp">
            <summary>
            The target was used up.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.InteractionEffect.SelfContained">
            <summary>
            Any other self contained effect.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ITransferableDelegation">
            <summary>
            Represents any object that can transfer delegation.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ITransferableDelegation.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this object.
            </summary>
            <returns>The ID as a string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ITransferableDelegation.TransferFrom(BP.AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this object from a source ITransferableDelegation object.
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ITransferableDelegation.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all children that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation of this object.</param>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ReactionToInput">
            <summary>
            Enumeration of reactions to input.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.ReactionToInput.CouldReact">
            <summary>
            Could react to input.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.ReactionToInput.CouldntReact">
            <summary>
            Couldn't react to input.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.ReactionToInput.SelfContainedReaction">
            <summary>
            A self contained reaction to an input.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ReasonEventHandler">
            <summary>
            Event handler for reason events.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ActionableCommand">
            <summary>
            Represents an actionable command.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ActionableCommand.Command">
            <summary>
            Get or set the command.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ActionableCommand.Description">
            <summary>
            Get or set the description of the command.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ActionableCommand.Action">
            <summary>
            Get or set the action of the command.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ActionableCommand.IsPlayerVisible">
            <summary>
            Get or set if this is visible to the player.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ActionableCommand.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ActionableCommand class.
            </summary>
            <param name="command">The command.</param>
            <param name="description">A description of the command.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ActionableCommand.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ActionableCommand class.
            </summary>
            <param name="command">The command.</param>
            <param name="description">A description of the command.</param>
            <param name="isPlayerVisible">Specify it this command is visible to the player.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ActionableCommand.#ctor(System.String,System.String,System.Boolean,BP.AdventureFramework.Interaction.ActionCallback)">
            <summary>
            Initializes a new instance of the ActionableCommand class.
            </summary>
            <param name="command">The command.</param>
            <param name="description">A description of the command.</param>
            <param name="isPlayerVisible">Specify it this command is visible to the player.</param>
            <param name="action">The action callback to the command.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ActionableCommand.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this ActionableCommand.
            </summary>
            <returns>The ID of this object as a string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ActionableCommand.TransferFrom(BP.AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this ActionableCommand from a source ITransferableDelegation object.
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ActionableCommand.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this ActionableCommand that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ActionableComand.</param>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ExaminationResult">
            <summary>
            Represents the result of an examination.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ExaminationResult.Type">
            <summary>
            Get the type of result.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminationResult.#ctor">
            <summary>
            Initializes a new instance of the ExaminationResult class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminationResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ExaminationResult class.
            </summary>
            <param name="description">A description of the result.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminationResult.#ctor(System.String,BP.AdventureFramework.Interaction.ExaminationResults)">
            <summary>
            Initializes a new instance of the ExaminationResult class.
            </summary>
            <param name="description">A description of the result.</param>
            <param name="type">The type of this result.</param>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.Conversation">
            <summary>
            Represents an in-game conversation with a character.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Conversation.Lines">
            <summary>
            Get the lines of this conversation.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Conversation.CurrentLine">
            <summary>
            Get the current line of this conversation.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Conversation.HasSomeRemainingLines">
            <summary>
            Get if this has some remaining lines.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Conversation.RepeatLastElement">
            <summary>
            Get or set if the last element of the conversation should be repeated.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Conversation.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the Conversation class.
            </summary>
            <param name="lines">The lines to add in this conversation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Conversation.#ctor(BP.AdventureFramework.Characters.ConversationElement[])">
            <summary>
            Initializes a new instance of the Conversation class.
            </summary>
            <param name="lines">The lines to add in this conversation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Conversation.Reset">
            <summary>
            Reset this conversation.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Conversation.NextLine">
            <summary>
            Get the next line of the conversation.
            </summary>
            <returns>The next line of the conversation.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Conversation.AddLine(System.String)">
            <summary>
            Add a line to this conversation.
            </summary>
            <param name="line">The line to add to this conversation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Conversation.AddLine(BP.AdventureFramework.Characters.ConversationElement)">
            <summary>
            Add a line to this conversation.
            </summary>
            <param name="line">The line to add to this conversation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Conversation.Truncate">
            <summary>
            Truncate this conversation at the current line.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ReasonEventArgs">
            <summary>
            Event arguments for reason events.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ReasonEventArgs.Reason">
            <summary>
            Get the reason.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ReasonEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ReasonEventArgs class.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.IImplementOwnActions">
            <summary>
            Represents any object that can implement its own actions.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.IImplementOwnActions.AdditionalCommands">
            <summary>
            Get or set the ActionableCommands this object can interact with.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.IImplementOwnActions.ReactToAction(BP.AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            React to an ActionableCommand.
            </summary>
            <param name="command">The command to react to.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.IImplementOwnActions.FindCommand(System.String)">
            <summary>
            Find a command by its name.
            </summary>
            <param name="command">The name of the command to find.</param>
            <returns>The ActionableCommand.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.Result">
            <summary>
            Represents a result.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Result.Desciption">
            <summary>
            Get the description.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Result.#ctor">
            <summary>
            Initializes a new instance of the Result class.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ConditionalDescription">
            <summary>
            Represents a conditional description of an object.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Interaction.ConditionalDescription.falseDescription">
            <summary>
            Get or set the description for when this condition is false
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ConditionalDescription.Condition">
            <summary>
            Get or set the condition
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ConditionalDescription.#ctor(System.String,System.String,BP.AdventureFramework.Interaction.Condition)">
            <summary>
            Initializes anew instance of the ConditionalDescription class.
            </summary>
            <param name="trueDescription">The true description.</param>
            <param name="falseDescription">The false description.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ConditionalDescription.GetDescription">
            <summary>
            Get the description.
            </summary>
            <returns>The description as a string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ConditionalDescription.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this ConditionalDescription.
            </summary>
            <returns>The ID as a string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ConditionalDescription.TransferFrom(BP.AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this ConditionalDescription from a source ITransferableDelegation object.
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ConditionalDescription.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this ConditionalDescription that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ConditionalDescription.</param>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.Description">
            <summary>
            Represents a description of an object.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Description.DefaultDescription">
            <summary>
            Get or set the description.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Description.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Description class
            </summary>
            <param name="description">The description</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Description.GetDescription">
            <summary>
            Get the description.
            </summary>
            <returns>The description.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.ExaminableObject">
            <summary>
            Represents an object that can be examined.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminableObject.ResetIDSeed">
            <summary>
            Reset the ID seed.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ExaminableObject.ID">
            <summary>
            Get this objects ID.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ExaminableObject.Examination">
            <summary>
            Get or set the callback handling all examination of this object.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminableObject.#ctor">
            <summary>
            Initializes a new instance of the ExaminableObject class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminableObject.GenerateID">
            <summary>
            Generate an ID from a name.
            </summary>
            <returns>The generated ID.</returns>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ExaminableObject.Name">
            <summary>
            Get the name of this object.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ExaminableObject.Description">
            <summary>
            Get or set a description of this object.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.ExaminableObject.IsPlayerVisible">
            <summary>
            Get or set if this is player visible.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminableObject.Examime">
            <summary>
            Examine this object.
            </summary>
            <returns>A ExaminationResult detailing the examination of this object.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminableObject.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this ExaminableObject.
            </summary>
            <returns>The ID of this object as a string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminableObject.TransferFrom(BP.AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this ExaminableObject from a source ITransferableDelegation object.
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.ExaminableObject.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this ExaminableObject that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ExaminableObject.</param>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.IInteractWithItem">
            <summary>
            Represents any object that can interact with an item.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.IInteractWithItem.Interact(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Interact with an item.
            </summary>
            <param name="item">The item to interact with.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.Item">
            <summary>
            Represents an item that can be used within the game.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Item.IsTakeable">
            <summary>
            Get or set if this is takeable.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Item.Interaction">
            <summary>
            Get or set the interaction.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Item.MorphicType">
            <summary>
            Get or set the morphic type of this item. This allows correct file IO for the type of this item if it has morphed into a new type.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Item.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the Item class.
            </summary>
            <param name="name">The name of this Item.</param>
            <param name="description">A description of this Item.</param>
            <param name="isTakeable">Specify if this item is takeable.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Item.#ctor(System.String,BP.AdventureFramework.Interaction.Description,System.Boolean)">
            <summary>
            Initializes a new instance of the Item class.
            </summary>
            <param name="name">The name of this Item.</param>
            <param name="description">A description of this Item.</param>
            <param name="isTakeable">Specify if this item is takeable.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Item.Morph(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Handle item morphing.
            </summary>
            <param name="item">The item to morph into.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Item.Use(BP.AdventureFramework.Interaction.IInteractWithItem)">
            <summary>
            Use this item on a target.
            </summary>
            <param name="target">The target to use the item on.</param>
            <retunrs>The result of the interaction.</retunrs>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Item.TransferFrom(BP.AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this ExaminableObject from a source ITransferableDelegation object.
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Item.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this ExaminableObject that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this ExaminableObject.</param>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Item.AdditionalCommands">
            <summary>
            Get or set the ActionableCommands this object can interact with.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Item.ReactToAction(BP.AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            React to an ActionableCommand.
            </summary>
            <param name="command">The command to react to.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Item.FindCommand(System.String)">
            <summary>
            Find a command by it's name.
            </summary>
            <param name="command">The name of the command to find.</param>
            <returns>The ActionableCommand.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Item.Interact(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Interact with an item.
            </summary>
            <param name="item">The item to interact with.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.IExaminable">
            <summary>
            Represents anything that is examinable.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.IExaminable.Name">
            <summary>
            Get the name of this object.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.IExaminable.Description">
            <summary>
            Get or set a description of this object.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.IExaminable.IsPlayerVisible">
            <summary>
            Get if this is player visible.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.IExaminable.Examime">
            <summary>
            Examine this object.
            </summary>
            <returns>A ExaminationResult detailing the examination of this object.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.InteractionResult">
            <summary>
            Represents a result of an interaction.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.InteractionResult.Effect">
            <summary>
            Get the effect.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.InteractionResult.Item">
            <summary>
            Get the item used in the interaction.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.InteractionResult.#ctor">
            <summary>
            Initializes a new instance of the InteractionResult class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.InteractionResult.#ctor(BP.AdventureFramework.Interaction.InteractionEffect,BP.AdventureFramework.Interaction.Item)">
            <summary>
            Initializes a new instance of the InteractionResult class.
            </summary>
            <param name="effect">The effect of this interaction.</param>
            <param name="item">The item used in this interaction.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.InteractionResult.#ctor(BP.AdventureFramework.Interaction.InteractionEffect,BP.AdventureFramework.Interaction.Item,System.String)">
            <summary>
            Initializes a new instance of the InteractionResult class.
            </summary>
            <param name="effect">The effect of this interaction.</param>
            <param name="item">The item used in this interaction.</param>
            <param name="descriptionOfEffect">A description of the effect.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.InteractionResult.#ctor(BP.AdventureFramework.Interaction.InteractionEffect,System.String)">
            <summary>
            Initializes a new instance of the InteractionResult class.
            </summary>
            <param name="effect">The effect of this interaction.</param>
            <param name="descriptionOfEffect">A description of the effect.</param>
        </member>
        <member name="T:BP.AdventureFramework.Interaction.Decision">
            <summary>
            Represents a boolean decision.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Decision.Result">
            <summary>
            Get the result of the Decision.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Interaction.Decision.Reason">
            <summary>
            Get a reason for this Decision.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Decision.#ctor(BP.AdventureFramework.Interaction.ReactionToInput)">
            <summary>
            Initializes a new instance of the Decision class.
            </summary>
            <param name="result">The result of the decision.</param>
        </member>
        <member name="M:BP.AdventureFramework.Interaction.Decision.#ctor(BP.AdventureFramework.Interaction.ReactionToInput,System.String)">
            <summary>
            Initializes a new instance of the Decision class.
            </summary>
            <param name="result">The result of the decision.</param>
            <param name="reason">The reason for this decision.</param>
        </member>
        <member name="T:BP.AdventureFramework.Locations.CardinalDirection">
            <summary>
            Enumeration of cardinal directions.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Locations.CardinalDirection.North">
            <summary>
            North.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Locations.CardinalDirection.East">
            <summary>
            East.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Locations.CardinalDirection.South">
            <summary>
            South.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Locations.CardinalDirection.West">
            <summary>
            West.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Locations.Exit">
            <summary>
            Represents an exit from a GameLocation.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Exit.Direction">
            <summary>
            Get the direction of the exit.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Exit.IsLocked">
            <summary>
            Get if this Exit is locked.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Exit.#ctor(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Initializes a new instance of the Exit class.
            </summary>
            <param name="direction">The direction of the exit.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Exit.#ctor(BP.AdventureFramework.Locations.CardinalDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the Exit class.
            </summary>
            <param name="direction">The direction of the exit.</param>
            <param name="isLocked">If this exit is locked.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Exit.#ctor(BP.AdventureFramework.Locations.CardinalDirection,System.Boolean,BP.AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the Exit class.
            </summary>
            <param name="direction">The direction of the exit.</param>
            <param name="isLocked">If this exit is locked.</param>
            <param name="description">A description of this exit.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Exit.GenerateDescription">
            <summary>
            Generate a description for this exit.
            </summary>
            <returns>The completed Description.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Exit.Unlock">
            <summary>
            Set if this exit is locked.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Locations.GameLocation">
            <summary>
            Represents any location within the game.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.GameLocation.Row">
            <summary>
            Get or set the row of this Room within it's parent location.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.GameLocation.Column">
            <summary>
            Get or set the column of this Room within it's parent location.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.GameLocation.HasBeenVisited">
            <summary>
            Get if this location has been visited.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Locations.GameLocation.#ctor">
            <summary>
            Initializes a new instance of the GameLocation class
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Locations.GameLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the GameLocation class.
            </summary>
            <param name="columnWithinParnt">The column this GameLocation resides within its parent.</param>
            <param name="rowWithinParent">The row this GameLocation resides within it's parent.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.GameLocation.MovedInto(System.Nullable{BP.AdventureFramework.Locations.CardinalDirection})">
            <summary>
            Handle movement into this GameLocation.
            </summary>
            <param name="fromDirection">The direction movement into this GameLocation is from. Use null if there should be no direction.</param>
        </member>
        <member name="T:BP.AdventureFramework.Locations.Overworld">
            <summary>
            Represents an entire overworld.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Overworld.Regions">
            <summary>
            Get the Regions in this Overworld.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Overworld.CurrentRegion">
            <summary>
            Get the current Region.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.#ctor">
            <summary>
            Initializes a new instance of the Overworld class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Overworld class.
            </summary>
            <param name="name">The name of this Overworld.</param>
            <param name="description">A description of this Overworld.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.#ctor(System.String,BP.AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the Overworld class.
            </summary>
            <param name="name">The name of this Overworld.</param>
            <param name="description">A description of this Overworld.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.CreateRegion(BP.AdventureFramework.Locations.Region,System.Int32,System.Int32)">
            <summary>
            Create a Region in this Overworld.
            </summary>
            <param name="region">The Region to create.</param>
            <param name="columnInOverworld">The column of the Region with this Overworld.</param>
            <param name="rowInOverworld">The row of the Region within this Overworld.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.CreateRegion(BP.AdventureFramework.Locations.Region,BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Create a Region in this Overworld.
            </summary>
            <param name="region">The Region to create.</param>
            <param name="relativeLocation">The direction this Region lies in relative to the last Region created.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.MoveRegion(System.String)">
            <summary>
            Move to a specified Region.
            </summary>
            <param name="regionName">The name of the Region to move to.</param>
            <returns>If a move was successful.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.MoveRegion(BP.AdventureFramework.Locations.Region)">
            <summary>
            Move to a different Region.
            </summary>
            <param name="region">The Region to move to.</param>
            <returns>If a move was successful</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.MoveRegion(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Move to a region in a specified direction.
            </summary>
            <param name="direction">The direction to move in.</param>
            <returns>If a move was successful.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.HasAdjoiningRegion(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Get if the Overworld.CurrentRegion property has an adjoining Region.
            </summary>
            <param name="direction">The direction to check.</param>
            <returns>True if there is an adjoining region in the direction specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.GetAdjoiningRegion(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Get an adjoining Region.
            </summary>
            <param name="direction">The direction of the adjoining Region.</param>
            <returns>The adjoining Region, if there is one.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.SetStartRegion(BP.AdventureFramework.Locations.Region)">
            <summary>
            Set the Region to start in.
            </summary>
            <param name="region">The Region to start in.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.SetStartRegion(System.Int32)">
            <summary>
            Set the Region to start in.
            </summary>
            <param name="index">The index of Region to start in.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.Examime">
            <summary>
            Handle examination this Overworld.
            </summary>
            <returns>The result of this examination.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.TryGetDirectionOfAdjoiningRegion(BP.AdventureFramework.Locations.Region,BP.AdventureFramework.Locations.Region,BP.AdventureFramework.Locations.CardinalDirection@)">
            <summary>
            Try and get the direction of an adjoining region.
            </summary>
            <param name="sourceRegion">The source region.</param>
            <param name="destinationRegion">The destination region.</param>
            <param name="direction">The direction the destinationRegion lies in relative to the sourceRegion.</param>
            <returns>True if the Region's connect, false if they don't connect.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Overworld.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this Overworld that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Overworld.</param>
        </member>
        <member name="T:BP.AdventureFramework.Locations.Region">
            <summary>
            Represents a region.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Region.Rooms">
            <summary>
            Get the Rooms in this Region.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Region.CurrentRoom">
            <summary>
            Get the current Room.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Region.Item(System.Int32,System.Int32)">
            <summary>
            Get the first Room found at a specified location.
            </summary>
            <param name="column">The column of the Room.</param>
            <param name="row">The row of the Room.</param>
            <returns>The adjoining room.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Region class.
            </summary>
            <param name="name">The name of this Region.</param>
            <param name="description">The description of this Region.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.#ctor(System.String,BP.AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the Region class.
            </summary>
            <param name="name">The name of this Region.</param>
            <param name="description">The description of this Region.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.CreateRoom(BP.AdventureFramework.Locations.Room,System.Int32,System.Int32)">
            <summary>
            Create a Room in this Region.
            </summary>
            <param name="room">The Room to create.</param>
            <param name="columnInRegion">The column of the Room with this Region.</param>
            <param name="rowInRegion">The row of the Room within this Region.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.CreateRoom(BP.AdventureFramework.Locations.Room,BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Create a Room in this Region.
            </summary>
            <param name="room">The Room to create.</param>
            <param name="relativeLocation">The direction this Room lies in relative to the last Room created.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.GetAdjoiningRoom(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Get an adjoining Room to the Region.CurrentRoom property.
            </summary>
            <param name="direction">The direction of the adjoining Room.</param>
            <returns>The adjoining Room, if there is one.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.GetAdjoiningRoom(BP.AdventureFramework.Locations.CardinalDirection,BP.AdventureFramework.Locations.Room)">
            <summary>
            Get an adjoining Room to a Room.
            </summary>
            <param name="direction">The direction of the adjoining Room.</param>
            <param name="startRoom">The Room to start the check in.</param>
            <returns>The adjoining Room, if there is one.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.Move(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Move in a direction.
            </summary>
            <param name="direction">The direction to move in.</param>
            <returns>If a move was successful.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.Move(System.String)">
            <summary>
            Move to a Room.
            </summary>
            <param name="roomName">The name of the Room to move to.</param>
            <returns>If a move was successful.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.Move(BP.AdventureFramework.Locations.Room)">
            <summary>
            Move to a room.
            </summary>
            <param name="room">The room to move to.</param>
            <returns>If a move was successful.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.SetStartRoom(BP.AdventureFramework.Locations.Room)">
            <summary>
            Set the Room to start in.
            </summary>
            <param name="room">The Room to start in.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.SetStartRoom(System.Int32)">
            <summary>
            Set the Room to start in.
            </summary>
            <param name="index">The index of Room to start in.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.UnlockDoorPair(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Unlock a pair of doors in a specified direction in the CurrentRoom.
            </summary>
            <param name="direction">The direction to unlock in.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.TryGetDirectionOfAdjoiningRoom(BP.AdventureFramework.Locations.Room,BP.AdventureFramework.Locations.Room,BP.AdventureFramework.Locations.CardinalDirection@)">
            <summary>
            Try and get the direction of an adjoining room.
            </summary>
            <param name="sourceRoom">The source room.</param>
            <param name="destinationRoom">The destination room.</param>
            <param name="direction">The direction the destinationRoom lies in relative to the sourceRoom.</param>
            <returns>True if the Room's connect, false if they don't connect.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.Examime">
            <summary>
            Handle examination this Region.
            </summary>
            <returns>The result of this examination.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Region.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this Region that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Region.</param>
        </member>
        <member name="T:BP.AdventureFramework.Locations.Room">
            <summary>
            Represents a room
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Room.Exits">
            <summary>
            Get the exits.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Room.UnlockedExits">
            <summary>
            Get all unlocked exits.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Room.Characters">
            <summary>
            Get the characters of this Room
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Room.Items">
            <summary>
            Get the items in this Room.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Room.Interaction">
            <summary>
            Get or set the interaction.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Room.Item(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Get an exit.
            </summary>
            <param name="direction">The direction of an exit.</param>
            <returns>The exit.</returns>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Room.EnteredFrom">
            <summary>
            Get which direction this Room was entered from.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.#ctor(System.String,BP.AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the Room class.
            </summary>
            <param name="name">This rooms name.</param>
            <param name="description">This rooms description.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.#ctor(System.String,BP.AdventureFramework.Interaction.Description,BP.AdventureFramework.Locations.Exit[])">
            <summary>
            Initializes a new instance of the Room class.
            </summary>
            <param name="name">This rooms name.</param>
            <param name="description">This rooms description.</param>
            <param name="exits">The exits from this room.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.#ctor(System.String,BP.AdventureFramework.Interaction.Description,BP.AdventureFramework.Locations.Exit[],BP.AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the Room class.
            </summary>
            <param name="name">This rooms name.</param>
            <param name="description">This rooms description.</param>
            <param name="exits">The exits from this room.</param>
            <param name="items">The items in this room.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.AddCharacter(BP.AdventureFramework.Characters.NonPlayableCharacter)">
            <summary>
            Add a character to this room.
            </summary>
            <param name="character">The character to add.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.AddItem(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Add an item to this room.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.AddExit(BP.AdventureFramework.Locations.Exit)">
            <summary>
            Add an exit to this room.
            </summary>
            <param name="exit">The exit to add.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.RemoveItemFromRoom(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Remove an item from the room.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>The item removed from this room.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.RemoveItemFromRoom(System.String)">
            <summary>
            Remove an item from the room.
            </summary>
            <param name="itemName">The name of the item to remove.</param>
            <returns>If the item was removed correctly.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.RemoveItemFromRoom(System.String,BP.AdventureFramework.Interaction.Item@)">
            <summary>
            Remove an item from the room.
            </summary>
            <param name="itemName">The name of the item to remove.</param>
            <param name="removedItem">The item removed from this room.</param>
            <returns>If the item was removed correctly.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.RemoveCharacterFromRoom(BP.AdventureFramework.Characters.NonPlayableCharacter)">
            <summary>
            Remove a character from the room.
            </summary>
            <param name="character">The character to remove.</param>
            <returns>The character removed from this room.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.RemoveCharacterFromRoom(System.String)">
            <summary>
            Remove a character from the room.
            </summary>
            <param name="characterName">The name of the character to remove.</param>
            <returns>If the character was removed correctly.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.RemoveCharacterFromRoom(System.String,BP.AdventureFramework.Characters.NonPlayableCharacter@)">
            <summary>
            Remove a character from the room.
            </summary>
            <param name="characterName">The name of the character to remove.</param>
            <param name="removedCharacter">The character removed from this room.</param>
            <returns>If the character was removed correctly.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.RemoveInteractionTargetFromRoom(BP.AdventureFramework.Interaction.IInteractWithItem)">
            <summary>
            Remove an interaction target from the room.
            </summary>
            <param name="target">The target to remove.</param>
            <returns>The target removed from this room.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.CanMove(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Test if a move is possible.
            </summary>
            <param name="direction">The direction to test.</param>
            <returns>If a move in the specified direction is possible.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.InteractWithItem(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Interact with a specified item.
            </summary>
            <param name="item">The item to interact with.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.Examime">
            <summary>
            Handle examination this Room.
            </summary>
            <returns>The result of this examination.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.GetItemsAsString">
            <summary>
            Get all Items as a string.
            </summary>
            <returns>A string representing all items as a string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.GetExaminableObjects">
            <summary>
            Get everything that can be examined within this room.
            </summary>
            <returns>An array of everything that can be examined in this room.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.HasLockedExitInDirection(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Get if this room has a visible locked exit in a specified direction. This will not include exits whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="direction">The direction to check.</param>
            <returns>If there is a locked exit in the specified direction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.HasLockedExitInDirection(BP.AdventureFramework.Locations.CardinalDirection,System.Boolean)">
            <summary>
            Get if this room has a visible locked exit in a specified direction.
            </summary>
            <param name="direction">The direction to check.</param>
            <param name="includeInvisibleExits">Specify if invisible exits should be included.</param>
            <returns>If there is a locked exit in the specified direction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.HasUnlockedExitInDirection(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Get if this room has a visible unlocked exit in a specified direction. This will not include exits whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="direction">The direction to check.</param>
            <returns>If there is a unlocked exit in the specified direction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.HasUnlockedExitInDirection(BP.AdventureFramework.Locations.CardinalDirection,System.Boolean)">
            <summary>
            Get if this room has a visible unlocked exit in a specified direction.
            </summary>
            <param name="direction">The direction to check.</param>
            <param name="includeInvisibleExits">Specify if invisible exits should be included.</param>
            <returns>If there is a unlocked exit in the specified direction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ContainsExit(BP.AdventureFramework.Locations.Exit,System.Boolean)">
            <summary>
            Get if this Room contains an exit.
            </summary>
            <param name="exit">The exit to check for.</param>
            <param name="includeInvisibleExits">Specify if invisible exits should be included.</param>
            <returns>True if the exit exists, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ContainsExit(BP.AdventureFramework.Locations.CardinalDirection)">
            <summary>
            Get if this Room contains an exit. This will not include exits whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="direction">The direction of the exit to check for.</param>
            <returns>True if the exit exists, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ContainsExit(BP.AdventureFramework.Locations.CardinalDirection,System.Boolean)">
            <summary>
            Get if this Room contains an exit.
            </summary>
            <param name="direction">The direction of the exit to check for.</param>
            <param name="includeInvisibleExits">Specify if invisible exits should be included.</param>
            <returns>True if the exit exists, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.FindExit(BP.AdventureFramework.Locations.CardinalDirection,BP.AdventureFramework.Locations.Exit@)">
            <summary>
            Find an exit. This will not include exits whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="direction">The exits direction.</param>
            <param name="exit">The exit.</param>
            <returns>True if the exit was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.FindExit(BP.AdventureFramework.Locations.CardinalDirection,BP.AdventureFramework.Locations.Exit@,System.Boolean)">
            <summary>
            Find an exit.
            </summary>
            <param name="direction">The exits direction.</param>
            <param name="exit">The exit.</param>
            <param name="includeInvisibleExits">Specify if invisible exists should be included.</param>
            <returns>True if the exit was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ContainsItem(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Get if this Room contains an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="item">The item to check for.</param>
            <returns>True if the item is in this room, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ContainsItem(System.String)">
            <summary>
            Get if this Room contains an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="itemName">The item name to check for. This is case insensitive.</param>
            <returns>True if the item is in this room, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ContainsItem(System.String,System.Boolean)">
            <summary>
            Get if this Room contains an item.
            </summary>
            <param name="itemName">The item name to check for. This is case insensitive.</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included.</param>
            <returns>True if the item is in this room, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ContainsInteractionTarget(System.String)">
            <summary>
            Get if this Room contains an interaction target.
            </summary>
            <param name="targetName">The name of the target to check for. This is case insensitive.</param>
            <returns>True if the target is in this room, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.FindItem(System.String,BP.AdventureFramework.Interaction.Item@)">
            <summary>
            Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false
            </summary>
            <param name="itemName">The items name. This is case insensitive</param>
            <param name="item">The item</param>
            <returns>True if the item was found</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.FindItem(System.String,BP.AdventureFramework.Interaction.Item@,System.Boolean)">
            <summary>
            Find an item.
            </summary>
            <param name="itemName">The items name. This is case insensitive.</param>
            <param name="item">The item.</param>
            <param name="includeInvisibleItems">Specify is invisible items should be included.</param>
            <returns>True if the item was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.FindItemByID(System.String,BP.AdventureFramework.Interaction.Item@,System.Boolean)">
            <summary>
            Find an item.
            </summary>
            <param name="itemID">The items ID.</param>
            <param name="item">The item.</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included.</param>
            <returns>True if the item was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.FindInteractionTarget(System.String,BP.AdventureFramework.Interaction.IInteractWithItem@)">
            <summary>
            Find an interaction target.
            </summary>
            <param name="targetName">The targets name. This is case insensitive.</param>
            <param name="target">The target.</param>
            <returns>True if the target was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ContainsCharacter(System.String)">
            <summary>
            Get if this Room contains a character. This will not include characters whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="character">The item name to check for. This is case insensitive.</param>
            <returns>True if the item is in this room, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ContainsCharacter(System.String,System.Boolean)">
            <summary>
            Get if this Room contains a character.
            </summary>
            <param name="characterName">The character name to check for. This is case insensitive.</param>
            <param name="includeInvisibleCharacters">Specify if invisible characters should be included.</param>
            <returns>True if the item is in this room, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.FindCharacter(System.String,BP.AdventureFramework.Characters.NonPlayableCharacter@)">
            <summary>
            Find a character. This will not include characters whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="character">The character name. This is case insensitive.</param>
            <param name="characterName">The character.</param>
            <returns>True if the character was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.FindCharacter(System.String,BP.AdventureFramework.Characters.NonPlayableCharacter@,System.Boolean)">
            <summary>
            Find a character.
            </summary>
            <param name="characterName">The character name. This is case insensitive.</param>
            <param name="character">The character.</param>
            <param name="includeInvisibleCharacters">Specify if invisible characters should be included.</param>
            <returns>True if the character was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.SpecifyConditionalDescription(BP.AdventureFramework.Interaction.ConditionalDescription)">
            <summary>
            Specify a conditional description of this room.
            </summary>
            <param name="description">The description of this room.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.GetAllObjectsWithAdditionalCommands">
            <summary>
            Get all IImplementOwnActions objects within this Room.
            </summary>
            <returns>An array of all IImplementOwnActions objects within this Room.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.MovedInto(System.Nullable{BP.AdventureFramework.Locations.CardinalDirection})">
            <summary>
            Handle movement into this Room.
            </summary>
            <param name="fromDirection">The direction movement into this Room is from. Use null if there should be no direction.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.TransferFrom(BP.AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Handle transferal of delegation to this Room from a source ITransferableDelegation object. This should only concern top level properties and fields.
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from.</param>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this Room that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Room.</param>
        </member>
        <member name="P:BP.AdventureFramework.Locations.Room.AdditionalCommands">
            <summary>
            Get or set the ActionableCommands this object can interact with.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.ReactToAction(BP.AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            React to an ActionableCommand.
            </summary>
            <param name="command">The command to react to.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.FindCommand(System.String)">
            <summary>
            Find a command by it's name.
            </summary>
            <param name="command">The name of the command to find.</param>
            <returns>The ActionableCommand (if it is found).</returns>
        </member>
        <member name="M:BP.AdventureFramework.Locations.Room.Interact(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Interact with an item.
            </summary>
            <param name="item">The item to interact with.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.KeyType">
            <summary>
            Enumeration of key types.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.KeyType.None">
            <summary>
            No key.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.KeyType.Full">
            <summary>
            Full key.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.KeyType.Dynamic">
            <summary>
            Dynamic key, only show relevant key items.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.FrameDrawingOption">
            <summary>
            Enumeration of frame drawing options.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.FrameDrawingOption.KeyOn">
            <summary>
            Turn the key on.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.FrameDrawingOption.KeyOff">
            <summary>
            Turn the key off.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.FrameDrawingOption.CommandsOn">
            <summary>
            Turn commands on.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.FrameDrawingOption.CommandsOff">
            <summary>
            Turn commands off.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.FrameDrawingOption.Invert">
            <summary>
            Invert display colours.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.FrameEventHandler">
            <summary>
            Event handler for Frame events.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame">
            <summary>
            Represents a Frame used for ASCII animation.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Frames">
            <summary>
            Get or set the frames that make up this animation.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Interval">
            <summary>
            Get or set the interval between frames in ms.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Loops">
            <summary>
            Get or set the amount of times this animation should be looped. For infinite use System.Threading.Timeout.Infinate.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.AutoReverse">
            <summary>
            Get or set if the animation should be automatically reversed.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.#ctor">
            <summary>
            Initializes a new instance of the ASCIIAnimationFrame class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.#ctor(BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame[])">
            <summary>
            Initializes a new instance of the ASCIIAnimationFrame class.
            </summary>
            <param name="frames">Specify the frames of the animation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.#ctor(System.Int32,BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame[])">
            <summary>
            Initializes a new instance of the ASCIIAnimationFrame class.
            </summary>
            <param name="loops">Specify the amount of times this animation should be looped. For infinite use System.Threading.Timeout.Infinite.</param>
            <param name="frames">Specify the frames of the animation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.#ctor(System.Int32,System.Int32,System.Boolean,BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame[])">
            <summary>
            Initializes a new instance of the ASCIIAnimationFrame class.
            </summary>
            <param name="loops">Specify the amount of times this animation should be looped. For infinite use System.Threading.Timeout.Infinite.</param>
            <param name="interval">Specify the interval to be used between frames in ms.</param>
            <param name="autoReverse">Specify if the animation should be automatically reversed.</param>
            <param name="frames">Specify the frames of the animation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.BuildFrame(System.Int32,System.Int32,BP.AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this ASCIIAnimationFrame into a text based display.
            </summary>
            <param name="width">Specify the width of the Frame.</param>
            <param name="height">Specify the height of the Frame.</param>
            <param name="drawer">The FrameDrawer to draw the Frame with.</param>
            <returns>A string representing the Frame.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Stop">
            <summary>
            Stop any running animation.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Start">
            <summary>
            Start the animation.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Reset">
            <summary>
            Reset the animation.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIAnimationFrame.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame">
            <summary>
            Represents a Frame for displaying ASCII images.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.GrayscaleASCIIDictionary">
            <summary>
            Get the grayscale ASCII dictionary.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.Lines">
            <summary>
            Get or set the lines that make up this ASCII image.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.#ctor">
            <summary>
            Initializes a new instance of the ASCIIImageFrame class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the ASCIIImageFrame class.
            </summary>
            <param name="lines">Specify the lines of the ASCII image.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.BuildFrame(System.Int32,System.Int32,BP.AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this ASCIIImageFrame into a text based display.
            </summary>
            <param name="width">Specify the width of the Frame.</param>
            <param name="height">Specify the height of the Frame.</param>
            <param name="drawer">The FrameDrawer to draw the Frame with.</param>
            <returns>A string representing the Frame</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.ConvertToASCIIImageString(System.Int32,System.Int32,System.Drawing.Bitmap,System.Int16)">
            <summary>
            Convert a BitmapImage to an ASCII image string.
            </summary>
            <param name="width">The width of the output ASCII image.</param>
            <param name="height">The height of the output ASCII image.</param>
            <param name="image">The source image.</param>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast.</param>
            <returns>A ASCII string representation of the source image.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.ConvertPixelToASCII(System.Drawing.Color,System.Int16)">
            <summary>
            Convert a pixel to an ASCII character.
            </summary>
            <param name="pixel">The pixel to convert.</param>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast.</param>
            <returns>The ACSII representation of the pixel.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.ConvertPixelsToASCII(System.Int16,System.Drawing.Color[])">
            <summary>
            Convert some pixels to an ASCII character
            </summary>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast</param>
            <param name="pixels">The pixels to convert</param>
            <returns>The ACSII representation of the pixels</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.Create(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Create a new ASCIIImageFrame.
            </summary>
            <param name="image">The image to use as the source.</param>
            <param name="width">Specify the width of the ASCII image.</param>
            <param name="height">Specify the height of the ASCII image.</param>
            <returns>A new ASCIIImageFrame created from the parameters.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.Create(System.Drawing.Image,System.Int32,System.Int32,System.Int16)">
            <summary>
            Create a new ASCIIImageFrame.
            </summary>
            <param name="image">The image to use as the source.</param>
            <param name="width">Specify the width of the ASCII image.</param>
            <param name="height">Specify the height of the ASCII image.</param>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast.</param>
            <returns>A new ASCIIImageFrame created from the parameters.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.Create(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Create a new ASCIIImageFrame.
            </summary>
            <param name="image">The image to use as the source.</param>
            <param name="width">Specify the width of the ASCII image.</param>
            <param name="height">Specify the height of the ASCII image.</param>
            <returns>A new ASCIIImageFrame created from the parameters.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.Create(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int16)">
            <summary>
            Create a new ASCIIImageFrame.
            </summary>
            <param name="image">The image to use as the source.</param>
            <param name="width">Specify the width of the ASCII image.</param>
            <param name="height">Specify the height of the ASCII image.</param>
            <param name="contrast">The contrast between light and dark. Default is 0, use 1 - 100 to increase the contrast, use -1 - -100 to decrease the contrast.</param>
            <returns>A new ASCIIImageFrame created from the parameters.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.ASCIIImageFrame.CreateDefaultASCIIDictionary">
            <summary>
            Create a new default ASCII dictionary.
            </summary>
            <returns>A standard ASCII dictionary.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.Frame">
            <summary>
            Represents a frame for displaying a command based interface.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.Frame.CursorLeft">
            <summary>
            Get the required cursors left position.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.Frame.CursorTop">
            <summary>
            Get the required cursors top position.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.Frame.ShowCursor">
            <summary>
            Get or set if the cursor should be shown.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.Frame.AcceptsInput">
            <summary>
            Get or set if this Frame excepts input.
            </summary>
        </member>
        <member name="E:BP.AdventureFramework.Rendering.Frames.Frame.Invalidated">
            <summary>
            Occurs if this Frame becomes invalid.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.Frame.BuildFrame(System.Int32,System.Int32,BP.AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this Frame into a text based display.
            </summary>
            <param name="width">Specify the width of the Frame.</param>
            <param name="height">Specify the height of the Frame.</param>
            <param name="drawer">The FrameDrawer to draw the Frame with.</param>
            <returns>A string representing the Frame.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.Frame.Invalidate">
            <summary>
            Invalidate this Frame, forcing a re-render.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.Frame.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.HelpFrame">
            <summary>
            Represents a frame for displaying help.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.HelpFrame.CommandsDictionary">
            <summary>
            Get or set the commands and descriptions to display to the user.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.HelpFrame.Title">
            <summary>
            Get or set the title.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.HelpFrame.Description">
            <summary>
            Get the description.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.HelpFrame.#ctor">
            <summary>
            Initializes a new instance of the HelpFrame class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.HelpFrame.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the HelpFrame class.
            </summary>
            <param name="title">Specify the frames title.</param>
            <param name="description">Specify the frames description.</param>
            <param name="commands">Specify the commands and the descriptions to display.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.HelpFrame.BuildFrame(System.Int32,System.Int32,BP.AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this HelpFrame into a text based display.
            </summary>
            <param name="width">Specify the width of the Frame.</param>
            <param name="height">Specify the height of the Frame.</param>
            <param name="drawer">The FrameDrawer to draw the Frame with.</param>
            <returns>A string representing the Frame.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.EndFrame">
            <summary>
            Represents a frame for when the game ends.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.EndFrame.Message">
            <summary>
            Get the message.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.EndFrame.Reason">
            <summary>
            Get the reason.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.EndFrame.#ctor">
            <summary>
            Initializes a new instance of the EndFrame class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.EndFrame.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the EndFrame class.
            </summary>
            <param name="message">A message to show the user.</param>
            <param name="reason">The reason for the end.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.EndFrame.BuildFrame(System.Int32,System.Int32,BP.AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this EndFrame into a text based display.
            </summary>
            <param name="width">Specify the width of the Frame.</param>
            <param name="height">Specify the height of the Frame.</param>
            <param name="drawer">The FrameDrawer to draw the Frame with.</param>
            <returns>A string representing the Frame.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.RegionMapFrame">
            <summary>
            Represents a frame for displaying a Region map.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.RegionMapFrame.Region">
            <summary>
            Get or set the Region.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.RegionMapFrame.MapDrawer">
            <summary>
            Get or set the drawer used for constructing room maps.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.RegionMapFrame.#ctor">
            <summary>
            Initializes a new instance of the RegionMapFrame class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.RegionMapFrame.#ctor(BP.AdventureFramework.Locations.Region,BP.AdventureFramework.Rendering.MapDrawer)">
            <summary>
            Initializes a new instance of the RegionMapFrame class.
            </summary>
            <param name="region">Specify the Region.</param>
            <param name="mapDrawer">Specify a drawer for constructing room maps.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.RegionMapFrame.BuildFrame(System.Int32,System.Int32,BP.AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this RegionMapFrame into a text based display.
            </summary>
            <param name="width">Specify the width of the Frame.</param>
            <param name="height">Specify the height of the Frame.</param>
            <param name="drawer">The FrameDrawer to draw the Frame with.</param>
            <returns>A string representing the Frame.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.SceneFrame">
            <summary>
            Represents a frame that describes a scene.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.SceneFrame.Room">
            <summary>
            Get or set the Room.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.SceneFrame.Player">
            <summary>
            Get or set the player.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.SceneFrame.Message">
            <summary>
            Get or set the message.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.SceneFrame.MapDrawer">
            <summary>
            Get or set the drawer used for constructing room maps.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.SceneFrame.#ctor(BP.AdventureFramework.Locations.Room,BP.AdventureFramework.Characters.PlayableCharacter,System.String)">
            <summary>
            Initializes a new instance of the SceneFrame class.
            </summary>
            <param name="room">Specify the Room.</param>
            <param name="player">Specify the player.</param>
            <param name="message">Any additional message.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.SceneFrame.#ctor(BP.AdventureFramework.Locations.Room,BP.AdventureFramework.Characters.PlayableCharacter,System.String,BP.AdventureFramework.Rendering.MapDrawer)">
            <summary>
            Initializes a new instance of the SceneFrame class.
            </summary>
            <param name="room">Specify the Room.</param>
            <param name="player">Specify the player.</param>
            <param name="message">Any additional message.</param>
            <param name="mapDrawer">Specify a drawer for constructing room maps.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.SceneFrame.BuildFrame(System.Int32,System.Int32,BP.AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this SceneFrame into a text based display.
            </summary>
            <param name="width">Specify the width of the Frame.</param>
            <param name="height">Specify the height of the Frame.</param>
            <param name="drawer">The FrameDrawer to draw the Frame with.</param>
            <returns>A string representing the Frame.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.FrameEventArgs">
            <summary>
            Event arguments for Frame events.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.FrameEventArgs.Frame">
            <summary>
            Get the frame.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.FrameEventArgs.#ctor(BP.AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Initializes a new instance of the FrameEventArgs class.
            </summary>
            <param name="frame">The Frame to specify for these arguments.</param>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Frames.TitleFrame">
            <summary>
            Represents a frame that can be used as a title screen.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.TitleFrame.Title">
            <summary>
            Get the title.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Frames.TitleFrame.Description">
            <summary>
            Get the description.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.TitleFrame.#ctor">
            <summary>
            Initializes a new instance of the TitleFrame class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.TitleFrame.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TitleFrame class
            </summary>
            <param name="title">The title of the game</param>
            <param name="description">A description of the game</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Frames.TitleFrame.BuildFrame(System.Int32,System.Int32,BP.AdventureFramework.Rendering.FrameDrawer)">
            <summary>
            Build this TitleFrame into a text based display.
            </summary>
            <param name="width">Specify the width of the Frame.</param>
            <param name="height">Specify the height of the Frame.</param>
            <param name="drawer">The FrameDrawer to draw the Frame with.</param>
            <returns>A string representing the Frame.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.RegionDisplayMode">
            <summary>
            Enumeration of region display modes.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.RegionDisplayMode.VistitedRoomsOnly">
            <summary>
            Only show visited rooms.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.RegionDisplayMode.AllRegion">
            <summary>
            Show the whole region if it has been visited or not.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.RegionMapMode">
            <summary>
            Enumeration of region map modes.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.RegionMapMode.Detailed">
            <summary>
            Shows rooms at a detailed level.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.RegionMapMode.Undetailed">
            <summary>
            Shows rooms as one character, which allows larger maps to be displayed in a limited area.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.Rendering.RegionMapMode.Dynamic">
            <summary>
            Dynamic region map - uses detailed if there is room, else map will be undetailed.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.Drawer">
            <summary>
            A class for drawing strings on a console window.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Drawer.LeftBoundaryCharacter">
            <summary>
            Get or set the character used for left boundaries.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.Drawer.RightBoundaryCharacter">
            <summary>
            Get or set the character used for right boundaries.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructPaddedArea(System.Int32,System.Int32)">
            <summary>
            Construct a padded area.
            </summary>
            <param name="width">The width of the padded area.</param>
            <param name="height">The height of the padded area.</param>
            <returns>A constructed padded area.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructPaddedArea(System.Char,System.Char,System.Int32,System.Int32)">
            <summary>
            Construct a padded area.
            </summary>
            <param name="leftBoundary">The left boundary string.</param>
            <param name="rightBoundary">The right boundary string.</param>
            <param name="width">The width of the padded area.</param>
            <param name="height">The height of the padded area.</param>
            <returns>A constructed padded area.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructDivider(System.Int32,System.Char,System.Char,System.Char)">
            <summary>
            Construct a dividing horizontal line.
            </summary>
            <param name="width">The width of the divider.</param>
            <param name="leftBoundary">The left boundary character.</param>
            <param name="dividerString">The dividing character.</param>
            <param name="rightBoundary">The right boundary character.</param>
            <returns>A constructed divider.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructWrappedPaddedString(System.String,System.Int32)">
            <summary>
            Construct a wrapped padded string, ready for display.
            </summary>
            <param name="displayString">The string to pad.</param>
            <param name="width">The desired overall width of the padded string.</param>
            <returns>A padded string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructWhiteSpaceWithBoundaryDivider(System.Int32,System.Char,System.Char)">
            <summary>
            Construct a dividing horizontal line.
            </summary>
            <param name="width">The width of the divider.</param>
            <param name="leftBoundary">The left boundary character.</param>
            <param name="rightBoundary">The right boundary character.</param>
            <returns>A constructed divider.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructWhitespaceString(System.Int32)">
            <summary>
            Construct a string made of whitespace.
            </summary>
            <param name="width">The width of the whitespace.</param>
            <returns>A string constructed of whitespace.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructUnboarderedCentralisedString(System.String,System.Int32)">
            <summary>
            Construct a un-bordered, centralised string.
            </summary>
            <param name="displayString">The string to pad.</param>
            <param name="width">The desired overall width of the padded string.</param>
            <returns>A padded string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructCentralisedString(System.String,System.Int32,System.Char,System.Char)">
            <summary>
            Construct a centralised string, ready for display.
            </summary>
            <param name="displayString">The string to pad.</param>
            <param name="width">The desired overall width of the padded string.</param>
            <param name="leftBoundary">The left boundary character.</param>
            <param name="rightBoundary">The right boundary character.</param>
            <returns>A padded string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructCentralisedString(System.String,System.Int32)">
            <summary>
            Construct a centralised string, ready for display.
            </summary>
            <param name="displayString">The string to pad.</param>
            <param name="width">The desired overall width of the padded string.</param>
            <returns>A padded string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructWrappedPaddedString(System.String,System.Int32,System.Boolean)">
            <summary>
            Construct a wrapped padded string, ready for display.
            </summary>
            <param name="displayString">The string to pad.</param>
            <param name="width">The desired overall width of the padded string.</param>
            <param name="centralise">Specify if the string should be centralised.</param>
            <returns>A padded string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ConstructWrappedPaddedString(System.String,System.Int32,System.Char,System.Char,System.Boolean)">
            <summary>
            Construct a wrapped padded string, ready for display.
            </summary>
            <param name="displayString">The string to pad.</param>
            <param name="width">The desired overall width of the padded string.</param>
            <param name="leftBoundary">The left boundary character.</param>
            <param name="rightBoundary">The right boundary character.</param>
            <param name="centralise">set if the string should be centralised.</param>
            <returns>A padded string</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.DetermineLinesInString(System.String)">
            <summary>
            Determine the amount of lines in a string.
            </summary>
            <param name="input">The input to determine the amount of lines from.</param>
            <returns>The amount of lines in the string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.Drawer.ExtractNextWordFromString(System.String@)">
            <summary>
            Extract the next word from a string.
            </summary>
            <param name="input">The input string.</param>
            <returns>The extracted work.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.FrameDrawer">
            <summary>
            A class for constructing and drawing Frames.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.FrameDrawer.DisplayCommands">
            <summary>
            Get or set if commands are displayed.
            </summary>
        </member>
        <member name="E:BP.AdventureFramework.Rendering.FrameDrawer.DisplayedSpecialFrame">
            <summary>
            Occurs when a special frame has been requested to be displayed.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.FrameDrawer.#ctor">
            <summary>
            Initializes a new instance of the FrameDrawer class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.FrameDrawer.#ctor(System.Char,System.Char,System.Char)">
            <summary>
            Initializes a new instance of the FrameDrawer class.
            </summary>
            <param name="leftBoundaryCharacter">The character to use for left boundaries.</param>
            <param name="rightBoundaryCharacter">The character to use for right boundaries.</param>
            <param name="devidingCharacter">The character to use for dividers.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.FrameDrawer.ConstructDivider(System.Int32)">
            <summary>
            Construct a dividing horizontal line.
            </summary>
            <param name="width">The width of the divider.</param>
            <returns>A constructed divider.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.FrameDrawer.DisplaySpecialFrame(BP.AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Request a custom Frame to be displayed to any context listening for the FrameDrawer.DisplaySpecialFrame event.
            </summary>
            <param name="frame">The frame to display.</param>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.InGameGraphics">
            <summary>
            Represents a store for in game graphics.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.InGameGraphics.UserDefinedGraphics">
            <summary>
            Get the user defined graphics.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.InGameGraphics.BufferGraphics">
            <summary>
            Buffer all graphics from the default folder into system memory.
            </summary>
            <returns>True is the buffer was successful.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Rendering.MapDrawer">
            <summary>
            A class for drawing maps.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.MapDrawer.LockedExitString">
            <summary>
            Get or set the string used for representing a locked exit.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.MapDrawer.ItemInRoomString">
            <summary>
            Get or set the string used for representing there is an item in the room.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.MapDrawer.Key">
            <summary>
            Get or set the type of key to use.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.MapDrawer.RoomVisibilityMode">
            <summary>
            Get or set the visibility mode to use for Rooms.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Rendering.MapDrawer.RegionMapDetail">
            <summary>
            Get or set the detail to use for a Region map.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.#ctor">
            <summary>
            Initializes a new instance of the MapDrawer class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.#ctor(BP.AdventureFramework.Rendering.KeyType)">
            <summary>
            Initializes a new instance of the MapDrawer class.
            </summary>
            <param name="key">Specify the type of key to use.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.#ctor(BP.AdventureFramework.Rendering.KeyType,System.String,System.String)">
            <summary>
            Initializes a new instance of the MapDrawer class.
            </summary>
            <param name="key">Specify the type of key to use.</param>
            <param name="lockedExitString">Specify a string used for representing a locked exit.</param>
            <param name="itemInRoomString">Specify a string used for representing there is an item in the room.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.#ctor(BP.AdventureFramework.Rendering.KeyType,System.String,System.String,BP.AdventureFramework.Rendering.RegionDisplayMode,BP.AdventureFramework.Rendering.RegionMapMode)">
            <summary>
            Initializes a new instance of the MapDrawer class.
            </summary>
            <param name="key">Specify the type of key to use</param>
            <param name="lockedExitString">Specify a string used for representing a locked exit.</param>
            <param name="itemInRoomString">Specify a string used for representing there is an item in the room.</param>
            <param name="roomVisibilityMode">Specify a visibility mode to be used for Rooms.</param>
            <param name="regionMapDetail">Specify a Region map detail mode.</param>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.ConstructRoomMap(BP.AdventureFramework.Locations.Room,System.Int32)">
            <summary>
            Construct a map for a Room.
            </summary>
            <param name="room">The Room to draw.</param>
            <param name="width">The allocated with to draw within.</param>
            <returns>A map of the Room in a String.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.constructUndetailedRegionMap(BP.AdventureFramework.Locations.Region,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a undetailed Region map.
            </summary>
            <param name="region">The Region to construct the map for.</param>
            <param name="width">The width of the map.</param>
            <param name="minColumn">The minimum column any Room within the Region.</param>
            <param name="maxColumn">The maximum column any Room within the Region.</param>
            <param name="minRow">The minimum row any Room within the Region.</param>
            <param name="maxRow">The maximum row any Room within the Region.</param>
            <returns>A representation of the Region as a string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.ConstructDetailedRegionMap(BP.AdventureFramework.Locations.Region,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a detailed Region map.
            </summary>
            <param name="region">The Region to construct the map for.</param>
            <param name="width">The width of the map.</param>
            <param name="roomWidth">The width of each room.</param>
            <param name="minColumn">The minimum column any Room within the Region.</param>
            <param name="maxColumn">The maximum column any Room within the Region.</param>
            <param name="minRow">The minimum row any Room within the Region.</param>
            <param name="maxRow">The maximum row any Room within the Region.</param>
            <returns>A representation of the Region as a string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.ConstructRoomRowString(BP.AdventureFramework.Locations.Room,System.Boolean,System.Int32)">
            <summary>
            Construct a string representing a row slice of a room.
            </summary>
            <param name="room">The Room to get a slice of.</param>
            <param name="isPlayerInRoom">If the player is in the room.</param>
            <param name="row">The slice of the row to get (0 = top, 1 = middle, 2 = bottom).</param>
            <returns>The constructed room slice.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.TryGetRegionExtremities(BP.AdventureFramework.Locations.Region,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Try and get the extremities of a Region.
            </summary>
            <param name="region">The Region to check.</param>
            <param name="minColumn">The lowest valued column.</param>
            <param name="maxColumn">The highest valued column.</param>
            <param name="minRow">The lowest valued row.</param>
            <param name="maxRow">The highest valued row.</param>
            <returns>True if the check was successful, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Rendering.MapDrawer.ConstructRegionMap(BP.AdventureFramework.Locations.Region,System.Int32,System.Int32)">
            <summary>
            Construct a map of a Region.
            </summary>
            <param name="region">The Region to draw.</param>
            <param name="width">The allocated width to draw within.</param>
            <param name="height">The allocated height to draw within.</param>
            <returns>A map of the Region in a string.</returns>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.CompletionCheck">
            <summary>
            Represents the callback used for completion checks.
            </summary>
            <param name="game">The Game to check for completion.</param>
            <returns>Returns if the condition if fulfilled.</returns>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.ExitMode">
            <summary>
            Enumeration of exit modes.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.ExitMode.ExitApplication">
            <summary>
            Exit the application.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.ExitMode.ReturnToTitleScreen">
            <summary>
            Return to the title screen.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.GameCommand">
            <summary>
            Enumeration of game commands.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.GameCommand.New">
            <summary>
            New game.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.GameCommand.Exit">
            <summary>
            Exit the game.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.GameCommand.Help">
            <summary>
            View help.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.GameCommand.Map">
            <summary>
            View the region map.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.GameCommand.About">
            <summary>
            View information about the game.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.GameCreationHelper">
            <summary>
            Represents a class that helps to build games.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.#ctor">
            <summary>
            Initializes a new instance of the GameCreationHelper class.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameCreationHelper.Creator">
            <summary>
            Get the game creator.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,BP.AdventureFramework.GameStructure.OverworldGeneration,BP.AdventureFramework.GameStructure.PlayerGeneration,BP.AdventureFramework.GameStructure.CompletionCheck)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">The callback for generating the Overworld.</param>
            <param name="playerGenerator">The callback for generating the Player.</param>
            <param name="completionCondition">The callback used to check game completion.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,BP.AdventureFramework.GameStructure.OverworldGeneration,BP.AdventureFramework.GameStructure.PlayerGeneration,BP.AdventureFramework.GameStructure.CompletionCheck,BP.AdventureFramework.Rendering.Frames.TitleFrame)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">The callback for generating the Overworld.</param>
            <param name="playerGenerator">The callback for generating the Player.</param>
            <param name="completionCondition">The callback used to check game completion.</param>
            <param name="titleFrame">The title Frame.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,BP.AdventureFramework.GameStructure.OverworldGeneration,BP.AdventureFramework.GameStructure.PlayerGeneration,BP.AdventureFramework.GameStructure.CompletionCheck,BP.AdventureFramework.Rendering.Frames.TitleFrame,BP.AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">A function to generate the Overworld with.</param>
            <param name="playerGenerator">The function to generate the Player with.</param>
            <param name="completionCondition">The callback used to to check game completion.</param>
            <param name="titleFrame">The title Frame.</param>
            <param name="completionFrame">The completion Frame.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,BP.AdventureFramework.GameStructure.OverworldGeneration,BP.AdventureFramework.GameStructure.PlayerGeneration,BP.AdventureFramework.GameStructure.CompletionCheck,BP.AdventureFramework.Rendering.Frames.TitleFrame,BP.AdventureFramework.Rendering.Frames.Frame,BP.AdventureFramework.Rendering.Frames.HelpFrame)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">A function to generate the Overworld with.</param>
            <param name="playerGenerator">The function to generate the Player with.</param>
            <param name="completionCondition">The callback used to check game completion.</param>
            <param name="titleFrame">The title Frame.</param>
            <param name="completionFrame">The completion Frame.</param>
            <param name="help">The games help screen.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,BP.AdventureFramework.GameStructure.OverworldGeneration,BP.AdventureFramework.GameStructure.PlayerGeneration,BP.AdventureFramework.GameStructure.CompletionCheck,BP.AdventureFramework.Rendering.Frames.TitleFrame,BP.AdventureFramework.Rendering.Frames.Frame,BP.AdventureFramework.Rendering.Frames.HelpFrame,BP.AdventureFramework.Parsing.TextParser)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">A function to generate the Overworld with.</param>
            <param name="playerGenerator">The function to generate the Player with.</param>
            <param name="completionCondition">The callback used to check game completion.</param>
            <param name="titleFrame">The title Frame.</param>
            <param name="completionFrame">The completion Frame.</param>
            <param name="help">The help Frame.</param>
            <param name="parser">The parser for all input parsing.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,System.Func{BP.AdventureFramework.Locations.Overworld},System.Func{BP.AdventureFramework.Characters.PlayableCharacter},BP.AdventureFramework.GameStructure.CompletionCheck)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">A function to generate the Overworld with.</param>
            <param name="playerGenerator">The function to generate the Player with.</param>
            <param name="completionCondition">The callback used to check game completion.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,System.Func{BP.AdventureFramework.Locations.Overworld},System.Func{BP.AdventureFramework.Characters.PlayableCharacter},BP.AdventureFramework.GameStructure.CompletionCheck,BP.AdventureFramework.Rendering.Frames.TitleFrame)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">A function to generate the Overworld with.</param>
            <param name="playerGenerator">The function to generate the Player with.</param>
            <param name="completionCondition">The callback used to check game completion.</param>
            <param name="titleFrame">The title Frame.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,System.Func{BP.AdventureFramework.Locations.Overworld},System.Func{BP.AdventureFramework.Characters.PlayableCharacter},BP.AdventureFramework.GameStructure.CompletionCheck,BP.AdventureFramework.Rendering.Frames.TitleFrame,BP.AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">A function to generate the Overworld with.</param>
            <param name="playerGenerator">The function to generate the Player with.</param>
            <param name="completionCondition">The callback used to check game completion.</param>
            <param name="titleFrame">The title Frame.</param>
            <param name="completionFrame">The completion Frame.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,System.Func{BP.AdventureFramework.Locations.Overworld},System.Func{BP.AdventureFramework.Characters.PlayableCharacter},BP.AdventureFramework.GameStructure.CompletionCheck,BP.AdventureFramework.Rendering.Frames.TitleFrame,BP.AdventureFramework.Rendering.Frames.Frame,BP.AdventureFramework.Rendering.Frames.HelpFrame)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">A function to generate the Overworld with.</param>
            <param name="playerGenerator">The function to generate the Player with.</param>
            <param name="completionCondition">The callback used to check game completion.</param>
            <param name="titleFrame">The title Frame.</param>
            <param name="help">The help Frame.</param>
            <param name="completionFrame">The completion Frame.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameCreationHelper.Create(System.String,System.String,System.Func{BP.AdventureFramework.Locations.Overworld},System.Func{BP.AdventureFramework.Characters.PlayableCharacter},BP.AdventureFramework.GameStructure.CompletionCheck,BP.AdventureFramework.Rendering.Frames.TitleFrame,BP.AdventureFramework.Rendering.Frames.Frame,BP.AdventureFramework.Rendering.Frames.HelpFrame,BP.AdventureFramework.Parsing.TextParser)">
            <summary>
            Create a new GameCreationHelper.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="description">A description of the game.</param>
            <param name="overworldGenerator">A function to generate the Overworld with.</param>
            <param name="playerGenerator">The function to generate the Player with.</param>
            <param name="completionCondition">The callback used to to check game completion.</param>
            <param name="titleFrame">The title Frame.</param>
            <param name="completionFrame">The completion Frame.</param>
            <param name="help">The help Frame.</param>
            <param name="parser">The parser for all input parsing.</param>
            <returns>A new GameCreationHelper that will create a GameCreator with the parameters specified.</returns>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.GameCreator">
            <summary>
            Represents the callback used for creating new Game's.
            </summary>
            <returns>A game created by the callback.</returns>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.GameEndedEventHandler">
            <summary>
            Event handler for game ended events.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.GameFlow">
            <summary>
            Represents a class for controlling the flow of a Game.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.Game">
            <summary>
            Get the Game.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.Creator">
            <summary>
            Get or set the game creator.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.ErrorPrefix">
            <summary>
            Get or set the error prefix.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.FrameDrawer">
            <summary>
            Get or set the drawer for drawing all frames.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.MapDrawer">
            <summary>
            Get or set the drawer used for constructing room maps.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.EncryptFiles">
            <summary>
            Get if this should encrypt all files.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.Output">
            <summary>
            Get or set the output stream.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.Input">
            <summary>
            Get or set input stream.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.Error">
            <summary>
            Get or set the error stream.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.DisplaySize">
            <summary>
            Get or set the standard size of the display area.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameFlow.WaitForKeyPressCallback">
            <summary>
            Get or set the callback to invoke when waiting for key presses.
            </summary>
        </member>
        <member name="E:BP.AdventureFramework.GameStructure.GameFlow.StartingFrameDraw">
            <summary>
            Occurs when the frame draw begins.
            </summary>
        </member>
        <member name="E:BP.AdventureFramework.GameStructure.GameFlow.FinishingFrameDraw">
            <summary>
            Occurs when the frame draw exits.
            </summary>
        </member>
        <member name="E:BP.AdventureFramework.GameStructure.GameFlow.DisplayInverted">
            <summary>
            Occurs when the display is inverted.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.#ctor(BP.AdventureFramework.GameStructure.GameCreator)">
            <summary>
            Initializes a new instance of the GameFlow class.
            </summary>
            <param name="gameCreator">A game creator to create the GameFlow.Game property from.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.#ctor(BP.AdventureFramework.GameStructure.GameCreationHelper)">
            <summary>
            Initializes a new instance of the GameFlow class.
            </summary>
            <param name="helper">A game helper to create the GameFlow.Creator property from.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.Begin">
            <summary>
            Begin the game.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.TryHandleInputAtGlobalLevel(System.String)">
            <summary>
            Try to handle the input at a global level, i.e higher operations on a Game such creating new games.
            </summary>
            <param name="input">The input to handle.</param>
            <returns>The decision based on the input.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.EnterGameLoop">
            <summary>
            Enter the game loop.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.UpdateScreenWithCurrentFrame(System.String)">
            <summary>
            Update the screen with the current Frame, provided by the GameFlow.Game property.
            </summary>
            <param name="message">An additional message to display to the user.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.DrawFrame(BP.AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Draw a Frame onto the output stream.
            </summary>
            <param name="frame">The frame to draw.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.OnFrameUpdated(BP.AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Handle GameFlow.Frame property updating.
            </summary>
            <param name="frame">The new frame.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.OnGameEnded(BP.AdventureFramework.GameStructure.ExitMode)">
            <summary>
            Handle the GameFlow.Game.Ended event.
            </summary>
            <param name="exitMode">The exit mode from the game.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.OnGameCompleted">
            <summary>
            Handle the GameFlow.Game.Completed event.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.OnDisposed">
            <summary>
            Handle disposal of this GameFlow.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameFlow.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.Game">
            <summary>
            Represents the structure of the game
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.Player">
            <summary>
            Get or set the player.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.Overworld">
            <summary>
            Get or set the Overworld.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.Name">
            <summary>
            Get or set the name.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.Description">
            <summary>
            Get or set the description.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.HasEnded">
            <summary>
            Get if this game has ended.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.TitleFrame">
            <summary>
            Get or set this Games frame to display for the title screen.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.CompletionFrame">
            <summary>
            Get or set this Games frame to display upon completion.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.HelpFrame">
            <summary>
            Get or set this Games help screen.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.CurrentFrame">
            <summary>
            Get the current Frame.
            </summary>
        </member>
        <member name="E:BP.AdventureFramework.GameStructure.Game.CurrentFrameUpdated">
            <summary>
            Occurs when the CurrentFrame is updated.
            </summary>
        </member>
        <member name="E:BP.AdventureFramework.GameStructure.Game.Ended">
            <summary>
            Occurs when the Game has ended.
            </summary>
        </member>
        <member name="E:BP.AdventureFramework.GameStructure.Game.Completed">
            <summary>
            Occurs when the Game has been completed.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.Game.lastUsedWidth">
            <summary>
            Get or set the last used width.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.Game.lastUsedHeight">
            <summary>
            Get or set the last used height.
            </summary>
        </member>
        <member name="F:BP.AdventureFramework.GameStructure.Game.lastUsedMapDrawer">
            <summary>
            Get or set the last used map drawer.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.CompletionCondition">
            <summary>
            Get or set the completion condition.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.Game.Parser">
            <summary>
            Get or set the parser for this Game.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.#ctor(System.String,System.String,BP.AdventureFramework.Characters.PlayableCharacter,BP.AdventureFramework.Locations.Overworld)">
            <summary>
            Initializes a new instance of the Game class.
            </summary>
            <param name="name">The name of this Game.</param>
            <param name="description">A description of this Game.</param>
            <param name="player">The Player to use for this Game.</param>
            <param name="overworld">A Overworld to use for this Game.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.End">
            <summary>
            End the Game.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.OnCurrentFrameUpdated(BP.AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Handle CurrentFrame updating.
            </summary>
            <param name="frame">The updated frame.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.OnGameEnded(BP.AdventureFramework.GameStructure.ExitMode)">
            <summary>
            Handle game ended.
            </summary>
            <param name="mode">The exit mode.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.ReactToInput(System.String)">
            <summary>
            React to input.
            </summary>
            <param name="input">The input to react to.</param>
            <returns>A result detailing the reaction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.EnterGame(System.Int32,System.Int32,BP.AdventureFramework.Rendering.MapDrawer)">
            <summary>
            Enter the game.
            </summary>
            <param name="width">The width of the game.</param>
            <param name="height">The height of the game.</param>
            <param name="drawer">A drawer to use for constructing the map.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.GetScene">
            <summary>
            Get a scene based on the current game.
            </summary>
            <returns>A constructed frame of the scene.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.GetScene(BP.AdventureFramework.Rendering.MapDrawer,System.Int32,System.Int32)">
            <summary>
            Get a scene based on the current game.
            </summary>
            <param name="drawer">A drawer to use for constructing the map.</param>
            <param name="width">The width of the scene.</param>
            <param name="height">The height of the scene.</param>
            <returns>A constructed frame of the scene.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.GetScene(BP.AdventureFramework.Rendering.MapDrawer,System.Int32,System.Int32,System.String)">
            <summary>
            Get a scene based on the current game.
            </summary>
            <param name="drawer">A drawer to use for constructing the map.</param>
            <param name="width">The width of the scene.</param>
            <param name="height">The height of the scene.</param>
            <param name="messageToUser">A message to the user.</param>
            <returns>A constructed frame of the scene.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.OnHandlePlayerDied(System.String,System.String)">
            <summary>
            Handle player deaths.
            </summary>
            <param name="titleMessage">A title message to display.</param>
            <param name="reason">A reason for the death.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.GetAllObjectsWithAdditionalCommands">
            <summary>
            Get all objects in this Game (that are within the current scope) that implement IImplementOwnActions.
            </summary>
            <returns>All IImplementOwnActions objects.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.IsValidActionableCommand(System.String)">
            <summary>
            Get if a string is a valid ActionableCommand.
            </summary>
            <param name="command">The command to search for.</param>
            <returns>True if the command was found, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.FindActionableCommand(System.String)">
            <summary>
            Find a ActionableCommand in this Games IImplementOwnActions objects
            </summary>
            <param name="command">The command to search for</param>
            <returns>The first ActionableCommand whose Command property matches the command parameter</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.FindIImplementOwnActionsObject(System.String)">
            <summary>
            Find a IImplementOwnActions in this objects IImplementOwnActions objects.
            </summary>
            <param name="command">The command to search for.</param>
            <returns>The first IImplementOwnActions object whose Command property matches the command parameter.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.FindInteractionTarget(System.String)">
            <summary>
            Find an interaction target within the current scope for this Game.
            </summary>
            <param name="name">The targets name.</param>
            <returns>The first IInteractWithItem object which has a name that matches the name parameter.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.Refresh">
            <summary>
            Refresh the current frame.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.Refresh(System.String)">
            <summary>
            Refresh the current frame.
            </summary>
            <param name="message">Any message to display.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.Refresh(BP.AdventureFramework.Rendering.Frames.Frame)">
            <summary>
            Refresh the current frame.
            </summary>
            <param name="frame">A frame to display.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.GenerateTransferalID">
            <summary>
            Generate a transferable ID for this Game.
            </summary>
            <returns>The ID of this object as a string.</returns>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.TransferFrom(BP.AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Transfer delegation to this Game from a source ITransferableDelegation object. This should only concern top level properties and fields.
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from.</param>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.Game.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Register all child properties of this Game that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Game.</param>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.GameEndedEventArgs">
            <summary>
            Event arguments for end of game events.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.GameStructure.GameEndedEventArgs.ExitMode">
            <summary>
            Get the exit mode.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.GameEndedEventArgs.#ctor(BP.AdventureFramework.GameStructure.ExitMode)">
            <summary>
            Initializes a new instance of the GameEndedEventArgs class.
            </summary>
            <param name="mode">The type of exit to use.</param>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.HostSetup">
            <summary>
            Represents generic setup protocols for various Windows program types.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.GameStructure.HostSetup.SetupWindowsConsole(BP.AdventureFramework.GameStructure.GameFlow,System.String)">
            <summary>
            Setup the windows console for a new GameFlow.
            </summary>
            <param name="flow">The flow to prepare the windows Console for.</param>
            <param name="title">The title to display as the Console.Title property.</param>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.OverworldGeneration">
            <summary>
            Represents a callback for Overworld generation.
            </summary>
            <param name="pC">The playable character that will appear in the Overworld.</param>
            <returns>A generated Overworld.</returns>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.PlayerGeneration">
            <summary>
            Represents a callback for Player generation.
            </summary>
            <returns>A generated Player.</returns>
        </member>
        <member name="T:BP.AdventureFramework.GameStructure.WaitForKeyPressCallback">
            <summary>
            Callback that invokes a callback for waiting for a key press.
            </summary>
            <param name="key">The ASCII code of the key to wait for.</param>
            <returns>If the key pressed returned the same ASCII character as the key property.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Characters.Character">
            <summary>
            Represents a generic in game character.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Characters.Character.IsAlive">
            <summary>
            Get if this character is alive.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Characters.Character.Interaction">
            <summary>
            Get or set the interaction.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Characters.Character.Items">
            <summary>
            Get the items this Character holds.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.InteractWithItem(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Interact with a specified item.
            </summary>
            <param name="item">The item to interact with.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.Kill">
            <summary>
            Kill this character.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.Kill(System.String)">
            <summary>
            Kill the character.
            </summary>
            <param name="reason">A reason for the death.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.OnReactToAction(BP.AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            Handle reactions to ActionableCommands.
            </summary>
            <param name="command">The command to react to.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.TransferFrom(BP.AdventureFramework.Interaction.ITransferableDelegation)">
            <summary>
            Handle transferal of delegation to this Character from a source ITransferableDelegation object.
            </summary>
            <param name="source">The source ITransferableDelegation object to transfer from.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.RegisterTransferableChildren(System.Collections.Generic.List{BP.AdventureFramework.Interaction.ITransferableDelegation}@)">
            <summary>
            Handle registration of all child properties of this Character that are ITransferableDelegation.
            </summary>
            <param name="children">A list containing all the ITransferableDelegation properties of this Character.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.AquireItem(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Acquire an item.
            </summary>
            <param name="item">The item to acquire.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.DequireItem(BP.AdventureFramework.Interaction.Item)">
            <summary>
            De-acquire an item.
            </summary>
            <param name="item">The item to de-acquire.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.HasItem(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Determine if this PlayableCharacter has an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the item is found, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.HasItem(BP.AdventureFramework.Interaction.Item,System.Boolean)">
            <summary>
            Determine if this PlayableCharacter has an item.
            </summary>
            <param name="item">The item.</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included.</param>
            <returns>True if the item is found, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.HasItem(System.String)">
            <summary>
            Determine if this PlayableCharacter has an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="itemName">The items name. This is case insensitive.</param>
            <returns>True if the item is found, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.HasItem(System.String,System.Boolean)">
            <summary>
            Determine if this PlayableCharacter has an item.
            </summary>
            <param name="itemName">The items name. This is case insensitive.</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included.</param>
            <returns>True if the item is found, else false.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.FindItem(System.String,BP.AdventureFramework.Interaction.Item@)">
            <summary>
            Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="itemName">The items name. This is case insensitive.</param>
            <param name="item">The item.</param>
            <returns>True if the item was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.FindItem(System.String,BP.AdventureFramework.Interaction.Item@,System.Boolean)">
            <summary>
            Find an item.
            </summary>
            <param name="itemName">The items name. This is case insensitive.</param>
            <param name="item">The item.</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included.</param>
            <returns>True if the item was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.FindItemByID(System.String,BP.AdventureFramework.Interaction.Item@)">
            <summary>
            Find an item. This will not include items whose ExaminableObject.IsPlayerVisible property is set to false.
            </summary>
            <param name="itemID">The items ID. This is case insensitive.</param>
            <param name="item">The item.</param>
            <returns>True if the item was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.FindItemByID(System.String,BP.AdventureFramework.Interaction.Item@,System.Boolean)">
            <summary>
            Find an item.
            </summary>
            <param name="itemID">The items ID. This is case insensitive.</param>
            <param name="item">The item.</param>
            <param name="includeInvisibleItems">Specify if invisible items should be included.</param>
            <returns>True if the item was found.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.GetItemsAsList">
            <summary>
            Get items as a list.
            </summary>
            <returns>A list of all.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.GetAllObjectsWithAdditionalCommands">
            <summary>
            Get all IImplementOwnActions objects within this Character.
            </summary>
            <returns>An array of all IImplementOwnActions objects within this Character.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.Give(BP.AdventureFramework.Interaction.Item,BP.AdventureFramework.Characters.Character)">
            <summary>
            Give an item to another in game Character.
            </summary>
            <param name="item">The item to give.</param>
            <param name="character">The Character to give the item to.</param>
            <returns>True if the transaction completed OK, else false.</returns>
        </member>
        <member name="P:BP.AdventureFramework.Characters.Character.AdditionalCommands">
            <summary>
            Get or set the ActionableCommands this object can interact with.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.ReactToAction(BP.AdventureFramework.Interaction.ActionableCommand)">
            <summary>
            React to an ActionableCommand.
            </summary>
            <param name="command">The command to react to.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.FindCommand(System.String)">
            <summary>
            Find a command by its name.
            </summary>
            <param name="command">The name of the command to find.</param>
            <returns>The ActionableCommand.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.Character.Interact(BP.AdventureFramework.Interaction.Item)">
            <summary>
            Interact with an item.
            </summary>
            <param name="item">The item to interact with.</param>
            <returns>The result of the interaction.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Characters.ConversationElement">
            <summary>
            Represents an element of a Conversation.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Characters.ConversationElement.Line">
            <summary>
            Get or set the line.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Characters.ConversationElement.Action">
            <summary>
            Get or set any action to carry out on this line.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Characters.ConversationElement.#ctor">
            <summary>
            Initializes a new instance of the ConversationElement class.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Characters.ConversationElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConversationElement class.
            </summary>
            <param name="line">Specify the line in this conversation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.ConversationElement.#ctor(System.String,System.Action)">
            <summary>
            Initializes a new instance of the ConversationElement class.
            </summary>
            <param name="line">Specify the line in this conversation.</param>
            <param name="action">Specify any action to be carried out with this line.</param>
        </member>
        <member name="T:BP.AdventureFramework.Characters.ITalkative">
            <summary>
            Represents an object that can talk.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Characters.ITalkative.Talk">
            <summary>
            Talk to this object.
            </summary>
            <returns>A string representing the conversation.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Characters.NonPlayableCharacter">
            <summary>
            Represents a non-playable character.
            </summary>
        </member>
        <member name="P:BP.AdventureFramework.Characters.NonPlayableCharacter.Conversation">
            <summary>
            Get or set the conversation.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Characters.NonPlayableCharacter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class.
            </summary>
            <param name="name">The name of this NonPlayableCharacter.</param>
            <param name="description">The description of this NonPlayableCharacter.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.NonPlayableCharacter.#ctor(System.String,System.String,BP.AdventureFramework.Interaction.Conversation)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class.
            </summary>
            <param name="name">The name of this NonPlayableCharacter.</param>
            <param name="description">The description of this NonPlayableCharacter.</param>
            <param name="conversation">The conversation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.NonPlayableCharacter.#ctor(System.String,BP.AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class.
            </summary>
            <param name="name">The name of this NonPlayableCharacter.</param>
            <param name="description">The description of this NonPlayableCharacter.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.NonPlayableCharacter.#ctor(System.String,BP.AdventureFramework.Interaction.Description,BP.AdventureFramework.Interaction.Conversation)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class.
            </summary>
            <param name="name">The name of this NonPlayableCharacter.</param>
            <param name="description">The description of this NonPlayableCharacter.</param>
            <param name="conversation">The conversation.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.NonPlayableCharacter.#ctor(System.String,BP.AdventureFramework.Interaction.Description,BP.AdventureFramework.Interaction.Conversation,System.Boolean,BP.AdventureFramework.Interaction.InteractionCallback)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class.
            </summary>
            <param name="name">The name of this NonPlayableCharacter.</param>
            <param name="description">The description of this NonPlayableCharacter.</param>
            <param name="conversation">The conversation.</param>
            <param name="isAlive">Set if this NonPlayableCharacter is alive.</param>
            <param name="interaction">Set this NonPlayableCharacter's interaction.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.NonPlayableCharacter.#ctor(System.String,BP.AdventureFramework.Interaction.Description,BP.AdventureFramework.Interaction.Conversation,System.Boolean,BP.AdventureFramework.Interaction.InteractionCallback,BP.AdventureFramework.Interaction.ExaminationCallback)">
            <summary>
            Initializes a new instance of the NonPlayableCharacter class.
            </summary>
            <param name="name">The name of this NonPlayableCharacter.</param>
            <param name="description">The description of this NonPlayableCharacter.</param>
            <param name="conversation">The conversation.</param>
            <param name="isAlive">Set if this NonPlayableCharacter is alive.</param>
            <param name="interaction">Set this NonPlayableCharacter's interaction.</param>
            <param name="examination">Set this NonPlayableCharacter's examination.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.NonPlayableCharacter.OnTalk">
            <summary>
            Handle talking.
            </summary>
            <returns>A string representing the dialogue.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.NonPlayableCharacter.Talk">
            <summary>
            Talk to this object.
            </summary>
            <returns>A string representing the conversation.</returns>
        </member>
        <member name="T:BP.AdventureFramework.Characters.PlayableCharacter">
            <summary>
            Represents a playable character.
            </summary>
        </member>
        <member name="E:BP.AdventureFramework.Characters.PlayableCharacter.Died">
            <summary>
            Occurs if this player dies.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Characters.PlayableCharacter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the PlayableCharacter class.
            </summary>
            <param name="name">The name of the player.</param>
            <param name="description">The description of the player.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.PlayableCharacter.#ctor(System.String,BP.AdventureFramework.Interaction.Description)">
            <summary>
            Initializes a new instance of the PlayableCharacter class.
            </summary>
            <param name="name">The name of the player.</param>
            <param name="description">The description of the player.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.PlayableCharacter.#ctor(System.String,System.String,BP.AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the PlayableCharacter class.
            </summary>
            <param name="name">The name of the player.</param>
            <param name="description">The description of the player.</param>
            <param name="items">The players items.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.PlayableCharacter.#ctor(System.String,BP.AdventureFramework.Interaction.Description,BP.AdventureFramework.Interaction.Item[])">
            <summary>
            Initializes a new instance of the PlayableCharacter class.
            </summary>
            <param name="name">The name of the player.</param>
            <param name="description">The description of the player.</param>
            <param name="items">The players items.</param>
        </member>
        <member name="M:BP.AdventureFramework.Characters.PlayableCharacter.UseItem(BP.AdventureFramework.Interaction.IInteractWithItem,System.Int16)">
            <summary>
            Use an item.
            </summary>
            <param name="targetObject">A target object to use the item on.</param>
            <param name="itemIndex">The index of the item to use.</param>
            <returns>The result of the items usage.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.PlayableCharacter.UseItem(BP.AdventureFramework.Interaction.IInteractWithItem,BP.AdventureFramework.Interaction.Item)">
            <summary>
            Use an item.
            </summary>
            <param name="targetObject">A target object to use the item on.</param>
            <param name="item">The item to use.</param>
            <returns>The result of the items usage.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Characters.PlayableCharacter.Kill">
            <summary>
            Kill the character.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Characters.PlayableCharacter.Kill(System.String)">
            <summary>
            Kill the character.
            </summary>
            <param name="reason">A reason for the death.</param>
        </member>
        <member name="T:BP.AdventureFramework.Parsing.TextParser">
            <summary>
            A parser used for parsing text into in-game interactions.
            </summary>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.TryParseToCardinalDirection(System.String,BP.AdventureFramework.Locations.CardinalDirection@)">
            <summary>
            Try and parse a string to a CardinalDirection.
            </summary>
            <param name="obj">The string to parse.</param>
            <param name="direction">The direction.</param>
            <returns>The result of the parse.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.IsTextCardinalDirection(System.String)">
            <summary>
            Get if text is a CardinalDirection.
            </summary>
            <param name="input">The input to check.</param>
            <returns>True is the input is a cardinal direction.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.TryParseToCommand(System.String,BP.AdventureFramework.Interaction.Command@)">
            <summary>
            Try and parse a string to a Command.
            </summary>
            <param name="obj">The string to parse.</param>
            <param name="command">The command.</param>
            <returns>The result of the parse.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.IsCommand(System.String)">
            <summary>
            Get if a string is a Command.
            </summary>
            <param name="input">The input to check.</param>
            <returns>True is the input is a command.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.CheckEnumerationForCaseInsensitiveMember(System.Type,System.String,System.Object@)">
            <summary>
            Check an enumeration for a case insensitive value.
            </summary>
            <param name="typeOfEnum">The type of the enumeration to check.</param>
            <param name="name">The name of the enumeration member.</param>
            <param name="obj">The enumeration member, if found.</param>
            <returns>The result of the check.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.TryParseToGameCommand(System.String,BP.AdventureFramework.GameStructure.GameCommand@)">
            <summary>
            Try and parse a string to a GameCommand.
            </summary>
            <param name="obj">The string to parse.</param>
            <param name="command">The command.</param>
            <returns>The result of the parse.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.TryParseToFrameDrawingOption(System.String,BP.AdventureFramework.Rendering.FrameDrawingOption@)">
            <summary>
            Try and parse a string to a FrameDrawingOption.
            </summary>
            <param name="obj">The string to parse.</param>
            <param name="command">The command.</param>
            <returns>The result of the parse.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.IsFrameDrawingOption(System.String)">
            <summary>
            Get if a string is a FrameDrawingOption.
            </summary>
            <param name="input">The input to check.</param>
            <returns>True is the input is a command.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.ReactToInput(System.String,BP.AdventureFramework.GameStructure.Game,System.String@)">
            <summary>
            React to an input string. This will take all necessary action to the input on the Game parameter.
            </summary>
            <param name="input">The input to action.</param>
            <param name="game">The game to action the input on.</param>
            <param name="result">Any result of the reaction.</param>
            <returns>The reaction to the input.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.GetObjectifier(System.String)">
            <summary>
            Get an objectifier for a word.
            </summary>
            <param name="word">The word.</param>
            <returns>The objectifier.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.IsVowel(System.Char)">
            <summary>
            Get if a character is a vowel.
            </summary>
            <param name="c">The character to check.</param>
            <returns>True if the character is a vowel.</returns>
        </member>
        <member name="M:BP.AdventureFramework.Parsing.TextParser.IsPlural(System.String)">
            <summary>
            Get if a word is plural.
            </summary>
            <param name="word">The word to check.</param>
            <returns>True if the word is plural.</returns>
        </member>
    </members>
</doc>
